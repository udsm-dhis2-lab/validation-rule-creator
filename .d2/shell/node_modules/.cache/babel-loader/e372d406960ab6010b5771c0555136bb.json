{"ast":null,"code":"/**\n * @param {Object} args\n * @param {bool} args.filterable\n * @param {Object[]} args.sourceOptions\n * @param {string[]} args.highlightedSourceOptions\n * @param {string[]} args.selected\n * @param {Function} args.onChange\n * @param {Function} args.setHighlightedSourceOptions\n * @returns void\n */\nexport const addIndividualSourceOptions = ({\n  filterable,\n  sourceOptions,\n  highlightedSourceOptions,\n  maxSelections,\n  onChange,\n  selected,\n  setHighlightedSourceOptions\n}) => {\n  /**\n   * Creates a subset of the highlighted options to reflect a changed\n   * filter value in case previously highlighted options are now\n   * hidden.\n   *\n   * This enables us to keep items highlighted while searching for\n   * a particular one.\n   *\n   * With this subset we only select the subset when the user\n   * clicks the \"add individuals\" button\n   */\n  const filteredHighlightedSourceOptions = filterable ? highlightedSourceOptions.filter(value => sourceOptions.find(filteredOption => filteredOption.value === value)) : highlightedSourceOptions;\n  const newSelected = filteredHighlightedSourceOptions.reduce((accumulatedSelected, value) => [...accumulatedSelected, filteredHighlightedSourceOptions.find(filteredHighlightedSourceOption => filteredHighlightedSourceOption === value)], selected);\n  setHighlightedSourceOptions([]);\n  /**\n   * This will extract from the end, hence the \"-1 *\"\n   * As the \"newest\" additions are always at the end of the array,\n   * it's safe to just take the last nth (depending on maxSelection)\n   * to always get the right ones\n   */\n\n  onChange({\n    selected: newSelected.slice(-1 * maxSelections)\n  });\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-widgets/build/es/Transfer/Transfer/addIndividualSourceOptions.js"],"names":["addIndividualSourceOptions","filterable","sourceOptions","highlightedSourceOptions","maxSelections","onChange","selected","setHighlightedSourceOptions","filteredHighlightedSourceOptions","filter","value","find","filteredOption","newSelected","reduce","accumulatedSelected","filteredHighlightedSourceOption","slice"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,0BAA0B,GAAG,CAAC;AACzCC,EAAAA,UADyC;AAEzCC,EAAAA,aAFyC;AAGzCC,EAAAA,wBAHyC;AAIzCC,EAAAA,aAJyC;AAKzCC,EAAAA,QALyC;AAMzCC,EAAAA,QANyC;AAOzCC,EAAAA;AAPyC,CAAD,KAQpC;AACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,QAAMC,gCAAgC,GAAGP,UAAU,GAAGE,wBAAwB,CAACM,MAAzB,CAAgCC,KAAK,IAAIR,aAAa,CAACS,IAAd,CAAmBC,cAAc,IAAIA,cAAc,CAACF,KAAf,KAAyBA,KAA9D,CAAzC,CAAH,GAAoHP,wBAAvK;AACA,QAAMU,WAAW,GAAGL,gCAAgC,CAACM,MAAjC,CAAwC,CAACC,mBAAD,EAAsBL,KAAtB,KAAgC,CAAC,GAAGK,mBAAJ,EAAyBP,gCAAgC,CAACG,IAAjC,CAAsCK,+BAA+B,IAAIA,+BAA+B,KAAKN,KAA7G,CAAzB,CAAxE,EAAuNJ,QAAvN,CAApB;AACAC,EAAAA,2BAA2B,CAAC,EAAD,CAA3B;AACA;AACF;AACA;AACA;AACA;AACA;;AAEEF,EAAAA,QAAQ,CAAC;AACPC,IAAAA,QAAQ,EAAEO,WAAW,CAACI,KAAZ,CAAkB,CAAC,CAAD,GAAKb,aAAvB;AADH,GAAD,CAAR;AAGD,CAjCM","sourcesContent":["/**\n * @param {Object} args\n * @param {bool} args.filterable\n * @param {Object[]} args.sourceOptions\n * @param {string[]} args.highlightedSourceOptions\n * @param {string[]} args.selected\n * @param {Function} args.onChange\n * @param {Function} args.setHighlightedSourceOptions\n * @returns void\n */\nexport const addIndividualSourceOptions = ({\n  filterable,\n  sourceOptions,\n  highlightedSourceOptions,\n  maxSelections,\n  onChange,\n  selected,\n  setHighlightedSourceOptions\n}) => {\n  /**\n   * Creates a subset of the highlighted options to reflect a changed\n   * filter value in case previously highlighted options are now\n   * hidden.\n   *\n   * This enables us to keep items highlighted while searching for\n   * a particular one.\n   *\n   * With this subset we only select the subset when the user\n   * clicks the \"add individuals\" button\n   */\n  const filteredHighlightedSourceOptions = filterable ? highlightedSourceOptions.filter(value => sourceOptions.find(filteredOption => filteredOption.value === value)) : highlightedSourceOptions;\n  const newSelected = filteredHighlightedSourceOptions.reduce((accumulatedSelected, value) => [...accumulatedSelected, filteredHighlightedSourceOptions.find(filteredHighlightedSourceOption => filteredHighlightedSourceOption === value)], selected);\n  setHighlightedSourceOptions([]);\n  /**\n   * This will extract from the end, hence the \"-1 *\"\n   * As the \"newest\" additions are always at the end of the array,\n   * it's safe to just take the last nth (depending on maxSelection)\n   * to always get the right ones\n   */\n\n  onChange({\n    selected: newSelected.slice(-1 * maxSelections)\n  });\n};"]},"metadata":{},"sourceType":"module"}