{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { getMutationFetchType } from './helpers/getMutationFetchType';\nimport { resolveDynamicQuery } from './helpers/resolveDynamicQuery';\nimport { validateResourceQuery, validateResourceQueries } from './helpers/validate';\n\nconst reduceResponses = (responses, names) => responses.reduce((out, response, idx) => {\n  out[names[idx]] = response;\n  return out;\n}, {});\n\nexport class DataEngine {\n  constructor(link) {\n    _defineProperty(this, \"link\", void 0);\n\n    this.link = link;\n  }\n\n  query(query, {\n    variables = {},\n    signal,\n    onComplete,\n    onError\n  } = {}) {\n    const names = Object.keys(query);\n    const queries = names.map(name => query[name]).map(q => resolveDynamicQuery(q, variables));\n    validateResourceQueries(queries, names);\n    return Promise.all(queries.map(q => {\n      return this.link.executeResourceQuery('read', q, {\n        signal\n      });\n    })).then(results => {\n      const data = reduceResponses(results, names);\n      onComplete && onComplete(data);\n      return data;\n    }).catch(error => {\n      onError && onError(error);\n      throw error;\n    });\n  }\n\n  mutate(mutation, {\n    variables = {},\n    signal,\n    onComplete,\n    onError\n  } = {}) {\n    const query = resolveDynamicQuery(mutation, variables);\n    const type = getMutationFetchType(mutation);\n    validateResourceQuery(type, query);\n    const result = this.link.executeResourceQuery(type, query, {\n      signal\n    });\n    return result.then(data => {\n      onComplete && onComplete(data);\n      return data;\n    }).catch(error => {\n      onError && onError(error);\n      throw error;\n    });\n  }\n\n}\nexport default DataEngine;","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/app-service-data/build/es/engine/DataEngine.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","getMutationFetchType","resolveDynamicQuery","validateResourceQuery","validateResourceQueries","reduceResponses","responses","names","reduce","out","response","idx","DataEngine","constructor","link","query","variables","signal","onComplete","onError","keys","queries","map","name","q","Promise","all","executeResourceQuery","then","results","data","catch","error","mutate","mutation","type","result"],"mappings":"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","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getMutationFetchType } from './helpers/getMutationFetchType';\nimport { resolveDynamicQuery } from './helpers/resolveDynamicQuery';\nimport { validateResourceQuery, validateResourceQueries } from './helpers/validate';\n\nconst reduceResponses = (responses, names) => responses.reduce((out, response, idx) => {\n  out[names[idx]] = response;\n  return out;\n}, {});\n\nexport class DataEngine {\n  constructor(link) {\n    _defineProperty(this, \"link\", void 0);\n\n    this.link = link;\n  }\n\n  query(query, {\n    variables = {},\n    signal,\n    onComplete,\n    onError\n  } = {}) {\n    const names = Object.keys(query);\n    const queries = names.map(name => query[name]).map(q => resolveDynamicQuery(q, variables));\n    validateResourceQueries(queries, names);\n    return Promise.all(queries.map(q => {\n      return this.link.executeResourceQuery('read', q, {\n        signal\n      });\n    })).then(results => {\n      const data = reduceResponses(results, names);\n      onComplete && onComplete(data);\n      return data;\n    }).catch(error => {\n      onError && onError(error);\n      throw error;\n    });\n  }\n\n  mutate(mutation, {\n    variables = {},\n    signal,\n    onComplete,\n    onError\n  } = {}) {\n    const query = resolveDynamicQuery(mutation, variables);\n    const type = getMutationFetchType(mutation);\n    validateResourceQuery(type, query);\n    const result = this.link.executeResourceQuery(type, query, {\n      signal\n    });\n    return result.then(data => {\n      onComplete && onComplete(data);\n      return data;\n    }).catch(error => {\n      onError && onError(error);\n      throw error;\n    });\n  }\n\n}\nexport default DataEngine;"]},"metadata":{},"sourceType":"module"}