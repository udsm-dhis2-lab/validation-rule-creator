{"ast":null,"code":"export const isEmpty = value => typeof value === 'undefined' || value === null || value === '';\nexport const isString = value => typeof value === 'string';\nexport const isInteger = value => Number.isSafeInteger(value);\nexport const isNumber = value => typeof value === 'number';\nexport const isNumeric = value => (isString(value) || isNumber(value)) && !isNaN(value);\nexport const isInRange = (lowerBound, upperBound, value) => value >= lowerBound && value <= upperBound;\nexport const toNumber = value => Number(value);\nexport const requiredArgumentErrorMessage = 'Incorrect arguments provided when creating validator';\nexport const requireArgument = (value, type) => {\n  if (isEmpty(value) || typeof value !== type) {\n    throw new Error(requiredArgumentErrorMessage);\n  }\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-forms/build/es/validators/helpers/index.js"],"names":["isEmpty","value","isString","isInteger","Number","isSafeInteger","isNumber","isNumeric","isNaN","isInRange","lowerBound","upperBound","toNumber","requiredArgumentErrorMessage","requireArgument","type","Error"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAGC,KAAK,IAAI,OAAOA,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAK,IAA1C,IAAkDA,KAAK,KAAK,EAArF;AACP,OAAO,MAAMC,QAAQ,GAAGD,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA3C;AACP,OAAO,MAAME,SAAS,GAAGF,KAAK,IAAIG,MAAM,CAACC,aAAP,CAAqBJ,KAArB,CAA3B;AACP,OAAO,MAAMK,QAAQ,GAAGL,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA3C;AACP,OAAO,MAAMM,SAAS,GAAGN,KAAK,IAAI,CAACC,QAAQ,CAACD,KAAD,CAAR,IAAmBK,QAAQ,CAACL,KAAD,CAA5B,KAAwC,CAACO,KAAK,CAACP,KAAD,CAAzE;AACP,OAAO,MAAMQ,SAAS,GAAG,CAACC,UAAD,EAAaC,UAAb,EAAyBV,KAAzB,KAAmCA,KAAK,IAAIS,UAAT,IAAuBT,KAAK,IAAIU,UAArF;AACP,OAAO,MAAMC,QAAQ,GAAGX,KAAK,IAAIG,MAAM,CAACH,KAAD,CAAhC;AACP,OAAO,MAAMY,4BAA4B,GAAG,sDAArC;AACP,OAAO,MAAMC,eAAe,GAAG,CAACb,KAAD,EAAQc,IAAR,KAAiB;AAC9C,MAAIf,OAAO,CAACC,KAAD,CAAP,IAAkB,OAAOA,KAAP,KAAiBc,IAAvC,EAA6C;AAC3C,UAAM,IAAIC,KAAJ,CAAUH,4BAAV,CAAN;AACD;AACF,CAJM","sourcesContent":["export const isEmpty = value => typeof value === 'undefined' || value === null || value === '';\nexport const isString = value => typeof value === 'string';\nexport const isInteger = value => Number.isSafeInteger(value);\nexport const isNumber = value => typeof value === 'number';\nexport const isNumeric = value => (isString(value) || isNumber(value)) && !isNaN(value);\nexport const isInRange = (lowerBound, upperBound, value) => value >= lowerBound && value <= upperBound;\nexport const toNumber = value => Number(value);\nexport const requiredArgumentErrorMessage = 'Incorrect arguments provided when creating validator';\nexport const requireArgument = (value, type) => {\n  if (isEmpty(value) || typeof value !== type) {\n    throw new Error(requiredArgumentErrorMessage);\n  }\n};"]},"metadata":{},"sourceType":"module"}