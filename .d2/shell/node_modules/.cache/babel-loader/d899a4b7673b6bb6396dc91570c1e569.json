{"ast":null,"code":"import React from 'react';\nimport { StackedTableHead } from './StackedTableHead.js';\n\nconst isChildTableHead = child => child.type === StackedTableHead;\n\nconst extractChildrenProp = component => component.props.children;\n\nconst extractRowsFromTableChildren = children => React.Children.toArray(children).filter(isChildTableHead) // extract table head children (rows)\n.map(extractChildrenProp) // when there are multiple header rows,\n// children will come as arrays\n.reduce((flattened, row) => Array.isArray(row) ? [...flattened, ...row] : [...flattened, row], []) // extract table row children (cells),\n// will return an array with arrays of cells\n.map(extractChildrenProp);\n\nconst calculateColumnCount = row => Array.isArray(row) ? row.reduce((total, col) => // make sure to take col span into account\ncol.props.colSpan ? total + parseInt(col.props.colSpan, 10) : total + 1, 0) : 1;\n\nconst mapCellsToLabels = rowChildren => {\n  let labels = []; // in case there's only one cell, the children are not an array\n\n  const row = Array.isArray(rowChildren) ? rowChildren : [rowChildren]; // Using a for loop here to be able to increment \"i\"\n  // when a cell has a colspan prop by the colspan number\n\n  for (let i = 0, count = row.length; i < count; ++i) {\n    const cell = row[i];\n    const colSpan = cell.props.colSpan ? parseInt(cell.props.colSpan, 10) : 1;\n    const label = extractLabelFromCell(cell); // Add a label entry for each column\n\n    labels = [...labels, ...Array(colSpan).fill(label)];\n  }\n\n  return labels;\n};\n\nconst extractLabelFromCell = cell => !cell.props.hideResponsiveLabel ? cell.props.children : '';\n\nconst combineRowLables = (columnCount, rowCount, headerLabels) => // create array with length of column count\nArray(columnCount).fill('').reduce((labels, _, colIndex) => {\n  // an array with all labels for a column\n  const colLabels = // create array with length of rows\n  Array(rowCount).fill('') // get label for current row & col\n  .map((__, rowIndex) => headerLabels[rowIndex][colIndex]) // remove empty ones\n  .filter(val => val);\n  return [...labels, colLabels.join(' / ')];\n}, []);\n\nexport const extractHeaderLabels = children => {\n  if (React.Children.count(children) === 0) return [];\n  const rows = extractRowsFromTableChildren(children);\n  if (!rows.length) return [];\n  const rowCount = rows.length;\n  const columnCount = calculateColumnCount(rows[0]);\n  const headerLabels = rows.map(mapCellsToLabels);\n  return combineRowLables(columnCount, rowCount, headerLabels);\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-core/build/es/StackedTable/extractHeaderLabels.js"],"names":["React","StackedTableHead","isChildTableHead","child","type","extractChildrenProp","component","props","children","extractRowsFromTableChildren","Children","toArray","filter","map","reduce","flattened","row","Array","isArray","calculateColumnCount","total","col","colSpan","parseInt","mapCellsToLabels","rowChildren","labels","i","count","length","cell","label","extractLabelFromCell","fill","hideResponsiveLabel","combineRowLables","columnCount","rowCount","headerLabels","_","colIndex","colLabels","__","rowIndex","val","join","extractHeaderLabels","rows"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StackedTableHead } from './StackedTableHead.js';\n\nconst isChildTableHead = child => child.type === StackedTableHead;\n\nconst extractChildrenProp = component => component.props.children;\n\nconst extractRowsFromTableChildren = children => React.Children.toArray(children).filter(isChildTableHead) // extract table head children (rows)\n.map(extractChildrenProp) // when there are multiple header rows,\n// children will come as arrays\n.reduce((flattened, row) => Array.isArray(row) ? [...flattened, ...row] : [...flattened, row], []) // extract table row children (cells),\n// will return an array with arrays of cells\n.map(extractChildrenProp);\n\nconst calculateColumnCount = row => Array.isArray(row) ? row.reduce((total, col) => // make sure to take col span into account\ncol.props.colSpan ? total + parseInt(col.props.colSpan, 10) : total + 1, 0) : 1;\n\nconst mapCellsToLabels = rowChildren => {\n  let labels = []; // in case there's only one cell, the children are not an array\n\n  const row = Array.isArray(rowChildren) ? rowChildren : [rowChildren]; // Using a for loop here to be able to increment \"i\"\n  // when a cell has a colspan prop by the colspan number\n\n  for (let i = 0, count = row.length; i < count; ++i) {\n    const cell = row[i];\n    const colSpan = cell.props.colSpan ? parseInt(cell.props.colSpan, 10) : 1;\n    const label = extractLabelFromCell(cell); // Add a label entry for each column\n\n    labels = [...labels, ...Array(colSpan).fill(label)];\n  }\n\n  return labels;\n};\n\nconst extractLabelFromCell = cell => !cell.props.hideResponsiveLabel ? cell.props.children : '';\n\nconst combineRowLables = (columnCount, rowCount, headerLabels) => // create array with length of column count\nArray(columnCount).fill('').reduce((labels, _, colIndex) => {\n  // an array with all labels for a column\n  const colLabels = // create array with length of rows\n  Array(rowCount).fill('') // get label for current row & col\n  .map((__, rowIndex) => headerLabels[rowIndex][colIndex]) // remove empty ones\n  .filter(val => val);\n  return [...labels, colLabels.join(' / ')];\n}, []);\n\nexport const extractHeaderLabels = children => {\n  if (React.Children.count(children) === 0) return [];\n  const rows = extractRowsFromTableChildren(children);\n  if (!rows.length) return [];\n  const rowCount = rows.length;\n  const columnCount = calculateColumnCount(rows[0]);\n  const headerLabels = rows.map(mapCellsToLabels);\n  return combineRowLables(columnCount, rowCount, headerLabels);\n};"]},"metadata":{},"sourceType":"module"}