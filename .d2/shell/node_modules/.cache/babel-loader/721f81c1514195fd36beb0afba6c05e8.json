{"ast":null,"code":"/**\n * @param {Object} args\n * @param {string[]} args.highlightedPickedOptions\n * @param {string[]} args.selected\n * @param {Function} args.setHighlightedPickedOptions\n * @param {Function} args.onChange\n * @returns {void}\n */\nexport const removeIndividualPickedOptions = ({\n  filterablePicked,\n  pickedOptions,\n  highlightedPickedOptions,\n  onChange,\n  selected,\n  setHighlightedPickedOptions\n}) => {\n  /**\n   * Creates a subset of the highlighted options to reflect a changed\n   * filter value in case previously highlighted options are now\n   * hidden.\n   *\n   * This enables us to keep items highlighted while searching for\n   * a particular one.\n   *\n   * With this subset we only select the subset when the user\n   * clicks the \"add individuals\" button\n   */\n  const filteredHighlightedPickedOptions = filterablePicked ? highlightedPickedOptions.filter(value => pickedOptions.find(filteredOption => filteredOption.value === value)) : highlightedPickedOptions;\n  const newSelected = selected.filter(selectedOption => !filteredHighlightedPickedOptions.includes(selectedOption));\n  setHighlightedPickedOptions([]);\n  /**\n   * as the maximum amount of selected items\n   * is already restricted through the selection mechanism,\n   * there's no need to handle `maxSelection` here\n   */\n\n  onChange({\n    selected: newSelected\n  });\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-widgets/build/es/Transfer/Transfer/removeIndividualPickedOptions.js"],"names":["removeIndividualPickedOptions","filterablePicked","pickedOptions","highlightedPickedOptions","onChange","selected","setHighlightedPickedOptions","filteredHighlightedPickedOptions","filter","value","find","filteredOption","newSelected","selectedOption","includes"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,6BAA6B,GAAG,CAAC;AAC5CC,EAAAA,gBAD4C;AAE5CC,EAAAA,aAF4C;AAG5CC,EAAAA,wBAH4C;AAI5CC,EAAAA,QAJ4C;AAK5CC,EAAAA,QAL4C;AAM5CC,EAAAA;AAN4C,CAAD,KAOvC;AACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,QAAMC,gCAAgC,GAAGN,gBAAgB,GAAGE,wBAAwB,CAACK,MAAzB,CAAgCC,KAAK,IAAIP,aAAa,CAACQ,IAAd,CAAmBC,cAAc,IAAIA,cAAc,CAACF,KAAf,KAAyBA,KAA9D,CAAzC,CAAH,GAAoHN,wBAA7K;AACA,QAAMS,WAAW,GAAGP,QAAQ,CAACG,MAAT,CAAgBK,cAAc,IAAI,CAACN,gCAAgC,CAACO,QAAjC,CAA0CD,cAA1C,CAAnC,CAApB;AACAP,EAAAA,2BAA2B,CAAC,EAAD,CAA3B;AACA;AACF;AACA;AACA;AACA;;AAEEF,EAAAA,QAAQ,CAAC;AACPC,IAAAA,QAAQ,EAAEO;AADH,GAAD,CAAR;AAGD,CA/BM","sourcesContent":["/**\n * @param {Object} args\n * @param {string[]} args.highlightedPickedOptions\n * @param {string[]} args.selected\n * @param {Function} args.setHighlightedPickedOptions\n * @param {Function} args.onChange\n * @returns {void}\n */\nexport const removeIndividualPickedOptions = ({\n  filterablePicked,\n  pickedOptions,\n  highlightedPickedOptions,\n  onChange,\n  selected,\n  setHighlightedPickedOptions\n}) => {\n  /**\n   * Creates a subset of the highlighted options to reflect a changed\n   * filter value in case previously highlighted options are now\n   * hidden.\n   *\n   * This enables us to keep items highlighted while searching for\n   * a particular one.\n   *\n   * With this subset we only select the subset when the user\n   * clicks the \"add individuals\" button\n   */\n  const filteredHighlightedPickedOptions = filterablePicked ? highlightedPickedOptions.filter(value => pickedOptions.find(filteredOption => filteredOption.value === value)) : highlightedPickedOptions;\n  const newSelected = selected.filter(selectedOption => !filteredHighlightedPickedOptions.includes(selectedOption));\n  setHighlightedPickedOptions([]);\n  /**\n   * as the maximum amount of selected items\n   * is already restricted through the selection mechanism,\n   * there's no need to handle `maxSelection` here\n   */\n\n  onChange({\n    selected: newSelected\n  });\n};"]},"metadata":{},"sourceType":"module"}