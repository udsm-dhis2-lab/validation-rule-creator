{"ast":null,"code":"const request = (url, options) => {\n  const abortController = new AbortController();\n  const promise = new Promise((resolve, reject) => {\n    fetch(url, { ...options,\n      credentials: 'include',\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        Accept: 'application/json',\n        ...options.headers\n      },\n      signal: abortController.signal\n    }).then(response => {\n      if (response.status !== 200) {\n        reject('Request failed', response.statusText);\n        return;\n      }\n\n      try {\n        resolve(response.json());\n      } catch (e) {\n        resolve(response.text());\n      }\n    }).catch(e => {\n      console.error('Network error: ', e);\n      reject('Network error');\n    });\n  });\n\n  promise.abort = () => abortController.abort();\n\n  return promise;\n};\n\nexport const get = url => request(url, {\n  method: 'GET'\n});\nexport const post = (url, body) => request(url, {\n  method: 'POST',\n  body,\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n});","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/app-shell/node_modules/@dhis2/app-adapter/build/es/utils/api.js"],"names":["request","url","options","abortController","AbortController","promise","Promise","resolve","reject","fetch","credentials","headers","Accept","signal","then","response","status","statusText","json","e","text","catch","console","error","abort","get","method","post","body"],"mappings":"AAAA,MAAMA,OAAO,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAChC,QAAMC,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACA,QAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/CC,IAAAA,KAAK,CAACR,GAAD,EAAM,EAAE,GAAGC,OAAL;AACTQ,MAAAA,WAAW,EAAE,SADJ;AAETC,MAAAA,OAAO,EAAE;AACP,4BAAoB,gBADb;AAEPC,QAAAA,MAAM,EAAE,kBAFD;AAGP,WAAGV,OAAO,CAACS;AAHJ,OAFA;AAOTE,MAAAA,MAAM,EAAEV,eAAe,CAACU;AAPf,KAAN,CAAL,CAQGC,IARH,CAQQC,QAAQ,IAAI;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BR,QAAAA,MAAM,CAAC,gBAAD,EAAmBO,QAAQ,CAACE,UAA5B,CAAN;AACA;AACD;;AAED,UAAI;AACFV,QAAAA,OAAO,CAACQ,QAAQ,CAACG,IAAT,EAAD,CAAP;AACD,OAFD,CAEE,OAAOC,CAAP,EAAU;AACVZ,QAAAA,OAAO,CAACQ,QAAQ,CAACK,IAAT,EAAD,CAAP;AACD;AACF,KAnBD,EAmBGC,KAnBH,CAmBSF,CAAC,IAAI;AACZG,MAAAA,OAAO,CAACC,KAAR,CAAc,iBAAd,EAAiCJ,CAAjC;AACAX,MAAAA,MAAM,CAAC,eAAD,CAAN;AACD,KAtBD;AAuBD,GAxBe,CAAhB;;AA0BAH,EAAAA,OAAO,CAACmB,KAAR,GAAgB,MAAMrB,eAAe,CAACqB,KAAhB,EAAtB;;AAEA,SAAOnB,OAAP;AACD,CA/BD;;AAiCA,OAAO,MAAMoB,GAAG,GAAGxB,GAAG,IAAID,OAAO,CAACC,GAAD,EAAM;AACrCyB,EAAAA,MAAM,EAAE;AAD6B,CAAN,CAA1B;AAGP,OAAO,MAAMC,IAAI,GAAG,CAAC1B,GAAD,EAAM2B,IAAN,KAAe5B,OAAO,CAACC,GAAD,EAAM;AAC9CyB,EAAAA,MAAM,EAAE,MADsC;AAE9CE,EAAAA,IAF8C;AAG9CjB,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAHqC,CAAN,CAAnC","sourcesContent":["const request = (url, options) => {\n  const abortController = new AbortController();\n  const promise = new Promise((resolve, reject) => {\n    fetch(url, { ...options,\n      credentials: 'include',\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        Accept: 'application/json',\n        ...options.headers\n      },\n      signal: abortController.signal\n    }).then(response => {\n      if (response.status !== 200) {\n        reject('Request failed', response.statusText);\n        return;\n      }\n\n      try {\n        resolve(response.json());\n      } catch (e) {\n        resolve(response.text());\n      }\n    }).catch(e => {\n      console.error('Network error: ', e);\n      reject('Network error');\n    });\n  });\n\n  promise.abort = () => abortController.abort();\n\n  return promise;\n};\n\nexport const get = url => request(url, {\n  method: 'GET'\n});\nexport const post = (url, body) => request(url, {\n  method: 'POST',\n  body,\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n});"]},"metadata":{},"sourceType":"module"}