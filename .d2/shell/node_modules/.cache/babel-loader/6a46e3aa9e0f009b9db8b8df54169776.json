{"ast":null,"code":"import propTypes from '@dhis2/prop-types';\n''; // TODO: https://github.com/jsdoc/jsdoc/issues/1718\n\n/**\n * @module constants/shared-prop-types\n * @desc Shared propType definitions for UI components\n */\n\n/**\n * Status propType\n * @return {PropType} Mutually exclusive status: valid/warning/error\n */\n\nexport const statusPropType = propTypes.mutuallyExclusive(['valid', 'warning', 'error'], propTypes.bool); // Exported for storybook\n\nexport const statusArgType = {\n  table: {\n    type: {\n      summary: 'bool',\n      detail: \"'valid', 'warning', and 'error' are mutually exclusive props\"\n    }\n  },\n  control: {\n    type: 'boolean'\n  }\n};\n/**\n * Button variant propType\n * @return {PropType} Mutually exclusive variants:\n * primary/secondary/destructive\n */\n\nexport const buttonVariantPropType = propTypes.mutuallyExclusive(['primary', 'secondary', 'destructive'], propTypes.bool);\nexport const buttonVariantArgType = {\n  // No description because it should be set for the component description\n  table: {\n    type: {\n      summary: 'bool',\n      detail: \"'primary', 'secondary', and 'destructive' are mutually exclusive props\"\n    }\n  },\n  control: {\n    type: 'boolean'\n  }\n};\n/**\n * Size variant propType\n * @return {PropType} Mutually exclusive variants:\n * small/large\n */\n\nexport const sizePropType = propTypes.mutuallyExclusive(['small', 'large'], propTypes.bool);\nexport const sizeArgType = {\n  // No description because it should be set in the component description\n  table: {\n    type: {\n      summary: 'bool',\n      detail: \"'small' and 'large' are mutually exclusive props\"\n    }\n  },\n  control: {\n    type: 'boolean'\n  }\n};\n/**\n * Inside alignment props\n * @return {PropType} PropType that validates the inside alignment.\n */\n\nexport const insideAlignmentPropType = propTypes.oneOf(['top', 'middle', 'bottom']);\nexport const insideAlignmentArgType = {\n  description: 'Inside alignment of the component',\n  table: {\n    type: {\n      summary: \"'top' | 'middle' | 'bottom'\"\n    }\n  },\n  control: {\n    type: 'select',\n    options: ['top', 'middle', 'bottom']\n  }\n};\n/**\n * Placement properties against reference element\n * @return {PropType} PropType that validates placements.\n */\n\nexport const popperPlacementPropType = propTypes.oneOf(['auto', 'auto-start', 'auto-end', 'top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'right', 'right-start', 'right-end', 'left', 'left-start', 'left-end']);\nexport const popperPlacementArgType = {\n  description: 'Placement properties relative to reference element',\n  table: {\n    type: {\n      summary: 'string (one of several)',\n      detail: 'see options in menu'\n    }\n  },\n  control: {\n    type: 'select',\n    options: ['auto', 'auto-start', 'auto-end', 'top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'right', 'right-start', 'right-end', 'left', 'left-start', 'left-end']\n  }\n};\n/**\n * Either a DOM node, React ref or a virtual element\n * @return {PropType} Validate that prop is either a function or an\n * instance of an Element.\n */\n\nexport const popperReferencePropType = propTypes.oneOfType([// DOM node\npropTypes.instanceOf(Element), // React ref - React.useRef() or React.createRef()\npropTypes.shape({\n  current: propTypes.instanceOf(Element)\n}), // Virtual element\npropTypes.shape({\n  getBoundingClientRect: propTypes.func\n})]);\nexport const popperReferenceArgType = {\n  description: 'A reference to the element to position against: either a DOM node, React ref, \\\n        or an instance of an element',\n  table: {\n    type: {\n      summary: 'DOM node | React ref | Virtual element'\n    }\n  },\n  control: {\n    type: null\n  }\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-constants/build/es/shared-prop-types.js"],"names":["propTypes","statusPropType","mutuallyExclusive","bool","statusArgType","table","type","summary","detail","control","buttonVariantPropType","buttonVariantArgType","sizePropType","sizeArgType","insideAlignmentPropType","oneOf","insideAlignmentArgType","description","options","popperPlacementPropType","popperPlacementArgType","popperReferencePropType","oneOfType","instanceOf","Element","shape","current","getBoundingClientRect","func","popperReferenceArgType"],"mappings":"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","sourcesContent":["import propTypes from '@dhis2/prop-types';\n''; // TODO: https://github.com/jsdoc/jsdoc/issues/1718\n\n/**\n * @module constants/shared-prop-types\n * @desc Shared propType definitions for UI components\n */\n\n/**\n * Status propType\n * @return {PropType} Mutually exclusive status: valid/warning/error\n */\n\nexport const statusPropType = propTypes.mutuallyExclusive(['valid', 'warning', 'error'], propTypes.bool); // Exported for storybook\n\nexport const statusArgType = {\n  table: {\n    type: {\n      summary: 'bool',\n      detail: \"'valid', 'warning', and 'error' are mutually exclusive props\"\n    }\n  },\n  control: {\n    type: 'boolean'\n  }\n};\n/**\n * Button variant propType\n * @return {PropType} Mutually exclusive variants:\n * primary/secondary/destructive\n */\n\nexport const buttonVariantPropType = propTypes.mutuallyExclusive(['primary', 'secondary', 'destructive'], propTypes.bool);\nexport const buttonVariantArgType = {\n  // No description because it should be set for the component description\n  table: {\n    type: {\n      summary: 'bool',\n      detail: \"'primary', 'secondary', and 'destructive' are mutually exclusive props\"\n    }\n  },\n  control: {\n    type: 'boolean'\n  }\n};\n/**\n * Size variant propType\n * @return {PropType} Mutually exclusive variants:\n * small/large\n */\n\nexport const sizePropType = propTypes.mutuallyExclusive(['small', 'large'], propTypes.bool);\nexport const sizeArgType = {\n  // No description because it should be set in the component description\n  table: {\n    type: {\n      summary: 'bool',\n      detail: \"'small' and 'large' are mutually exclusive props\"\n    }\n  },\n  control: {\n    type: 'boolean'\n  }\n};\n/**\n * Inside alignment props\n * @return {PropType} PropType that validates the inside alignment.\n */\n\nexport const insideAlignmentPropType = propTypes.oneOf(['top', 'middle', 'bottom']);\nexport const insideAlignmentArgType = {\n  description: 'Inside alignment of the component',\n  table: {\n    type: {\n      summary: \"'top' | 'middle' | 'bottom'\"\n    }\n  },\n  control: {\n    type: 'select',\n    options: ['top', 'middle', 'bottom']\n  }\n};\n/**\n * Placement properties against reference element\n * @return {PropType} PropType that validates placements.\n */\n\nexport const popperPlacementPropType = propTypes.oneOf(['auto', 'auto-start', 'auto-end', 'top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'right', 'right-start', 'right-end', 'left', 'left-start', 'left-end']);\nexport const popperPlacementArgType = {\n  description: 'Placement properties relative to reference element',\n  table: {\n    type: {\n      summary: 'string (one of several)',\n      detail: 'see options in menu'\n    }\n  },\n  control: {\n    type: 'select',\n    options: ['auto', 'auto-start', 'auto-end', 'top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'right', 'right-start', 'right-end', 'left', 'left-start', 'left-end']\n  }\n};\n/**\n * Either a DOM node, React ref or a virtual element\n * @return {PropType} Validate that prop is either a function or an\n * instance of an Element.\n */\n\nexport const popperReferencePropType = propTypes.oneOfType([// DOM node\npropTypes.instanceOf(Element), // React ref - React.useRef() or React.createRef()\npropTypes.shape({\n  current: propTypes.instanceOf(Element)\n}), // Virtual element\npropTypes.shape({\n  getBoundingClientRect: propTypes.func\n})]);\nexport const popperReferenceArgType = {\n  description: 'A reference to the element to position against: either a DOM node, React ref, \\\n        or an instance of an element',\n  table: {\n    type: {\n      summary: 'DOM node | React ref | Virtual element'\n    }\n  },\n  control: {\n    type: null\n  }\n};"]},"metadata":{},"sourceType":"module"}