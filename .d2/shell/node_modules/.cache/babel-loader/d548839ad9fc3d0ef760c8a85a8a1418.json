{"ast":null,"code":"const instanceOfComponentFactory = (Component, isRequired) => (props, propSelector, // normally a propName, but when wrapped in arrayOf an index\ncomponentName, _location, propFullName // normally null but a string like \"propName[index]\" when wrapped in arrayOf\n) => {\n  const child = props[propSelector];\n  const propName = propFullName || propSelector;\n  const hasRenderableChild = child === 0 || !!child;\n  const baseMsg = `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`,`;\n\n  if (Array.isArray(child)) {\n    return new Error(`${baseMsg} expected a single component instance but received an array.`);\n  }\n\n  if (!hasRenderableChild) {\n    if (isRequired) {\n      return new Error(`${baseMsg} this is a required property but its value is \\`${child}\\`.`);\n    } else {\n      return null;\n    }\n  }\n\n  const expectedComponentName = typeof Component === 'string' ? Component : Component.name || Component.displayName;\n  const foundComponentName = typeof child.type !== 'string' ? child.type && child.type.name ? child.type.name : child.type : child.type && (child.type.name || child.type.displayName);\n\n  if (!foundComponentName) {\n    return new Error(`${baseMsg} could not read component name. Property value does not look like a component instance.`);\n  }\n\n  if (child.type !== Component) {\n    return new Error(`${baseMsg} expected an instance of \\`${expectedComponentName}\\` but found an instance of \\`${foundComponentName}\\`.`);\n  }\n\n  return null;\n};\n/**\n * Ensure the prop value is an instance of a certain component\n * @param {function|string} Component - The component that is expected. Can either be a React component,\n * or a string for built-in components, such as 'span', 'div', etc.\n * @return {Error|null} Returns null if all conditions are met, or an error\n * @example\n * import React from 'react'\n * import { instanceOfComponent } from '@dhis2/prop-types'\n * import { Button } from './Button'\n *\n * const ButtonWrap = ({ children }) => <div>{children}</div>\n * // This would allow the ButtonWrap to be empty\n * ButtonWrap.propTypes = {\n *     children: instanceOfComponent(Button)\n * }\n *\n * // Enforce presence of a Button instance\n * ButtonWrap.propTypes = {\n *     children: instanceOfComponent(Button).isRequired\n * }\n *\n * // Enforce presence of a multiple children, all Button instances\n * ButtonWrap.propTypes = {\n *     children: proptypes.arrayOf(instanceOfComponent(Button)).isRequired\n * }\n */\n\n\nexport function instanceOfComponent(Component) {\n  const fn = instanceOfComponentFactory(Component, false);\n  fn.isRequired = instanceOfComponentFactory(Component, true);\n  return fn;\n}","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/prop-types/build/es/propTypes/instanceOfComponent.js"],"names":["instanceOfComponentFactory","Component","isRequired","props","propSelector","componentName","_location","propFullName","child","propName","hasRenderableChild","baseMsg","Array","isArray","Error","expectedComponentName","name","displayName","foundComponentName","type","instanceOfComponent","fn"],"mappings":"AAAA,MAAMA,0BAA0B,GAAG,CAACC,SAAD,EAAYC,UAAZ,KAA2B,CAACC,KAAD,EAAQC,YAAR,EAAsB;AACpFC,aAD8D,EAC/CC,SAD+C,EACpCC,YADoC,CACvB;AADuB,KAEzD;AACH,QAAMC,KAAK,GAAGL,KAAK,CAACC,YAAD,CAAnB;AACA,QAAMK,QAAQ,GAAGF,YAAY,IAAIH,YAAjC;AACA,QAAMM,kBAAkB,GAAGF,KAAK,KAAK,CAAV,IAAe,CAAC,CAACA,KAA5C;AACA,QAAMG,OAAO,GAAI,kBAAiBF,QAAS,oBAAmBJ,aAAc,KAA5E;;AAEA,MAAIO,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAJ,EAA0B;AACxB,WAAO,IAAIM,KAAJ,CAAW,GAAEH,OAAQ,8DAArB,CAAP;AACD;;AAED,MAAI,CAACD,kBAAL,EAAyB;AACvB,QAAIR,UAAJ,EAAgB;AACd,aAAO,IAAIY,KAAJ,CAAW,GAAEH,OAAQ,mDAAkDH,KAAM,KAA7E,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF;;AAED,QAAMO,qBAAqB,GAAG,OAAOd,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA4CA,SAAS,CAACe,IAAV,IAAkBf,SAAS,CAACgB,WAAtG;AACA,QAAMC,kBAAkB,GAAG,OAAOV,KAAK,CAACW,IAAb,KAAsB,QAAtB,GAAiCX,KAAK,CAACW,IAAN,IAAcX,KAAK,CAACW,IAAN,CAAWH,IAAzB,GAAgCR,KAAK,CAACW,IAAN,CAAWH,IAA3C,GAAkDR,KAAK,CAACW,IAAzF,GAAgGX,KAAK,CAACW,IAAN,KAAeX,KAAK,CAACW,IAAN,CAAWH,IAAX,IAAmBR,KAAK,CAACW,IAAN,CAAWF,WAA7C,CAA3H;;AAEA,MAAI,CAACC,kBAAL,EAAyB;AACvB,WAAO,IAAIJ,KAAJ,CAAW,GAAEH,OAAQ,yFAArB,CAAP;AACD;;AAED,MAAIH,KAAK,CAACW,IAAN,KAAelB,SAAnB,EAA8B;AAC5B,WAAO,IAAIa,KAAJ,CAAW,GAAEH,OAAQ,8BAA6BI,qBAAsB,iCAAgCG,kBAAmB,KAA3H,CAAP;AACD;;AAED,SAAO,IAAP;AACD,CAhCD;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASE,mBAAT,CAA6BnB,SAA7B,EAAwC;AAC7C,QAAMoB,EAAE,GAAGrB,0BAA0B,CAACC,SAAD,EAAY,KAAZ,CAArC;AACAoB,EAAAA,EAAE,CAACnB,UAAH,GAAgBF,0BAA0B,CAACC,SAAD,EAAY,IAAZ,CAA1C;AACA,SAAOoB,EAAP;AACD","sourcesContent":["const instanceOfComponentFactory = (Component, isRequired) => (props, propSelector, // normally a propName, but when wrapped in arrayOf an index\ncomponentName, _location, propFullName // normally null but a string like \"propName[index]\" when wrapped in arrayOf\n) => {\n  const child = props[propSelector];\n  const propName = propFullName || propSelector;\n  const hasRenderableChild = child === 0 || !!child;\n  const baseMsg = `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`,`;\n\n  if (Array.isArray(child)) {\n    return new Error(`${baseMsg} expected a single component instance but received an array.`);\n  }\n\n  if (!hasRenderableChild) {\n    if (isRequired) {\n      return new Error(`${baseMsg} this is a required property but its value is \\`${child}\\`.`);\n    } else {\n      return null;\n    }\n  }\n\n  const expectedComponentName = typeof Component === 'string' ? Component : Component.name || Component.displayName;\n  const foundComponentName = typeof child.type !== 'string' ? child.type && child.type.name ? child.type.name : child.type : child.type && (child.type.name || child.type.displayName);\n\n  if (!foundComponentName) {\n    return new Error(`${baseMsg} could not read component name. Property value does not look like a component instance.`);\n  }\n\n  if (child.type !== Component) {\n    return new Error(`${baseMsg} expected an instance of \\`${expectedComponentName}\\` but found an instance of \\`${foundComponentName}\\`.`);\n  }\n\n  return null;\n};\n/**\n * Ensure the prop value is an instance of a certain component\n * @param {function|string} Component - The component that is expected. Can either be a React component,\n * or a string for built-in components, such as 'span', 'div', etc.\n * @return {Error|null} Returns null if all conditions are met, or an error\n * @example\n * import React from 'react'\n * import { instanceOfComponent } from '@dhis2/prop-types'\n * import { Button } from './Button'\n *\n * const ButtonWrap = ({ children }) => <div>{children}</div>\n * // This would allow the ButtonWrap to be empty\n * ButtonWrap.propTypes = {\n *     children: instanceOfComponent(Button)\n * }\n *\n * // Enforce presence of a Button instance\n * ButtonWrap.propTypes = {\n *     children: instanceOfComponent(Button).isRequired\n * }\n *\n * // Enforce presence of a multiple children, all Button instances\n * ButtonWrap.propTypes = {\n *     children: proptypes.arrayOf(instanceOfComponent(Button)).isRequired\n * }\n */\n\n\nexport function instanceOfComponent(Component) {\n  const fn = instanceOfComponentFactory(Component, false);\n  fn.isRequired = instanceOfComponentFactory(Component, true);\n  return fn;\n}"]},"metadata":{},"sourceType":"module"}