{"ast":null,"code":"import i18n from '../locales/index.js';\nimport { isEmpty, isString, isInRange, requireArgument } from './helpers/index.js';\n\nconst createCharacterLengthRange = (lowerBound, upperBound, customMessage) => {\n  requireArgument(lowerBound, 'number');\n  requireArgument(upperBound, 'number');\n  const errorMessage = customMessage || i18n.t('Please enter between {{lowerBound}} and {{upperBound}} characters', {\n    lowerBound,\n    upperBound\n  });\n  return value => isEmpty(value) || isString(value) && isInRange(lowerBound, upperBound, value.length) ? undefined : errorMessage;\n};\n\nexport { createCharacterLengthRange };","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-forms/build/es/validators/createCharacterLengthRange.js"],"names":["i18n","isEmpty","isString","isInRange","requireArgument","createCharacterLengthRange","lowerBound","upperBound","customMessage","errorMessage","t","value","length","undefined"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,qBAAjB;AACA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,SAA5B,EAAuCC,eAAvC,QAA8D,oBAA9D;;AAEA,MAAMC,0BAA0B,GAAG,CAACC,UAAD,EAAaC,UAAb,EAAyBC,aAAzB,KAA2C;AAC5EJ,EAAAA,eAAe,CAACE,UAAD,EAAa,QAAb,CAAf;AACAF,EAAAA,eAAe,CAACG,UAAD,EAAa,QAAb,CAAf;AACA,QAAME,YAAY,GAAGD,aAAa,IAAIR,IAAI,CAACU,CAAL,CAAO,mEAAP,EAA4E;AAChHJ,IAAAA,UADgH;AAEhHC,IAAAA;AAFgH,GAA5E,CAAtC;AAIA,SAAOI,KAAK,IAAIV,OAAO,CAACU,KAAD,CAAP,IAAkBT,QAAQ,CAACS,KAAD,CAAR,IAAmBR,SAAS,CAACG,UAAD,EAAaC,UAAb,EAAyBI,KAAK,CAACC,MAA/B,CAA9C,GAAuFC,SAAvF,GAAmGJ,YAAnH;AACD,CARD;;AAUA,SAASJ,0BAAT","sourcesContent":["import i18n from '../locales/index.js';\nimport { isEmpty, isString, isInRange, requireArgument } from './helpers/index.js';\n\nconst createCharacterLengthRange = (lowerBound, upperBound, customMessage) => {\n  requireArgument(lowerBound, 'number');\n  requireArgument(upperBound, 'number');\n  const errorMessage = customMessage || i18n.t('Please enter between {{lowerBound}} and {{upperBound}} characters', {\n    lowerBound,\n    upperBound\n  });\n  return value => isEmpty(value) || isString(value) && isInRange(lowerBound, upperBound, value.length) ? undefined : errorMessage;\n};\n\nexport { createCharacterLengthRange };"]},"metadata":{},"sourceType":"module"}