{"ast":null,"code":"import { normativeMetadataResources } from './metadataResources';\n\nconst validatePagination = (query, warn) => {\n  var _query$params, _query$params2;\n\n  if (!normativeMetadataResources.includes(query.resource)) {\n    return true;\n  }\n\n  if (((_query$params = query.params) === null || _query$params === void 0 ? void 0 : _query$params.paging) === false || ((_query$params2 = query.params) === null || _query$params2 === void 0 ? void 0 : _query$params2.paging) === 'false') {\n    warn('Data queries with paging=false are deprecated and should not be used!', query);\n    return false;\n  } // TODO: validate sub-resource pagination (i.e. fields=users~paging(1,50)[name] )\n\n\n  return true;\n};\n\nconst validateDeclarativeFields = (query, warn) => {\n  var _query$params3;\n\n  if (!normativeMetadataResources.includes(query.resource)) {\n    return true;\n  }\n\n  if (!((_query$params3 = query.params) !== null && _query$params3 !== void 0 && _query$params3.fields)) {\n    warn('Data queries should always specify fields to return', query);\n    return false;\n  } else {\n    var _fields;\n\n    let fields = undefined;\n\n    if (typeof query.params.fields === 'string') {\n      fields = query.params.fields.split(',').map(field => field.trim());\n    } else if (Array.isArray(query.params.fields)) {\n      fields = query.params.fields.map(field => String(field).trim());\n    }\n\n    if ((_fields = fields) !== null && _fields !== void 0 && _fields.find(field => field.match(/(^\\*$|^:.+)/))) {\n      warn('Data queries should not use wildcard or dynamic field groups', query.params.fields, query);\n      return false;\n    }\n  } // TODO: validate sub-resource wildcard fields (i.e. fields=users[*])\n\n\n  return true;\n};\n\nexport const validateResourceQuery = (query, type) => {\n  let valid = true;\n\n  if (process.env.NODE_ENV === 'development') {\n    // Support build-time dead code elimination in production\n    const warn = console.warn;\n\n    if (type === 'read') {\n      valid = validatePagination(query, warn) && valid;\n      valid = validateDeclarativeFields(query, warn) && valid;\n    }\n  }\n\n  return valid;\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/app-service-data/build/es/links/RestAPILink/validateQuery.js"],"names":["normativeMetadataResources","validatePagination","query","warn","_query$params","_query$params2","includes","resource","params","paging","validateDeclarativeFields","_query$params3","fields","_fields","undefined","split","map","field","trim","Array","isArray","String","find","match","validateResourceQuery","type","valid","process","env","NODE_ENV","console"],"mappings":"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","sourcesContent":["import { normativeMetadataResources } from './metadataResources';\n\nconst validatePagination = (query, warn) => {\n  var _query$params, _query$params2;\n\n  if (!normativeMetadataResources.includes(query.resource)) {\n    return true;\n  }\n\n  if (((_query$params = query.params) === null || _query$params === void 0 ? void 0 : _query$params.paging) === false || ((_query$params2 = query.params) === null || _query$params2 === void 0 ? void 0 : _query$params2.paging) === 'false') {\n    warn('Data queries with paging=false are deprecated and should not be used!', query);\n    return false;\n  } // TODO: validate sub-resource pagination (i.e. fields=users~paging(1,50)[name] )\n\n\n  return true;\n};\n\nconst validateDeclarativeFields = (query, warn) => {\n  var _query$params3;\n\n  if (!normativeMetadataResources.includes(query.resource)) {\n    return true;\n  }\n\n  if (!((_query$params3 = query.params) !== null && _query$params3 !== void 0 && _query$params3.fields)) {\n    warn('Data queries should always specify fields to return', query);\n    return false;\n  } else {\n    var _fields;\n\n    let fields = undefined;\n\n    if (typeof query.params.fields === 'string') {\n      fields = query.params.fields.split(',').map(field => field.trim());\n    } else if (Array.isArray(query.params.fields)) {\n      fields = query.params.fields.map(field => String(field).trim());\n    }\n\n    if ((_fields = fields) !== null && _fields !== void 0 && _fields.find(field => field.match(/(^\\*$|^:.+)/))) {\n      warn('Data queries should not use wildcard or dynamic field groups', query.params.fields, query);\n      return false;\n    }\n  } // TODO: validate sub-resource wildcard fields (i.e. fields=users[*])\n\n\n  return true;\n};\n\nexport const validateResourceQuery = (query, type) => {\n  let valid = true;\n\n  if (process.env.NODE_ENV === 'development') {\n    // Support build-time dead code elimination in production\n    const warn = console.warn;\n\n    if (type === 'read') {\n      valid = validatePagination(query, warn) && valid;\n      valid = validateDeclarativeFields(query, warn) && valid;\n    }\n  }\n\n  return valid;\n};"]},"metadata":{},"sourceType":"module"}