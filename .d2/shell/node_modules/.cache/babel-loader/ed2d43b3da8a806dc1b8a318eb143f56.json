{"ast":null,"code":"import { requiredIf } from '@dhis2/prop-types';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useState, forwardRef } from 'react';\nimport resolvedCss from './DataTableRow/DataTableRow.styles.js';\nimport { DragHandleCell } from './DataTableRow/DragHandleCell.js';\nimport { ExpandedRow } from './DataTableRow/ExpandedRow.js';\nimport { ExpandHandleCell } from './DataTableRow/ExpandHandleCell.js';\nimport { TableRow } from './TableElements/index.js';\n/**\n * @module\n * @param {DataTableRow.PropTypes} props\n * @returns {React.Component}\n * @example import { DataTableRow } from '@dhis2/ui'\n * @see Live demo: {@link /demo/?path=/story/datatable--default|Storybook}\n */\n\nexport const DataTableRow = /*#__PURE__*/forwardRef(({\n  children,\n  className,\n  dataTest,\n  expandableContent,\n  expanded,\n  selected,\n  draggable,\n  role,\n  onExpandToggle\n}, ref) => {\n  const [isHoveringExpandedContent, setIsHoveringExpandedContent] = useState(false);\n  const classes = cx(className, resolvedCss.className, {\n    expanded,\n    selected,\n    draggable,\n    isHoveringExpandedContent\n  });\n  const childCount = React.Children.count(children);\n  const colSpan = String(draggable || expandableContent ? childCount + 1 : childCount);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableRow, {\n    ref: ref,\n    className: classes,\n    dataTest: dataTest,\n    selected: selected,\n    draggable: draggable,\n    role: role\n  }, draggable && /*#__PURE__*/React.createElement(DragHandleCell, null), expandableContent && /*#__PURE__*/React.createElement(ExpandHandleCell, {\n    expanded: expanded,\n    onClick: onExpandToggle\n  }), children, resolvedCss.styles), expandableContent && expanded && /*#__PURE__*/React.createElement(ExpandedRow, {\n    className: className,\n    dataTest: dataTest,\n    setIsHoveringExpandedContent: setIsHoveringExpandedContent,\n    colSpan: colSpan,\n    selected: selected\n  }, expandableContent));\n});\nDataTableRow.displayName = 'DataTableRow';\nDataTableRow.defaultProps = {\n  dataTest: 'dhis2-uicore-datatablerow'\n};\n/**\n * @typedef {Object} PropTypes\n * @static\n * @prop {DataTableCell|DataTableCellHead|Array.<DataTableCell|DataTableCellHead>} [children]\n * @prop {string} [className]\n * @prop {string} [dataTest=dhis2-uicore-datatablerow]\n * @prop {boolean} [draggable] Renders and additional table cell with drag icon and applies draggable styles\n * @prop {string|node} [expandableContent] This content will be rendered into an additional row with fullwidth cell and the presence of this prop will display an additional table cell with expand icon\n * @prop {boolean} [expanded] Toggles expand icon (up/down) and expandable content visibility\n * @prop {string} [role]\n * @prop {boolean} [selected] Adds a green background color\n * @prop {function} [onExpandToggle] Callback for expand icon cell clicks\n */\n\nDataTableRow.propTypes = {\n  /** Should be `<DataTableCell>` or `<DataTableCellHead>` components */\n  children: PropTypes.node,\n  className: PropTypes.string,\n  dataTest: PropTypes.string,\n\n  /** Renders and additional table cell with drag icon and applies draggable styles */\n  draggable: PropTypes.bool,\n\n  /** This content will be rendered into an additional row with fullwidth cell and the presence of this prop will display an additional table cell with expand icon */\n  expandableContent: requiredIf(props => props.onExpandToggle, PropTypes.node),\n\n  /** Toggles expand icon (up/down) and expandable content visibility */\n  expanded: PropTypes.bool,\n  role: PropTypes.string,\n\n  /** Adds a green background color */\n  selected: PropTypes.bool,\n\n  /** Callback for expand icon cell clicks */\n  onExpandToggle: requiredIf(props => props.expandableContent, PropTypes.func)\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-widgets/build/es/DataTable/DataTableRow.js"],"names":["requiredIf","cx","PropTypes","React","useState","forwardRef","resolvedCss","DragHandleCell","ExpandedRow","ExpandHandleCell","TableRow","DataTableRow","children","className","dataTest","expandableContent","expanded","selected","draggable","role","onExpandToggle","ref","isHoveringExpandedContent","setIsHoveringExpandedContent","classes","childCount","Children","count","colSpan","String","createElement","Fragment","onClick","styles","displayName","defaultProps","propTypes","node","string","bool","props","func"],"mappings":"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","sourcesContent":["import { requiredIf } from '@dhis2/prop-types';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useState, forwardRef } from 'react';\nimport resolvedCss from './DataTableRow/DataTableRow.styles.js';\nimport { DragHandleCell } from './DataTableRow/DragHandleCell.js';\nimport { ExpandedRow } from './DataTableRow/ExpandedRow.js';\nimport { ExpandHandleCell } from './DataTableRow/ExpandHandleCell.js';\nimport { TableRow } from './TableElements/index.js';\n/**\n * @module\n * @param {DataTableRow.PropTypes} props\n * @returns {React.Component}\n * @example import { DataTableRow } from '@dhis2/ui'\n * @see Live demo: {@link /demo/?path=/story/datatable--default|Storybook}\n */\n\nexport const DataTableRow = /*#__PURE__*/forwardRef(({\n  children,\n  className,\n  dataTest,\n  expandableContent,\n  expanded,\n  selected,\n  draggable,\n  role,\n  onExpandToggle\n}, ref) => {\n  const [isHoveringExpandedContent, setIsHoveringExpandedContent] = useState(false);\n  const classes = cx(className, resolvedCss.className, {\n    expanded,\n    selected,\n    draggable,\n    isHoveringExpandedContent\n  });\n  const childCount = React.Children.count(children);\n  const colSpan = String(draggable || expandableContent ? childCount + 1 : childCount);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableRow, {\n    ref: ref,\n    className: classes,\n    dataTest: dataTest,\n    selected: selected,\n    draggable: draggable,\n    role: role\n  }, draggable && /*#__PURE__*/React.createElement(DragHandleCell, null), expandableContent && /*#__PURE__*/React.createElement(ExpandHandleCell, {\n    expanded: expanded,\n    onClick: onExpandToggle\n  }), children, resolvedCss.styles), expandableContent && expanded && /*#__PURE__*/React.createElement(ExpandedRow, {\n    className: className,\n    dataTest: dataTest,\n    setIsHoveringExpandedContent: setIsHoveringExpandedContent,\n    colSpan: colSpan,\n    selected: selected\n  }, expandableContent));\n});\nDataTableRow.displayName = 'DataTableRow';\nDataTableRow.defaultProps = {\n  dataTest: 'dhis2-uicore-datatablerow'\n};\n/**\n * @typedef {Object} PropTypes\n * @static\n * @prop {DataTableCell|DataTableCellHead|Array.<DataTableCell|DataTableCellHead>} [children]\n * @prop {string} [className]\n * @prop {string} [dataTest=dhis2-uicore-datatablerow]\n * @prop {boolean} [draggable] Renders and additional table cell with drag icon and applies draggable styles\n * @prop {string|node} [expandableContent] This content will be rendered into an additional row with fullwidth cell and the presence of this prop will display an additional table cell with expand icon\n * @prop {boolean} [expanded] Toggles expand icon (up/down) and expandable content visibility\n * @prop {string} [role]\n * @prop {boolean} [selected] Adds a green background color\n * @prop {function} [onExpandToggle] Callback for expand icon cell clicks\n */\n\nDataTableRow.propTypes = {\n  /** Should be `<DataTableCell>` or `<DataTableCellHead>` components */\n  children: PropTypes.node,\n  className: PropTypes.string,\n  dataTest: PropTypes.string,\n\n  /** Renders and additional table cell with drag icon and applies draggable styles */\n  draggable: PropTypes.bool,\n\n  /** This content will be rendered into an additional row with fullwidth cell and the presence of this prop will display an additional table cell with expand icon */\n  expandableContent: requiredIf(props => props.onExpandToggle, PropTypes.node),\n\n  /** Toggles expand icon (up/down) and expandable content visibility */\n  expanded: PropTypes.bool,\n  role: PropTypes.string,\n\n  /** Adds a green background color */\n  selected: PropTypes.bool,\n\n  /** Callback for expand icon cell clicks */\n  onExpandToggle: requiredIf(props => props.expandableContent, PropTypes.func)\n};"]},"metadata":{},"sourceType":"module"}