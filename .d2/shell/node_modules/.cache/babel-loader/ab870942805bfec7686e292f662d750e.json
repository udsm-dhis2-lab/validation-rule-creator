{"ast":null,"code":"import { getBaseModifiers } from '../Popper/modifiers.js';\nimport { ARROW_SIZE } from './Arrow.js';\nconst BORDER_RADIUS = 4;\n\nconst computeArrowPadding = () => {\n  // pythagoras\n  const diagonal = Math.sqrt(2 * Math.pow(ARROW_SIZE, 2));\n  const overflowInPx = (diagonal - ARROW_SIZE) / 2;\n  const padding = BORDER_RADIUS + overflowInPx;\n  return Math.ceil(padding);\n};\n\nconst hideArrowWhenDisplaced = ({\n  state\n}) => {\n  const halfArrow = ARROW_SIZE / 2;\n  const displacement = state.modifiersData.preventOverflow;\n  const referenceRect = state.rects.reference;\n  const shouldHideArrow = Math.abs(displacement.x) >= referenceRect.width + halfArrow || Math.abs(displacement.y) >= referenceRect.height + halfArrow;\n\n  if (typeof state.attributes.arrow !== 'object') {\n    state.attributes.arrow = {};\n  }\n\n  state.attributes.arrow['data-arrow-hidden'] = shouldHideArrow;\n  return state;\n};\n\nexport const combineModifiers = (arrow, arrowElement, resizeObservers) => {\n  const baseModifiers = getBaseModifiers(resizeObservers);\n\n  if (!arrow) {\n    return baseModifiers;\n  }\n\n  return [...baseModifiers, {\n    name: 'offset',\n    options: {\n      offset: [0, ARROW_SIZE]\n    }\n  }, {\n    name: 'arrow',\n    options: {\n      padding: computeArrowPadding(),\n      element: arrowElement\n    }\n  }, {\n    name: 'hideArrowWhenDisplaced',\n    enabled: true,\n    phase: 'main',\n    fn: hideArrowWhenDisplaced,\n    requires: ['preventOverflow']\n  }];\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-core/build/es/Popover/modifiers.js"],"names":["getBaseModifiers","ARROW_SIZE","BORDER_RADIUS","computeArrowPadding","diagonal","Math","sqrt","pow","overflowInPx","padding","ceil","hideArrowWhenDisplaced","state","halfArrow","displacement","modifiersData","preventOverflow","referenceRect","rects","reference","shouldHideArrow","abs","x","width","y","height","attributes","arrow","combineModifiers","arrowElement","resizeObservers","baseModifiers","name","options","offset","element","enabled","phase","fn","requires"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,wBAAjC;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,MAAMC,aAAa,GAAG,CAAtB;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAChC;AACA,QAAMC,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAU,IAAID,IAAI,CAACE,GAAL,CAASN,UAAT,EAAqB,CAArB,CAAd,CAAjB;AACA,QAAMO,YAAY,GAAG,CAACJ,QAAQ,GAAGH,UAAZ,IAA0B,CAA/C;AACA,QAAMQ,OAAO,GAAGP,aAAa,GAAGM,YAAhC;AACA,SAAOH,IAAI,CAACK,IAAL,CAAUD,OAAV,CAAP;AACD,CAND;;AAQA,MAAME,sBAAsB,GAAG,CAAC;AAC9BC,EAAAA;AAD8B,CAAD,KAEzB;AACJ,QAAMC,SAAS,GAAGZ,UAAU,GAAG,CAA/B;AACA,QAAMa,YAAY,GAAGF,KAAK,CAACG,aAAN,CAAoBC,eAAzC;AACA,QAAMC,aAAa,GAAGL,KAAK,CAACM,KAAN,CAAYC,SAAlC;AACA,QAAMC,eAAe,GAAGf,IAAI,CAACgB,GAAL,CAASP,YAAY,CAACQ,CAAtB,KAA4BL,aAAa,CAACM,KAAd,GAAsBV,SAAlD,IAA+DR,IAAI,CAACgB,GAAL,CAASP,YAAY,CAACU,CAAtB,KAA4BP,aAAa,CAACQ,MAAd,GAAuBZ,SAA1I;;AAEA,MAAI,OAAOD,KAAK,CAACc,UAAN,CAAiBC,KAAxB,KAAkC,QAAtC,EAAgD;AAC9Cf,IAAAA,KAAK,CAACc,UAAN,CAAiBC,KAAjB,GAAyB,EAAzB;AACD;;AAEDf,EAAAA,KAAK,CAACc,UAAN,CAAiBC,KAAjB,CAAuB,mBAAvB,IAA8CP,eAA9C;AACA,SAAOR,KAAP;AACD,CAdD;;AAgBA,OAAO,MAAMgB,gBAAgB,GAAG,CAACD,KAAD,EAAQE,YAAR,EAAsBC,eAAtB,KAA0C;AACxE,QAAMC,aAAa,GAAG/B,gBAAgB,CAAC8B,eAAD,CAAtC;;AAEA,MAAI,CAACH,KAAL,EAAY;AACV,WAAOI,aAAP;AACD;;AAED,SAAO,CAAC,GAAGA,aAAJ,EAAmB;AACxBC,IAAAA,IAAI,EAAE,QADkB;AAExBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,CAAC,CAAD,EAAIjC,UAAJ;AADD;AAFe,GAAnB,EAKJ;AACD+B,IAAAA,IAAI,EAAE,OADL;AAEDC,IAAAA,OAAO,EAAE;AACPxB,MAAAA,OAAO,EAAEN,mBAAmB,EADrB;AAEPgC,MAAAA,OAAO,EAAEN;AAFF;AAFR,GALI,EAWJ;AACDG,IAAAA,IAAI,EAAE,wBADL;AAEDI,IAAAA,OAAO,EAAE,IAFR;AAGDC,IAAAA,KAAK,EAAE,MAHN;AAIDC,IAAAA,EAAE,EAAE3B,sBAJH;AAKD4B,IAAAA,QAAQ,EAAE,CAAC,iBAAD;AALT,GAXI,CAAP;AAkBD,CAzBM","sourcesContent":["import { getBaseModifiers } from '../Popper/modifiers.js';\nimport { ARROW_SIZE } from './Arrow.js';\nconst BORDER_RADIUS = 4;\n\nconst computeArrowPadding = () => {\n  // pythagoras\n  const diagonal = Math.sqrt(2 * Math.pow(ARROW_SIZE, 2));\n  const overflowInPx = (diagonal - ARROW_SIZE) / 2;\n  const padding = BORDER_RADIUS + overflowInPx;\n  return Math.ceil(padding);\n};\n\nconst hideArrowWhenDisplaced = ({\n  state\n}) => {\n  const halfArrow = ARROW_SIZE / 2;\n  const displacement = state.modifiersData.preventOverflow;\n  const referenceRect = state.rects.reference;\n  const shouldHideArrow = Math.abs(displacement.x) >= referenceRect.width + halfArrow || Math.abs(displacement.y) >= referenceRect.height + halfArrow;\n\n  if (typeof state.attributes.arrow !== 'object') {\n    state.attributes.arrow = {};\n  }\n\n  state.attributes.arrow['data-arrow-hidden'] = shouldHideArrow;\n  return state;\n};\n\nexport const combineModifiers = (arrow, arrowElement, resizeObservers) => {\n  const baseModifiers = getBaseModifiers(resizeObservers);\n\n  if (!arrow) {\n    return baseModifiers;\n  }\n\n  return [...baseModifiers, {\n    name: 'offset',\n    options: {\n      offset: [0, ARROW_SIZE]\n    }\n  }, {\n    name: 'arrow',\n    options: {\n      padding: computeArrowPadding(),\n      element: arrowElement\n    }\n  }, {\n    name: 'hideArrowWhenDisplaced',\n    enabled: true,\n    phase: 'main',\n    fn: hideArrowWhenDisplaced,\n    requires: ['preventOverflow']\n  }];\n};"]},"metadata":{},"sourceType":"module"}