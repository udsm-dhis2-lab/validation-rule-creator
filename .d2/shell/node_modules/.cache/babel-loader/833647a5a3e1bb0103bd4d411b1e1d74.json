{"ast":null,"code":"import { useDataQuery } from '@dhis2/app-runtime';\nimport { addMissingDisplayNameProps, createQuery, sortNodeChildrenAlphabetically } from './useOrgData/helpers';\n/**\n * @param {string[]} ids\n * @param {Object} [options]\n * @param {boolean} [options.withChildren]\n * @param {boolean} [options.isUserDataViewFallback]\n * @returns {Object}\n */\n\nexport const useOrgData = (ids, {\n  withChildren = true,\n  isUserDataViewFallback,\n  suppressAlphabeticalSorting\n} = {}) => {\n  const query = createQuery(ids);\n  const variables = {\n    withChildren,\n    isUserDataViewFallback\n  };\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useDataQuery(query, {\n    variables\n  });\n  const nodes = data ? addMissingDisplayNameProps(data) : {};\n  let sorted = nodes;\n\n  if (!suppressAlphabeticalSorting) {\n    sorted = Object.values(nodes).map(sortNodeChildrenAlphabetically).reduce((current, node) => ({ ...current,\n      [node.id]: node\n    }), {});\n  }\n\n  return {\n    loading,\n    error,\n    data: sorted,\n    refetch\n  };\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-widgets/build/es/OrganisationUnitTree/useOrgData.js"],"names":["useDataQuery","addMissingDisplayNameProps","createQuery","sortNodeChildrenAlphabetically","useOrgData","ids","withChildren","isUserDataViewFallback","suppressAlphabeticalSorting","query","variables","loading","error","data","refetch","nodes","sorted","Object","values","map","reduce","current","node","id"],"mappings":"AAAA,SAASA,YAAT,QAA6B,oBAA7B;AACA,SAASC,0BAAT,EAAqCC,WAArC,EAAkDC,8BAAlD,QAAwF,sBAAxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAM;AAC9BC,EAAAA,YAAY,GAAG,IADe;AAE9BC,EAAAA,sBAF8B;AAG9BC,EAAAA;AAH8B,IAI5B,EAJsB,KAIf;AACT,QAAMC,KAAK,GAAGP,WAAW,CAACG,GAAD,CAAzB;AACA,QAAMK,SAAS,GAAG;AAChBJ,IAAAA,YADgB;AAEhBC,IAAAA;AAFgB,GAAlB;AAIA,QAAM;AACJI,IAAAA,OADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,IAHI;AAIJC,IAAAA;AAJI,MAKFd,YAAY,CAACS,KAAD,EAAQ;AACtBC,IAAAA;AADsB,GAAR,CALhB;AAQA,QAAMK,KAAK,GAAGF,IAAI,GAAGZ,0BAA0B,CAACY,IAAD,CAA7B,GAAsC,EAAxD;AACA,MAAIG,MAAM,GAAGD,KAAb;;AAEA,MAAI,CAACP,2BAAL,EAAkC;AAChCQ,IAAAA,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAcH,KAAd,EAAqBI,GAArB,CAAyBhB,8BAAzB,EAAyDiB,MAAzD,CAAgE,CAACC,OAAD,EAAUC,IAAV,MAAoB,EAAE,GAAGD,OAAL;AAC3F,OAACC,IAAI,CAACC,EAAN,GAAWD;AADgF,KAApB,CAAhE,EAEL,EAFK,CAAT;AAGD;;AAED,SAAO;AACLX,IAAAA,OADK;AAELC,IAAAA,KAFK;AAGLC,IAAAA,IAAI,EAAEG,MAHD;AAILF,IAAAA;AAJK,GAAP;AAMD,CAjCM","sourcesContent":["import { useDataQuery } from '@dhis2/app-runtime';\nimport { addMissingDisplayNameProps, createQuery, sortNodeChildrenAlphabetically } from './useOrgData/helpers';\n/**\n * @param {string[]} ids\n * @param {Object} [options]\n * @param {boolean} [options.withChildren]\n * @param {boolean} [options.isUserDataViewFallback]\n * @returns {Object}\n */\n\nexport const useOrgData = (ids, {\n  withChildren = true,\n  isUserDataViewFallback,\n  suppressAlphabeticalSorting\n} = {}) => {\n  const query = createQuery(ids);\n  const variables = {\n    withChildren,\n    isUserDataViewFallback\n  };\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useDataQuery(query, {\n    variables\n  });\n  const nodes = data ? addMissingDisplayNameProps(data) : {};\n  let sorted = nodes;\n\n  if (!suppressAlphabeticalSorting) {\n    sorted = Object.values(nodes).map(sortNodeChildrenAlphabetically).reduce((current, node) => ({ ...current,\n      [node.id]: node\n    }), {});\n  }\n\n  return {\n    loading,\n    error,\n    data: sorted,\n    refetch\n  };\n};"]},"metadata":{},"sourceType":"module"}