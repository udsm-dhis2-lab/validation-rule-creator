{"ast":null,"code":"import propTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { OrganisationUnitNode } from './OrganisationUnitNode.js';\nimport { orgUnitPathPropType } from './propTypes.js';\nimport { RootError } from './RootError.js';\nimport { RootLoading } from './RootLoading.js';\nimport { useExpanded } from './useExpanded.js';\nimport { useForceReload } from './useForceReload.js';\nimport { useOrgData } from './useOrgData.js';\n/**\n * @module\n * @param {OrganisationUnitTree.PropTypes} props\n * @returns {React.Component}\n *\n * @example\n * import { OrganisationUnitTree } from '@dhis2/ui-widgets'\n *\n * @example\n * <OrganisationUnitTree\n *     name=\"Root org unit\"\n *     roots=\"A0000000000\"\n *     onChange={onChange}\n *     onExpand={onExpand}\n *     onCollapse={onCollapse}\n *     onChildrenLoaded={onChildrenLoaded}\n *     initiallyExpanded={['/A0000000000/A0000000001']}\n *     filter={['/A0000000000/A0000000001/A0000000003']}\n * />\n *\n * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/organisms/organisation-unit-tree/org-unit-tree.md|Design system}\n * @see Live demo: {@link /demo/?path=/story/organisationunittree--collapsed|Storybook}\n */\n\nconst OrganisationUnitTree = ({\n  onChange,\n  roots,\n  autoExpandLoadingError,\n  dataTest,\n  disableSelection,\n  forceReload,\n  highlighted,\n  isUserDataViewFallback,\n  initiallyExpanded,\n  filter,\n  selected,\n  singleSelection,\n  suppressAlphabeticalSorting,\n  onExpand,\n  onCollapse,\n  onChildrenLoaded\n}) => {\n  const rootIds = Array.isArray(roots) ? roots : [roots];\n  const reloadId = useForceReload(forceReload);\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useOrgData(rootIds, {\n    withChildren: false,\n    isUserDataViewFallback,\n    suppressAlphabeticalSorting\n  });\n  const {\n    expanded,\n    handleExpand,\n    handleCollapse\n  } = useExpanded(initiallyExpanded, onExpand, onCollapse);\n  useEffect(() => {\n    // do not refetch on initial render\n    if (refetch && reloadId > 0) {\n      refetch();\n    }\n  }, [reloadId, refetch]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"data-test\": dataTest\n  }, error && /*#__PURE__*/React.createElement(RootError, {\n    error: error,\n    dataTest: dataTest\n  }), loading && /*#__PURE__*/React.createElement(RootLoading, {\n    dataTest: dataTest\n  }), !error && !loading && rootIds.map(rootId => {\n    const rootNode = data[rootId];\n    const rootPath = \"/\".concat(rootId);\n    return /*#__PURE__*/React.createElement(OrganisationUnitNode, {\n      key: rootPath,\n      autoExpandLoadingError: autoExpandLoadingError,\n      dataTest: dataTest,\n      disableSelection: disableSelection,\n      displayName: rootNode.displayName,\n      expanded: expanded,\n      highlighted: highlighted,\n      id: rootId,\n      isUserDataViewFallback: isUserDataViewFallback,\n      filter: filter,\n      path: rootPath,\n      selected: selected,\n      singleSelection: singleSelection,\n      suppressAlphabeticalSorting: suppressAlphabeticalSorting,\n      onChange: onChange,\n      onChildrenLoaded: onChildrenLoaded,\n      onCollapse: handleCollapse,\n      onExpand: handleExpand\n    });\n  }));\n};\n/**\n * @typedef {Object} PropTypes\n * @static\n *\n * @prop {string|string[]} roots\n * Root org unit id(s)\n *\n * @prop {Function} onChange\n * Will be called with the following object\n * { id: string; path: string; checked: boolean; }\n *\n * @prop {bool} [autoExpandLoadingError]\n * When set, the error when loading children\n * fails will be shown automaticlly\n *\n * @prop {bool} [singleSelection]\n * When set, no checkboxes will be displayed and only the first selected path\n * in `selected` will be highlighted\n *\n * @prop {bool} [disableSelection]\n * When set to true, no unit can be selected\n *\n * @prop {string[]} [filter]\n * All organisation units with a path that inclused the provided\n * paths will be shown. All others will not be rendered.\n * When not provided, all org units will be shown.\n *\n * @prop {bool} [forceReload]\n * When set to \"true\", everything will be reloaded.\n * In order to load it again after reloading,\n * \"forceReload\" has to be set to false and then to true again\n *\n * @prop {string[]} [selected]\n * An array of paths of selected OUs.\n * The path of an OU is the UIDs of the OU and all its parent OUs separated\n * by slashes (/)\n *\n * @prop {string[]} [initiallyExpanded]\n * An array of OU paths that will be expanded automatically\n * as soon as they are encountered.\n * The path of an OU is the UIDs of the OU\n * and all its parent OUs separated by slashes (/)\n * Note: This replaces \"openFirstLevel\" as that's redundant\n *\n * @prop {bool} [isUserDataViewFallback]\n * When provided, the \"isUserDataViewFallback\" option will be send when\n * requesting the org units\n *\n * @prop {string[]} [highlighted]\n * All units provided to \"highlighted\" as path will be visually\n * highlighted.\n * Note:\n * The d2-ui component used two props for this:\n * * searchResults\n * * highlightSearchResults\n *\n * @prop {Function} [onExpand]\n * Called with { path: string }\n * with the path of the parent of the level opened\n *\n * @prop {Function} [onCollapse]\n * Called with { path: string }\n * with the path of the parent of the level closed\n *\n * @prop {Function} [onChildrenLoaded]\n * Called with the children's data that was loaded\n */\n\n\nOrganisationUnitTree.propTypes = {\n  /** Root org unit ID(s) */\n  roots: propTypes.oneOfType([propTypes.string, propTypes.arrayOf(propTypes.string)]).isRequired,\n\n  /** Will be called with the following object:\n   * `{ id: string, displayName: string, path: string, checked: boolean, selected: string[] }` */\n  onChange: propTypes.func.isRequired,\n\n  /** When set, the error when loading children fails will be shown automatically */\n  autoExpandLoadingError: propTypes.bool,\n  dataTest: propTypes.string,\n\n  /** When set to true, no unit can be selected */\n  disableSelection: propTypes.bool,\n\n  /**\n   * All organisation units with a path that includes the provided paths will be shown.\n   * All others will not be rendered. When not provided, all org units will be shown.\n   */\n  filter: propTypes.arrayOf(orgUnitPathPropType),\n\n  /** When true, everything will be reloaded. In order to load it again after reloading, `forceReload` has to be set to `false` and then to `true` again */\n  forceReload: propTypes.bool,\n\n  /**\n   * All units provided to \"highlighted\" as path will be visually\n   * highlighted.\n   * Note:\n   * The d2-ui component used two props for this:\n   * * searchResults\n   * * highlightSearchResults\n   */\n  highlighted: propTypes.arrayOf(orgUnitPathPropType),\n\n  /**\n   * An array of OU paths that will be expanded automatically\n   * as soon as they are encountered.\n   * The path of an OU is the UIDs of the OU\n   * and all its parent OUs separated by slashes (/)\n   * Note: This replaces \"openFirstLevel\" as that's redundant\n   */\n  initiallyExpanded: propTypes.arrayOf(orgUnitPathPropType),\n\n  /** When provided, the 'isUserDataViewFallback' option will be sent when requesting the org units */\n  isUserDataViewFallback: propTypes.bool,\n\n  /** An array of paths of selected OUs. The path of an OU is the UIDs of the OU and all its parent OUs separated by slashes (`/`) */\n  selected: propTypes.arrayOf(orgUnitPathPropType),\n\n  /** When set, no checkboxes will be displayed and only the first selected path in `selected` will be highlighted */\n  singleSelection: propTypes.bool,\n\n  /** Turns off alphabetical sorting of units */\n  suppressAlphabeticalSorting: propTypes.bool,\n\n  /** Called with the children's data that was loaded */\n  onChildrenLoaded: propTypes.func,\n\n  /** Called with `{ path: string }` with the path of the parent of the level closed */\n  onCollapse: propTypes.func,\n\n  /** Called with `{ path: string }` with the path of the parent of the level opened */\n  onExpand: propTypes.func\n  /**\n   * @prop {string[]} [idsThatShouldBeReloaded]\n   * All units with ids (not paths!) provided\n   * to \"idsThatShouldBeReloaded\" will be reloaded\n   * In order to reload an id twice, the array must be changed\n   * while keeping the id to reload in the array\n   *\n   * NOTE: This is currently not working due to a limitation\n   * of the data engine (we can't force specific resource to reload,\n   * we'd have to reload the sibling nodes currently as well)\n   */\n  //idsThatShouldBeReloaded: propTypes.arrayOf(orgUnitIdPropType),\n\n};\nOrganisationUnitTree.defaultProps = {\n  dataTest: 'dhis2-uiwidgets-orgunittree',\n  filter: [],\n  highlighted: [],\n  initiallyExpanded: [],\n  selected: []\n};\nexport { OrganisationUnitTree };","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-widgets/build/es/OrganisationUnitTree/OrganisationUnitTree.js"],"names":["propTypes","React","useEffect","OrganisationUnitNode","orgUnitPathPropType","RootError","RootLoading","useExpanded","useForceReload","useOrgData","OrganisationUnitTree","onChange","roots","autoExpandLoadingError","dataTest","disableSelection","forceReload","highlighted","isUserDataViewFallback","initiallyExpanded","filter","selected","singleSelection","suppressAlphabeticalSorting","onExpand","onCollapse","onChildrenLoaded","rootIds","Array","isArray","reloadId","loading","error","data","refetch","withChildren","expanded","handleExpand","handleCollapse","createElement","map","rootId","rootNode","rootPath","concat","key","displayName","id","path","oneOfType","string","arrayOf","isRequired","func","bool","defaultProps"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,oBAAoB,GAAG,CAAC;AAC5BC,EAAAA,QAD4B;AAE5BC,EAAAA,KAF4B;AAG5BC,EAAAA,sBAH4B;AAI5BC,EAAAA,QAJ4B;AAK5BC,EAAAA,gBAL4B;AAM5BC,EAAAA,WAN4B;AAO5BC,EAAAA,WAP4B;AAQ5BC,EAAAA,sBAR4B;AAS5BC,EAAAA,iBAT4B;AAU5BC,EAAAA,MAV4B;AAW5BC,EAAAA,QAX4B;AAY5BC,EAAAA,eAZ4B;AAa5BC,EAAAA,2BAb4B;AAc5BC,EAAAA,QAd4B;AAe5BC,EAAAA,UAf4B;AAgB5BC,EAAAA;AAhB4B,CAAD,KAiBvB;AACJ,QAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcjB,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAA/C;AACA,QAAMkB,QAAQ,GAAGtB,cAAc,CAACQ,WAAD,CAA/B;AACA,QAAM;AACJe,IAAAA,OADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,IAHI;AAIJC,IAAAA;AAJI,MAKFzB,UAAU,CAACkB,OAAD,EAAU;AACtBQ,IAAAA,YAAY,EAAE,KADQ;AAEtBjB,IAAAA,sBAFsB;AAGtBK,IAAAA;AAHsB,GAAV,CALd;AAUA,QAAM;AACJa,IAAAA,QADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA;AAHI,MAIF/B,WAAW,CAACY,iBAAD,EAAoBK,QAApB,EAA8BC,UAA9B,CAJf;AAKAvB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIgC,OAAO,IAAIJ,QAAQ,GAAG,CAA1B,EAA6B;AAC3BI,MAAAA,OAAO;AACR;AACF,GALQ,EAKN,CAACJ,QAAD,EAAWI,OAAX,CALM,CAAT;AAMA,SAAO,aAAajC,KAAK,CAACsC,aAAN,CAAoB,KAApB,EAA2B;AAC7C,iBAAazB;AADgC,GAA3B,EAEjBkB,KAAK,IAAI,aAAa/B,KAAK,CAACsC,aAAN,CAAoBlC,SAApB,EAA+B;AACtD2B,IAAAA,KAAK,EAAEA,KAD+C;AAEtDlB,IAAAA,QAAQ,EAAEA;AAF4C,GAA/B,CAFL,EAKhBiB,OAAO,IAAI,aAAa9B,KAAK,CAACsC,aAAN,CAAoBjC,WAApB,EAAiC;AAC3DQ,IAAAA,QAAQ,EAAEA;AADiD,GAAjC,CALR,EAOhB,CAACkB,KAAD,IAAU,CAACD,OAAX,IAAsBJ,OAAO,CAACa,GAAR,CAAYC,MAAM,IAAI;AAC9C,UAAMC,QAAQ,GAAGT,IAAI,CAACQ,MAAD,CAArB;AACA,UAAME,QAAQ,GAAG,IAAIC,MAAJ,CAAWH,MAAX,CAAjB;AACA,WAAO,aAAaxC,KAAK,CAACsC,aAAN,CAAoBpC,oBAApB,EAA0C;AAC5D0C,MAAAA,GAAG,EAAEF,QADuD;AAE5D9B,MAAAA,sBAAsB,EAAEA,sBAFoC;AAG5DC,MAAAA,QAAQ,EAAEA,QAHkD;AAI5DC,MAAAA,gBAAgB,EAAEA,gBAJ0C;AAK5D+B,MAAAA,WAAW,EAAEJ,QAAQ,CAACI,WALsC;AAM5DV,MAAAA,QAAQ,EAAEA,QANkD;AAO5DnB,MAAAA,WAAW,EAAEA,WAP+C;AAQ5D8B,MAAAA,EAAE,EAAEN,MARwD;AAS5DvB,MAAAA,sBAAsB,EAAEA,sBAToC;AAU5DE,MAAAA,MAAM,EAAEA,MAVoD;AAW5D4B,MAAAA,IAAI,EAAEL,QAXsD;AAY5DtB,MAAAA,QAAQ,EAAEA,QAZkD;AAa5DC,MAAAA,eAAe,EAAEA,eAb2C;AAc5DC,MAAAA,2BAA2B,EAAEA,2BAd+B;AAe5DZ,MAAAA,QAAQ,EAAEA,QAfkD;AAgB5De,MAAAA,gBAAgB,EAAEA,gBAhB0C;AAiB5DD,MAAAA,UAAU,EAAEa,cAjBgD;AAkB5Dd,MAAAA,QAAQ,EAAEa;AAlBkD,KAA1C,CAApB;AAoBD,GAvByB,CAPN,CAApB;AA+BD,CAxED;AAyEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA3B,oBAAoB,CAACV,SAArB,GAAiC;AAC/B;AACAY,EAAAA,KAAK,EAAEZ,SAAS,CAACiD,SAAV,CAAoB,CAACjD,SAAS,CAACkD,MAAX,EAAmBlD,SAAS,CAACmD,OAAV,CAAkBnD,SAAS,CAACkD,MAA5B,CAAnB,CAApB,EAA6EE,UAFrD;;AAI/B;AACF;AACEzC,EAAAA,QAAQ,EAAEX,SAAS,CAACqD,IAAV,CAAeD,UANM;;AAQ/B;AACAvC,EAAAA,sBAAsB,EAAEb,SAAS,CAACsD,IATH;AAU/BxC,EAAAA,QAAQ,EAAEd,SAAS,CAACkD,MAVW;;AAY/B;AACAnC,EAAAA,gBAAgB,EAAEf,SAAS,CAACsD,IAbG;;AAe/B;AACF;AACA;AACA;AACElC,EAAAA,MAAM,EAAEpB,SAAS,CAACmD,OAAV,CAAkB/C,mBAAlB,CAnBuB;;AAqB/B;AACAY,EAAAA,WAAW,EAAEhB,SAAS,CAACsD,IAtBQ;;AAwB/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACErC,EAAAA,WAAW,EAAEjB,SAAS,CAACmD,OAAV,CAAkB/C,mBAAlB,CAhCkB;;AAkC/B;AACF;AACA;AACA;AACA;AACA;AACA;AACEe,EAAAA,iBAAiB,EAAEnB,SAAS,CAACmD,OAAV,CAAkB/C,mBAAlB,CAzCY;;AA2C/B;AACAc,EAAAA,sBAAsB,EAAElB,SAAS,CAACsD,IA5CH;;AA8C/B;AACAjC,EAAAA,QAAQ,EAAErB,SAAS,CAACmD,OAAV,CAAkB/C,mBAAlB,CA/CqB;;AAiD/B;AACAkB,EAAAA,eAAe,EAAEtB,SAAS,CAACsD,IAlDI;;AAoD/B;AACA/B,EAAAA,2BAA2B,EAAEvB,SAAS,CAACsD,IArDR;;AAuD/B;AACA5B,EAAAA,gBAAgB,EAAE1B,SAAS,CAACqD,IAxDG;;AA0D/B;AACA5B,EAAAA,UAAU,EAAEzB,SAAS,CAACqD,IA3DS;;AA6D/B;AACA7B,EAAAA,QAAQ,EAAExB,SAAS,CAACqD;AACpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;;AA1E+B,CAAjC;AA6EA3C,oBAAoB,CAAC6C,YAArB,GAAoC;AAClCzC,EAAAA,QAAQ,EAAE,6BADwB;AAElCM,EAAAA,MAAM,EAAE,EAF0B;AAGlCH,EAAAA,WAAW,EAAE,EAHqB;AAIlCE,EAAAA,iBAAiB,EAAE,EAJe;AAKlCE,EAAAA,QAAQ,EAAE;AALwB,CAApC;AAOA,SAASX,oBAAT","sourcesContent":["import propTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { OrganisationUnitNode } from './OrganisationUnitNode.js';\nimport { orgUnitPathPropType } from './propTypes.js';\nimport { RootError } from './RootError.js';\nimport { RootLoading } from './RootLoading.js';\nimport { useExpanded } from './useExpanded.js';\nimport { useForceReload } from './useForceReload.js';\nimport { useOrgData } from './useOrgData.js';\n/**\n * @module\n * @param {OrganisationUnitTree.PropTypes} props\n * @returns {React.Component}\n *\n * @example\n * import { OrganisationUnitTree } from '@dhis2/ui-widgets'\n *\n * @example\n * <OrganisationUnitTree\n *     name=\"Root org unit\"\n *     roots=\"A0000000000\"\n *     onChange={onChange}\n *     onExpand={onExpand}\n *     onCollapse={onCollapse}\n *     onChildrenLoaded={onChildrenLoaded}\n *     initiallyExpanded={['/A0000000000/A0000000001']}\n *     filter={['/A0000000000/A0000000001/A0000000003']}\n * />\n *\n * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/organisms/organisation-unit-tree/org-unit-tree.md|Design system}\n * @see Live demo: {@link /demo/?path=/story/organisationunittree--collapsed|Storybook}\n */\n\nconst OrganisationUnitTree = ({\n  onChange,\n  roots,\n  autoExpandLoadingError,\n  dataTest,\n  disableSelection,\n  forceReload,\n  highlighted,\n  isUserDataViewFallback,\n  initiallyExpanded,\n  filter,\n  selected,\n  singleSelection,\n  suppressAlphabeticalSorting,\n  onExpand,\n  onCollapse,\n  onChildrenLoaded\n}) => {\n  const rootIds = Array.isArray(roots) ? roots : [roots];\n  const reloadId = useForceReload(forceReload);\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useOrgData(rootIds, {\n    withChildren: false,\n    isUserDataViewFallback,\n    suppressAlphabeticalSorting\n  });\n  const {\n    expanded,\n    handleExpand,\n    handleCollapse\n  } = useExpanded(initiallyExpanded, onExpand, onCollapse);\n  useEffect(() => {\n    // do not refetch on initial render\n    if (refetch && reloadId > 0) {\n      refetch();\n    }\n  }, [reloadId, refetch]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"data-test\": dataTest\n  }, error && /*#__PURE__*/React.createElement(RootError, {\n    error: error,\n    dataTest: dataTest\n  }), loading && /*#__PURE__*/React.createElement(RootLoading, {\n    dataTest: dataTest\n  }), !error && !loading && rootIds.map(rootId => {\n    const rootNode = data[rootId];\n    const rootPath = \"/\".concat(rootId);\n    return /*#__PURE__*/React.createElement(OrganisationUnitNode, {\n      key: rootPath,\n      autoExpandLoadingError: autoExpandLoadingError,\n      dataTest: dataTest,\n      disableSelection: disableSelection,\n      displayName: rootNode.displayName,\n      expanded: expanded,\n      highlighted: highlighted,\n      id: rootId,\n      isUserDataViewFallback: isUserDataViewFallback,\n      filter: filter,\n      path: rootPath,\n      selected: selected,\n      singleSelection: singleSelection,\n      suppressAlphabeticalSorting: suppressAlphabeticalSorting,\n      onChange: onChange,\n      onChildrenLoaded: onChildrenLoaded,\n      onCollapse: handleCollapse,\n      onExpand: handleExpand\n    });\n  }));\n};\n/**\n * @typedef {Object} PropTypes\n * @static\n *\n * @prop {string|string[]} roots\n * Root org unit id(s)\n *\n * @prop {Function} onChange\n * Will be called with the following object\n * { id: string; path: string; checked: boolean; }\n *\n * @prop {bool} [autoExpandLoadingError]\n * When set, the error when loading children\n * fails will be shown automaticlly\n *\n * @prop {bool} [singleSelection]\n * When set, no checkboxes will be displayed and only the first selected path\n * in `selected` will be highlighted\n *\n * @prop {bool} [disableSelection]\n * When set to true, no unit can be selected\n *\n * @prop {string[]} [filter]\n * All organisation units with a path that inclused the provided\n * paths will be shown. All others will not be rendered.\n * When not provided, all org units will be shown.\n *\n * @prop {bool} [forceReload]\n * When set to \"true\", everything will be reloaded.\n * In order to load it again after reloading,\n * \"forceReload\" has to be set to false and then to true again\n *\n * @prop {string[]} [selected]\n * An array of paths of selected OUs.\n * The path of an OU is the UIDs of the OU and all its parent OUs separated\n * by slashes (/)\n *\n * @prop {string[]} [initiallyExpanded]\n * An array of OU paths that will be expanded automatically\n * as soon as they are encountered.\n * The path of an OU is the UIDs of the OU\n * and all its parent OUs separated by slashes (/)\n * Note: This replaces \"openFirstLevel\" as that's redundant\n *\n * @prop {bool} [isUserDataViewFallback]\n * When provided, the \"isUserDataViewFallback\" option will be send when\n * requesting the org units\n *\n * @prop {string[]} [highlighted]\n * All units provided to \"highlighted\" as path will be visually\n * highlighted.\n * Note:\n * The d2-ui component used two props for this:\n * * searchResults\n * * highlightSearchResults\n *\n * @prop {Function} [onExpand]\n * Called with { path: string }\n * with the path of the parent of the level opened\n *\n * @prop {Function} [onCollapse]\n * Called with { path: string }\n * with the path of the parent of the level closed\n *\n * @prop {Function} [onChildrenLoaded]\n * Called with the children's data that was loaded\n */\n\n\nOrganisationUnitTree.propTypes = {\n  /** Root org unit ID(s) */\n  roots: propTypes.oneOfType([propTypes.string, propTypes.arrayOf(propTypes.string)]).isRequired,\n\n  /** Will be called with the following object:\n   * `{ id: string, displayName: string, path: string, checked: boolean, selected: string[] }` */\n  onChange: propTypes.func.isRequired,\n\n  /** When set, the error when loading children fails will be shown automatically */\n  autoExpandLoadingError: propTypes.bool,\n  dataTest: propTypes.string,\n\n  /** When set to true, no unit can be selected */\n  disableSelection: propTypes.bool,\n\n  /**\n   * All organisation units with a path that includes the provided paths will be shown.\n   * All others will not be rendered. When not provided, all org units will be shown.\n   */\n  filter: propTypes.arrayOf(orgUnitPathPropType),\n\n  /** When true, everything will be reloaded. In order to load it again after reloading, `forceReload` has to be set to `false` and then to `true` again */\n  forceReload: propTypes.bool,\n\n  /**\n   * All units provided to \"highlighted\" as path will be visually\n   * highlighted.\n   * Note:\n   * The d2-ui component used two props for this:\n   * * searchResults\n   * * highlightSearchResults\n   */\n  highlighted: propTypes.arrayOf(orgUnitPathPropType),\n\n  /**\n   * An array of OU paths that will be expanded automatically\n   * as soon as they are encountered.\n   * The path of an OU is the UIDs of the OU\n   * and all its parent OUs separated by slashes (/)\n   * Note: This replaces \"openFirstLevel\" as that's redundant\n   */\n  initiallyExpanded: propTypes.arrayOf(orgUnitPathPropType),\n\n  /** When provided, the 'isUserDataViewFallback' option will be sent when requesting the org units */\n  isUserDataViewFallback: propTypes.bool,\n\n  /** An array of paths of selected OUs. The path of an OU is the UIDs of the OU and all its parent OUs separated by slashes (`/`) */\n  selected: propTypes.arrayOf(orgUnitPathPropType),\n\n  /** When set, no checkboxes will be displayed and only the first selected path in `selected` will be highlighted */\n  singleSelection: propTypes.bool,\n\n  /** Turns off alphabetical sorting of units */\n  suppressAlphabeticalSorting: propTypes.bool,\n\n  /** Called with the children's data that was loaded */\n  onChildrenLoaded: propTypes.func,\n\n  /** Called with `{ path: string }` with the path of the parent of the level closed */\n  onCollapse: propTypes.func,\n\n  /** Called with `{ path: string }` with the path of the parent of the level opened */\n  onExpand: propTypes.func\n  /**\n   * @prop {string[]} [idsThatShouldBeReloaded]\n   * All units with ids (not paths!) provided\n   * to \"idsThatShouldBeReloaded\" will be reloaded\n   * In order to reload an id twice, the array must be changed\n   * while keeping the id to reload in the array\n   *\n   * NOTE: This is currently not working due to a limitation\n   * of the data engine (we can't force specific resource to reload,\n   * we'd have to reload the sibling nodes currently as well)\n   */\n  //idsThatShouldBeReloaded: propTypes.arrayOf(orgUnitIdPropType),\n\n};\nOrganisationUnitTree.defaultProps = {\n  dataTest: 'dhis2-uiwidgets-orgunittree',\n  filter: [],\n  highlighted: [],\n  initiallyExpanded: [],\n  selected: []\n};\nexport { OrganisationUnitTree };"]},"metadata":{},"sourceType":"module"}