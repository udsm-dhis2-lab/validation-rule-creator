{"ast":null,"code":"import { ADD_MODE, RANGE_MODE, REPLACE_MODE } from './modes.js';\n/**\n * @param {Object} args\n * @param {bool} args.altKey\n * @param {bool} args.shiftKey\n * @param {bool} args.ctrlKey\n * @param {bool} args.metaKey\n * @return {string}\n */\n\nexport const getModeByModifierKey = ({\n  altKey,\n  shiftKey,\n  ctrlKey,\n  metaKey\n}) => {\n  const keys = [altKey, shiftKey, ctrlKey, metaKey];\n  const amountKeyPressed = keys.filter(v => v);\n  const moreThanOneKeyPressed = amountKeyPressed.length;\n  if (moreThanOneKeyPressed !== 1) return REPLACE_MODE;\n  if (altKey || ctrlKey || metaKey) return ADD_MODE;\n  if (shiftKey) return RANGE_MODE; // default to replace mode\n\n  return REPLACE_MODE;\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-widgets/build/es/Transfer/common/getModeByModifierKey.js"],"names":["ADD_MODE","RANGE_MODE","REPLACE_MODE","getModeByModifierKey","altKey","shiftKey","ctrlKey","metaKey","keys","amountKeyPressed","filter","v","moreThanOneKeyPressed","length"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,YAA/B,QAAmD,YAAnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAAC;AACnCC,EAAAA,MADmC;AAEnCC,EAAAA,QAFmC;AAGnCC,EAAAA,OAHmC;AAInCC,EAAAA;AAJmC,CAAD,KAK9B;AACJ,QAAMC,IAAI,GAAG,CAACJ,MAAD,EAASC,QAAT,EAAmBC,OAAnB,EAA4BC,OAA5B,CAAb;AACA,QAAME,gBAAgB,GAAGD,IAAI,CAACE,MAAL,CAAYC,CAAC,IAAIA,CAAjB,CAAzB;AACA,QAAMC,qBAAqB,GAAGH,gBAAgB,CAACI,MAA/C;AACA,MAAID,qBAAqB,KAAK,CAA9B,EAAiC,OAAOV,YAAP;AACjC,MAAIE,MAAM,IAAIE,OAAV,IAAqBC,OAAzB,EAAkC,OAAOP,QAAP;AAClC,MAAIK,QAAJ,EAAc,OAAOJ,UAAP,CANV,CAM6B;;AAEjC,SAAOC,YAAP;AACD,CAdM","sourcesContent":["import { ADD_MODE, RANGE_MODE, REPLACE_MODE } from './modes.js';\n/**\n * @param {Object} args\n * @param {bool} args.altKey\n * @param {bool} args.shiftKey\n * @param {bool} args.ctrlKey\n * @param {bool} args.metaKey\n * @return {string}\n */\n\nexport const getModeByModifierKey = ({\n  altKey,\n  shiftKey,\n  ctrlKey,\n  metaKey\n}) => {\n  const keys = [altKey, shiftKey, ctrlKey, metaKey];\n  const amountKeyPressed = keys.filter(v => v);\n  const moreThanOneKeyPressed = amountKeyPressed.length;\n  if (moreThanOneKeyPressed !== 1) return REPLACE_MODE;\n  if (altKey || ctrlKey || metaKey) return ADD_MODE;\n  if (shiftKey) return RANGE_MODE; // default to replace mode\n\n  return REPLACE_MODE;\n};"]},"metadata":{},"sourceType":"module"}