{"ast":null,"code":"import { joinPath } from './path';\nimport { validateResourceQuery } from './validateQuery';\n\nconst encodeQueryParameter = param => {\n  if (Array.isArray(param)) {\n    return param.map(encodeQueryParameter).join(',');\n  }\n\n  if (typeof param === 'string') {\n    return encodeURIComponent(param);\n  }\n\n  if (typeof param === 'number' || typeof param === 'boolean') {\n    return String(param);\n  }\n\n  if (typeof param === 'object') {\n    throw new Error('Object parameter mappings not yet implemented');\n  }\n\n  throw new Error('Unknown parameter type');\n};\n\nconst queryParametersMapToArray = params => Object.keys(params).reduce((out, key) => {\n  const value = params[key];\n\n  if (key === 'filter' && Array.isArray(value)) {\n    value.forEach(item => {\n      out.push({\n        key: 'filter',\n        value: item\n      });\n    });\n  } else if (params[key] !== null && params[key] !== undefined) {\n    out.push({\n      key,\n      value: params[key]\n    });\n  }\n\n  return out;\n}, []);\n\nconst queryParametersToQueryString = params => {\n  const expandedParams = queryParametersMapToArray(params);\n  return expandedParams.map(({\n    key,\n    value\n  }) => \"\".concat(encodeURIComponent(key), \"=\").concat(encodeQueryParameter(value))).join('&');\n};\n\nconst actionPrefix = 'action::';\n\nconst isAction = resource => resource.startsWith(actionPrefix);\n\nconst makeActionPath = resource => joinPath('dhis-web-commons', \"\".concat(resource.substr(actionPrefix.length), \".action\"));\n\nexport const queryToResourcePath = (apiPath, query, type) => {\n  const {\n    resource,\n    id,\n    params = {}\n  } = query;\n  const base = isAction(resource) ? makeActionPath(resource) : joinPath(apiPath, resource, id);\n  validateResourceQuery(query, type);\n\n  if (Object.keys(params).length) {\n    return \"\".concat(base, \"?\").concat(queryParametersToQueryString(params));\n  }\n\n  return base;\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/app-service-data/build/es/links/RestAPILink/queryToResourcePath.js"],"names":["joinPath","validateResourceQuery","encodeQueryParameter","param","Array","isArray","map","join","encodeURIComponent","String","Error","queryParametersMapToArray","params","Object","keys","reduce","out","key","value","forEach","item","push","undefined","queryParametersToQueryString","expandedParams","concat","actionPrefix","isAction","resource","startsWith","makeActionPath","substr","length","queryToResourcePath","apiPath","query","type","id","base"],"mappings":"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","sourcesContent":["import { joinPath } from './path';\nimport { validateResourceQuery } from './validateQuery';\n\nconst encodeQueryParameter = param => {\n  if (Array.isArray(param)) {\n    return param.map(encodeQueryParameter).join(',');\n  }\n\n  if (typeof param === 'string') {\n    return encodeURIComponent(param);\n  }\n\n  if (typeof param === 'number' || typeof param === 'boolean') {\n    return String(param);\n  }\n\n  if (typeof param === 'object') {\n    throw new Error('Object parameter mappings not yet implemented');\n  }\n\n  throw new Error('Unknown parameter type');\n};\n\nconst queryParametersMapToArray = params => Object.keys(params).reduce((out, key) => {\n  const value = params[key];\n\n  if (key === 'filter' && Array.isArray(value)) {\n    value.forEach(item => {\n      out.push({\n        key: 'filter',\n        value: item\n      });\n    });\n  } else if (params[key] !== null && params[key] !== undefined) {\n    out.push({\n      key,\n      value: params[key]\n    });\n  }\n\n  return out;\n}, []);\n\nconst queryParametersToQueryString = params => {\n  const expandedParams = queryParametersMapToArray(params);\n  return expandedParams.map(({\n    key,\n    value\n  }) => \"\".concat(encodeURIComponent(key), \"=\").concat(encodeQueryParameter(value))).join('&');\n};\n\nconst actionPrefix = 'action::';\n\nconst isAction = resource => resource.startsWith(actionPrefix);\n\nconst makeActionPath = resource => joinPath('dhis-web-commons', \"\".concat(resource.substr(actionPrefix.length), \".action\"));\n\nexport const queryToResourcePath = (apiPath, query, type) => {\n  const {\n    resource,\n    id,\n    params = {}\n  } = query;\n  const base = isAction(resource) ? makeActionPath(resource) : joinPath(apiPath, resource, id);\n  validateResourceQuery(query, type);\n\n  if (Object.keys(params).length) {\n    return \"\".concat(base, \"?\").concat(queryParametersToQueryString(params));\n  }\n\n  return base;\n};"]},"metadata":{},"sourceType":"module"}