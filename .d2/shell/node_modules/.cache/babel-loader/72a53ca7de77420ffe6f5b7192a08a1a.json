{"ast":null,"code":"import { InvalidQueryError } from '../types/InvalidQueryError';\nconst validQueryKeys = ['resource', 'id', 'params', 'data'];\nconst validTypes = ['read', 'create', 'update', 'replace', 'delete'];\nexport const getResourceQueryErrors = (type, query) => {\n  if (!validTypes.includes(type)) {\n    return [\"Unknown query or mutation type \".concat(type)];\n  }\n\n  if (typeof query !== 'object') {\n    return ['A query or mutation must be a javascript object'];\n  }\n\n  const errors = [];\n\n  if (!query.resource || typeof query.resource !== 'string') {\n    errors.push('Property resource must be a string');\n  }\n\n  if (type === 'create' && query.id) {\n    errors.push(\"Mutation type 'create' does not support property 'id'\");\n  }\n\n  if (query.id && typeof query.id !== 'string') {\n    errors.push('Property id must be a string');\n  }\n\n  if (query.params && typeof query.params !== 'object') {\n    errors.push('Property params must be an object');\n  }\n\n  if (type === 'delete' && query.data) {\n    errors.push(\"Mutation type 'delete' does not support property 'data'\");\n  }\n\n  const invalidKeys = Object.keys(query).filter(k => !validQueryKeys.includes(k));\n  invalidKeys.forEach(k => {\n    errors.push(\"Property \".concat(k, \" is not supported\"));\n  });\n  return errors;\n};\nexport const validateResourceQueries = (queries, names = []) => {\n  if (names.length !== queries.length) {\n    for (let i = names.length; i < queries.length; ++i) {\n      names.push('query#' + i);\n    }\n  }\n\n  const errors = queries.reduce((errors, query, i) => errors.concat(getResourceQueryErrors('read', query).map(e => \"[\".concat(names[i], \"] \").concat(e))), []);\n\n  if (errors.length) {\n    throw new InvalidQueryError(errors);\n  }\n};\nexport const validateResourceQuery = (type, query) => {\n  const errors = getResourceQueryErrors(type, query);\n\n  if (errors.length) {\n    throw new InvalidQueryError(errors);\n  }\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/app-service-data/build/es/engine/helpers/validate.js"],"names":["InvalidQueryError","validQueryKeys","validTypes","getResourceQueryErrors","type","query","includes","concat","errors","resource","push","id","params","data","invalidKeys","Object","keys","filter","k","forEach","validateResourceQueries","queries","names","length","i","reduce","map","e","validateResourceQuery"],"mappings":"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","sourcesContent":["import { InvalidQueryError } from '../types/InvalidQueryError';\nconst validQueryKeys = ['resource', 'id', 'params', 'data'];\nconst validTypes = ['read', 'create', 'update', 'replace', 'delete'];\nexport const getResourceQueryErrors = (type, query) => {\n  if (!validTypes.includes(type)) {\n    return [\"Unknown query or mutation type \".concat(type)];\n  }\n\n  if (typeof query !== 'object') {\n    return ['A query or mutation must be a javascript object'];\n  }\n\n  const errors = [];\n\n  if (!query.resource || typeof query.resource !== 'string') {\n    errors.push('Property resource must be a string');\n  }\n\n  if (type === 'create' && query.id) {\n    errors.push(\"Mutation type 'create' does not support property 'id'\");\n  }\n\n  if (query.id && typeof query.id !== 'string') {\n    errors.push('Property id must be a string');\n  }\n\n  if (query.params && typeof query.params !== 'object') {\n    errors.push('Property params must be an object');\n  }\n\n  if (type === 'delete' && query.data) {\n    errors.push(\"Mutation type 'delete' does not support property 'data'\");\n  }\n\n  const invalidKeys = Object.keys(query).filter(k => !validQueryKeys.includes(k));\n  invalidKeys.forEach(k => {\n    errors.push(\"Property \".concat(k, \" is not supported\"));\n  });\n  return errors;\n};\nexport const validateResourceQueries = (queries, names = []) => {\n  if (names.length !== queries.length) {\n    for (let i = names.length; i < queries.length; ++i) {\n      names.push('query#' + i);\n    }\n  }\n\n  const errors = queries.reduce((errors, query, i) => errors.concat(getResourceQueryErrors('read', query).map(e => \"[\".concat(names[i], \"] \").concat(e))), []);\n\n  if (errors.length) {\n    throw new InvalidQueryError(errors);\n  }\n};\nexport const validateResourceQuery = (type, query) => {\n  const errors = getResourceQueryErrors(type, query);\n\n  if (errors.length) {\n    throw new InvalidQueryError(errors);\n  }\n};"]},"metadata":{},"sourceType":"module"}