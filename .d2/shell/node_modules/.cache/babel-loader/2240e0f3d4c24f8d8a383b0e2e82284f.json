{"ast":null,"code":"import propTypes from '@dhis2/prop-types';\nimport React from 'react';\nimport { Chip } from '../Chip/Chip.js';\nimport { removeOption, findOptionChild } from '../Select/option-helpers.js';\n\nconst createRemoveHandler = ({\n  selected,\n  onChange,\n  value\n}) => (_, e) => {\n  const filtered = removeOption(value, selected);\n  const data = {\n    selected: filtered\n  };\n  onChange(data, e);\n};\n\nconst SelectionList = ({\n  selected,\n  onChange,\n  disabled,\n  options\n}) => /*#__PURE__*/React.createElement(React.Fragment, null, selected.map(value => {\n  const selectedOption = findOptionChild(value, options);\n\n  if (!selectedOption) {\n    const message = \"There is no option with the value: \\\"\".concat(value, \"\\\". \") + 'Make sure that all the values passed to the selected ' + 'prop match the value of an existing option.';\n    throw new Error(message);\n  } // The chip should be disabled if the option or the select are disabled\n\n\n  const isDisabled = selectedOption.props.disabled || disabled; // Create an onRemove handler, but only if it's not disabled\n\n  const onRemove = isDisabled ? undefined : createRemoveHandler({\n    selected,\n    onChange,\n    value\n  });\n  return /*#__PURE__*/React.createElement(Chip, {\n    key: value,\n    onRemove: onRemove,\n    disabled: isDisabled,\n    overflow: true,\n    dense: true\n  }, selectedOption.props.label);\n}));\n\nSelectionList.propTypes = {\n  disabled: propTypes.bool,\n  options: propTypes.node,\n  selected: propTypes.arrayOf(propTypes.string),\n  onChange: propTypes.func\n};\nexport { SelectionList };","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-core/build/es/MultiSelect/SelectionList.js"],"names":["propTypes","React","Chip","removeOption","findOptionChild","createRemoveHandler","selected","onChange","value","_","e","filtered","data","SelectionList","disabled","options","createElement","Fragment","map","selectedOption","message","concat","Error","isDisabled","props","onRemove","undefined","key","overflow","dense","label","bool","node","arrayOf","string","func"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,mBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,6BAA9C;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAC3BC,EAAAA,QAD2B;AAE3BC,EAAAA,QAF2B;AAG3BC,EAAAA;AAH2B,CAAD,KAItB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACd,QAAMC,QAAQ,GAAGR,YAAY,CAACK,KAAD,EAAQF,QAAR,CAA7B;AACA,QAAMM,IAAI,GAAG;AACXN,IAAAA,QAAQ,EAAEK;AADC,GAAb;AAGAJ,EAAAA,QAAQ,CAACK,IAAD,EAAOF,CAAP,CAAR;AACD,CAVD;;AAYA,MAAMG,aAAa,GAAG,CAAC;AACrBP,EAAAA,QADqB;AAErBC,EAAAA,QAFqB;AAGrBO,EAAAA,QAHqB;AAIrBC,EAAAA;AAJqB,CAAD,KAKhB,aAAad,KAAK,CAACe,aAAN,CAAoBf,KAAK,CAACgB,QAA1B,EAAoC,IAApC,EAA0CX,QAAQ,CAACY,GAAT,CAAaV,KAAK,IAAI;AACjF,QAAMW,cAAc,GAAGf,eAAe,CAACI,KAAD,EAAQO,OAAR,CAAtC;;AAEA,MAAI,CAACI,cAAL,EAAqB;AACnB,UAAMC,OAAO,GAAG,wCAAwCC,MAAxC,CAA+Cb,KAA/C,EAAsD,MAAtD,IAAgE,uDAAhE,GAA0H,6CAA1I;AACA,UAAM,IAAIc,KAAJ,CAAUF,OAAV,CAAN;AACD,GANgF,CAM/E;;;AAGF,QAAMG,UAAU,GAAGJ,cAAc,CAACK,KAAf,CAAqBV,QAArB,IAAiCA,QAApD,CATiF,CASnB;;AAE9D,QAAMW,QAAQ,GAAGF,UAAU,GAAGG,SAAH,GAAerB,mBAAmB,CAAC;AAC5DC,IAAAA,QAD4D;AAE5DC,IAAAA,QAF4D;AAG5DC,IAAAA;AAH4D,GAAD,CAA7D;AAKA,SAAO,aAAaP,KAAK,CAACe,aAAN,CAAoBd,IAApB,EAA0B;AAC5CyB,IAAAA,GAAG,EAAEnB,KADuC;AAE5CiB,IAAAA,QAAQ,EAAEA,QAFkC;AAG5CX,IAAAA,QAAQ,EAAES,UAHkC;AAI5CK,IAAAA,QAAQ,EAAE,IAJkC;AAK5CC,IAAAA,KAAK,EAAE;AALqC,GAA1B,EAMjBV,cAAc,CAACK,KAAf,CAAqBM,KANJ,CAApB;AAOD,CAvB4D,CAA1C,CALnB;;AA8BAjB,aAAa,CAACb,SAAd,GAA0B;AACxBc,EAAAA,QAAQ,EAAEd,SAAS,CAAC+B,IADI;AAExBhB,EAAAA,OAAO,EAAEf,SAAS,CAACgC,IAFK;AAGxB1B,EAAAA,QAAQ,EAAEN,SAAS,CAACiC,OAAV,CAAkBjC,SAAS,CAACkC,MAA5B,CAHc;AAIxB3B,EAAAA,QAAQ,EAAEP,SAAS,CAACmC;AAJI,CAA1B;AAMA,SAAStB,aAAT","sourcesContent":["import propTypes from '@dhis2/prop-types';\nimport React from 'react';\nimport { Chip } from '../Chip/Chip.js';\nimport { removeOption, findOptionChild } from '../Select/option-helpers.js';\n\nconst createRemoveHandler = ({\n  selected,\n  onChange,\n  value\n}) => (_, e) => {\n  const filtered = removeOption(value, selected);\n  const data = {\n    selected: filtered\n  };\n  onChange(data, e);\n};\n\nconst SelectionList = ({\n  selected,\n  onChange,\n  disabled,\n  options\n}) => /*#__PURE__*/React.createElement(React.Fragment, null, selected.map(value => {\n  const selectedOption = findOptionChild(value, options);\n\n  if (!selectedOption) {\n    const message = \"There is no option with the value: \\\"\".concat(value, \"\\\". \") + 'Make sure that all the values passed to the selected ' + 'prop match the value of an existing option.';\n    throw new Error(message);\n  } // The chip should be disabled if the option or the select are disabled\n\n\n  const isDisabled = selectedOption.props.disabled || disabled; // Create an onRemove handler, but only if it's not disabled\n\n  const onRemove = isDisabled ? undefined : createRemoveHandler({\n    selected,\n    onChange,\n    value\n  });\n  return /*#__PURE__*/React.createElement(Chip, {\n    key: value,\n    onRemove: onRemove,\n    disabled: isDisabled,\n    overflow: true,\n    dense: true\n  }, selectedOption.props.label);\n}));\n\nSelectionList.propTypes = {\n  disabled: propTypes.bool,\n  options: propTypes.node,\n  selected: propTypes.arrayOf(propTypes.string),\n  onChange: propTypes.func\n};\nexport { SelectionList };"]},"metadata":{},"sourceType":"module"}