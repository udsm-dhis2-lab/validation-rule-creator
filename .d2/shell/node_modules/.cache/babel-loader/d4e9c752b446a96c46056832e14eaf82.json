{"ast":null,"code":"import propTypes from 'prop-types';\nexport const conditionalFactory = (propsToPropType, isRequired) => (props, propName, componentName) => {\n  const isDefined = typeof props[propName] !== 'undefined';\n\n  if (typeof propsToPropType !== 'function') {\n    return new Error(`The \\`propsToPropType\\` argument passed to the \\`propsToPropTypeal\\` prop-validator was not a function.`);\n  }\n\n  const propType = propsToPropType(props);\n\n  if (typeof propType !== 'function') {\n    return new Error(`The response of \\`propsToPropType\\` call with the props was not a function.`);\n  } // Validation errors\n\n\n  if (isRequired && !isDefined) {\n    return new Error(`Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`, this prop is required but no value was found.`);\n  }\n\n  propTypes.checkPropTypes({\n    [propName]: propType\n  }, props, 'prop', componentName);\n  return null;\n};\n/**\n * Uses either one or another propType, based on the result of the\n * propsToPropType callback, called with the props\n *\n * @param {Function} propsToPropType - A callback for determining which propType to use\n * @param {Function} eitherPropType\n * @param {Function} orPropType\n * @return {Error|null} Returns null if all propsToPropTypes are met, or an error\n *\n * @example\n * import React from 'react'\n * import { propsToPropTypeal } from '@dhis2/prop-types'\n *\n * const List = ({ multiple, selected, items }) => (\n *     const selectedItems = multiple ? selected : [selected]\n *\n *     <div>\n *         {items.map(item => (\n *             <li className={selectedItems.includes(item) ? 'active' : ''}>\n *                 {item}\n *             </li>\n *         ))}\n *     </div>\n * )\n *\n * List.propTypes = {\n *     multiple: propTypes.bool,\n *     items: props.arrayOf(prpoTypes.string),\n *     selected: propsToPropTypeal(\n *         props => propTypes.multiple\n *           ? propTypes.arrayOf(prpoTypes.string)\n *           : propTypes.string,\n *     ),\n * }\n */\n\nexport const conditional = propsToPropType => {\n  const fn = conditionalFactory(propsToPropType, false);\n  fn.isRequired = conditionalFactory(propsToPropType, true);\n  return fn;\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/prop-types/build/es/propTypes/conditional.js"],"names":["propTypes","conditionalFactory","propsToPropType","isRequired","props","propName","componentName","isDefined","Error","propType","checkPropTypes","conditional","fn"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,eAAD,EAAkBC,UAAlB,KAAiC,CAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,KAAoC;AACrG,QAAMC,SAAS,GAAG,OAAOH,KAAK,CAACC,QAAD,CAAZ,KAA2B,WAA7C;;AAEA,MAAI,OAAOH,eAAP,KAA2B,UAA/B,EAA2C;AACzC,WAAO,IAAIM,KAAJ,CAAW,yGAAX,CAAP;AACD;;AAED,QAAMC,QAAQ,GAAGP,eAAe,CAACE,KAAD,CAAhC;;AAEA,MAAI,OAAOK,QAAP,KAAoB,UAAxB,EAAoC;AAClC,WAAO,IAAID,KAAJ,CAAW,6EAAX,CAAP;AACD,GAXoG,CAWnG;;;AAGF,MAAIL,UAAU,IAAI,CAACI,SAAnB,EAA8B;AAC5B,WAAO,IAAIC,KAAJ,CAAW,kBAAiBH,QAAS,oBAAmBC,aAAc,mDAAtE,CAAP;AACD;;AAEDN,EAAAA,SAAS,CAACU,cAAV,CAAyB;AACvB,KAACL,QAAD,GAAYI;AADW,GAAzB,EAEGL,KAFH,EAEU,MAFV,EAEkBE,aAFlB;AAGA,SAAO,IAAP;AACD,CAtBM;AAuBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMK,WAAW,GAAGT,eAAe,IAAI;AAC5C,QAAMU,EAAE,GAAGX,kBAAkB,CAACC,eAAD,EAAkB,KAAlB,CAA7B;AACAU,EAAAA,EAAE,CAACT,UAAH,GAAgBF,kBAAkB,CAACC,eAAD,EAAkB,IAAlB,CAAlC;AACA,SAAOU,EAAP;AACD,CAJM","sourcesContent":["import propTypes from 'prop-types';\nexport const conditionalFactory = (propsToPropType, isRequired) => (props, propName, componentName) => {\n  const isDefined = typeof props[propName] !== 'undefined';\n\n  if (typeof propsToPropType !== 'function') {\n    return new Error(`The \\`propsToPropType\\` argument passed to the \\`propsToPropTypeal\\` prop-validator was not a function.`);\n  }\n\n  const propType = propsToPropType(props);\n\n  if (typeof propType !== 'function') {\n    return new Error(`The response of \\`propsToPropType\\` call with the props was not a function.`);\n  } // Validation errors\n\n\n  if (isRequired && !isDefined) {\n    return new Error(`Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`, this prop is required but no value was found.`);\n  }\n\n  propTypes.checkPropTypes({\n    [propName]: propType\n  }, props, 'prop', componentName);\n  return null;\n};\n/**\n * Uses either one or another propType, based on the result of the\n * propsToPropType callback, called with the props\n *\n * @param {Function} propsToPropType - A callback for determining which propType to use\n * @param {Function} eitherPropType\n * @param {Function} orPropType\n * @return {Error|null} Returns null if all propsToPropTypes are met, or an error\n *\n * @example\n * import React from 'react'\n * import { propsToPropTypeal } from '@dhis2/prop-types'\n *\n * const List = ({ multiple, selected, items }) => (\n *     const selectedItems = multiple ? selected : [selected]\n *\n *     <div>\n *         {items.map(item => (\n *             <li className={selectedItems.includes(item) ? 'active' : ''}>\n *                 {item}\n *             </li>\n *         ))}\n *     </div>\n * )\n *\n * List.propTypes = {\n *     multiple: propTypes.bool,\n *     items: props.arrayOf(prpoTypes.string),\n *     selected: propsToPropTypeal(\n *         props => propTypes.multiple\n *           ? propTypes.arrayOf(prpoTypes.string)\n *           : propTypes.string,\n *     ),\n * }\n */\n\nexport const conditional = propsToPropType => {\n  const fn = conditionalFactory(propsToPropType, false);\n  fn.isRequired = conditionalFactory(propsToPropType, true);\n  return fn;\n};"]},"metadata":{},"sourceType":"module"}