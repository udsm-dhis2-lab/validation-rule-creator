{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport { sharedPropTypes } from '@dhis2/ui-constants';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef } from 'react';\nimport styles from './Button.styles.js';\n/**\n * @module\n * @param {Button.PropTypes} props\n *\n * @returns {React.Component}\n *\n * @example import { Button } from @dhis2/ui-core\n * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/button.md|Design system}\n * @see Live demo: {@link /demo/?path=/story/button-basic--default|Storybook}\n */\n\nexport const Button = ({\n  children,\n  className,\n  dataTest,\n  destructive,\n  disabled,\n  icon,\n  initialFocus,\n  large,\n  name,\n  primary,\n  secondary,\n  small,\n  tabIndex,\n  toggled,\n  type,\n  value,\n  onBlur,\n  onClick,\n  onFocus\n}) => {\n  const ref = useRef();\n  useEffect(() => {\n    if (initialFocus && ref.current) ref.current.focus();\n  }, [initialFocus, ref.current]);\n\n  const handleClick = event => onClick && onClick({\n    value,\n    name\n  }, event);\n\n  const handleBlur = event => onBlur && onBlur({\n    value,\n    name\n  }, event);\n\n  const handleFocus = event => onFocus && onFocus({\n    value,\n    name\n  }, event);\n\n  const iconOnly = icon && !children;\n  const buttonClassName = cx(className, {\n    primary,\n    secondary,\n    destructive,\n    small,\n    large,\n    'icon-only': iconOnly,\n    toggled\n  });\n  return /*#__PURE__*/React.createElement(\"button\", {\n    ref: ref,\n    name: name,\n    \"data-test\": dataTest,\n    disabled: disabled,\n    tabIndex: tabIndex,\n    type: type,\n    onBlur: handleBlur,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    className: \"jsx-\".concat(styles.__hash) + \" \" + (buttonClassName || \"\")\n  }, icon && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"jsx-\".concat(styles.__hash) + \" \" + \"button-icon\"\n  }, icon), children, /*#__PURE__*/React.createElement(_JSXStyle, {\n    id: styles.__hash\n  }, styles));\n};\nButton.defaultProps = {\n  type: 'button',\n  dataTest: 'dhis2-uicore-button'\n};\n/**\n * @typedef {Object} PropTypes\n * @static\n *\n * @prop {Node} [children] The children to render in the button\n * @prop {function} [onClick] The click handler\n * @prop {function} [onBlur]\n * @prop {function} [onFocus]\n *\n * @prop {string} [className]\n * @prop {string} [name]\n * @prop {string} [value]\n * @prop {string} [tabIndex]\n * @prop {boolean} [small] - `small` and `large` are mutually exclusive\n * @prop {boolean} [large]\n * @prop {string} [type=button] Type of button: `submit`, `reset`, or\n * `button`\n *\n * @prop {boolean } [primary] - `primary`, `secondary`, and\n * `destructive` are mutually exclusive boolean props\n * @prop {boolean } [secondary]\n * @prop {boolean } [destructive]\n *\n * @prop {boolean} [disabled] Disable the button\n * @prop {Element} [icon]\n *\n * @prop {string} [dataTest]\n * @prop {boolean} [initialFocus] Grants the button the initial focus\n * state\n */\n\nButton.propTypes = {\n  /** Component to render inside the button */\n  children: PropTypes.node,\n\n  /** A className that will be passed to the `<button>` element */\n  className: PropTypes.string,\n\n  /**\n   * A string that will be applied as a `data-test` attribute on the button element\n   * for identification during testing\n   */\n  dataTest: PropTypes.string,\n\n  /**\n   * Indicates that the button makes potentially dangerous\n   * deletions or data changes.\n   * Mutually exclusive with `primary` and `secondary` props\n   */\n  destructive: sharedPropTypes.buttonVariantPropType,\n\n  /** Applies a greyed-out appearance and makes the button non-interactive  */\n  disabled: PropTypes.bool,\n\n  /** An icon element to display inside the button */\n  icon: PropTypes.element,\n\n  /** Use this variant to capture the initial focus on the page. */\n  initialFocus: PropTypes.bool,\n\n  /** Makes the button large. Mutually exclusive with `small` */\n  large: sharedPropTypes.sizePropType,\n\n  /**\n   * Sets `name` attribute on button element.\n   * Gets passed as part of the first argument to callbacks (see `onClick`).\n   */\n  name: PropTypes.string,\n\n  /**\n   * Applies 'primary' button appearance.\n   * Mutually exclusive with `destructive` and `secondary` props\n   */\n  primary: sharedPropTypes.buttonVariantPropType,\n\n  /**\n   * Applies 'secondary' button appearance.\n   * Mutually exclusive with `primary` and `destructive` props\n   */\n  secondary: sharedPropTypes.buttonVariantPropType,\n\n  /** Makes the button small. Mutually exclusive with `large` prop */\n  small: sharedPropTypes.sizePropType,\n\n  /** Tab index for focusing the button with a keyboard */\n  tabIndex: PropTypes.string,\n\n  /** Changes appearance of button to an on/off state */\n  toggled: PropTypes.bool,\n\n  /** Sets `type` attribute on `<button>` element */\n  type: PropTypes.oneOf(['submit', 'reset', 'button']),\n\n  /**\n   * Value associated with the button.\n   * Gets passed as part of the first argument to callbacks (see `onClick`).\n   */\n  value: PropTypes.string,\n\n  /**\n   * Callback to trigger on de-focus (blur).\n   * Called with same args as `onClick`\n   * */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback to trigger on click.\n   * Called with args `({ value, name }, event)`\n   * */\n  onClick: PropTypes.func,\n\n  /** Callback to trigger on focus. Called with same args as `onClick` */\n  onFocus: PropTypes.func\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-core/build/es/Button/Button.js"],"names":["_JSXStyle","sharedPropTypes","cx","PropTypes","React","useEffect","useRef","styles","Button","children","className","dataTest","destructive","disabled","icon","initialFocus","large","name","primary","secondary","small","tabIndex","toggled","type","value","onBlur","onClick","onFocus","ref","current","focus","handleClick","event","handleBlur","handleFocus","iconOnly","buttonClassName","createElement","concat","__hash","id","defaultProps","propTypes","node","string","buttonVariantPropType","bool","element","sizePropType","oneOf","func"],"mappings":"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","sourcesContent":["import _JSXStyle from \"styled-jsx/style\";\nimport { sharedPropTypes } from '@dhis2/ui-constants';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef } from 'react';\nimport styles from './Button.styles.js';\n/**\n * @module\n * @param {Button.PropTypes} props\n *\n * @returns {React.Component}\n *\n * @example import { Button } from @dhis2/ui-core\n * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/button.md|Design system}\n * @see Live demo: {@link /demo/?path=/story/button-basic--default|Storybook}\n */\n\nexport const Button = ({\n  children,\n  className,\n  dataTest,\n  destructive,\n  disabled,\n  icon,\n  initialFocus,\n  large,\n  name,\n  primary,\n  secondary,\n  small,\n  tabIndex,\n  toggled,\n  type,\n  value,\n  onBlur,\n  onClick,\n  onFocus\n}) => {\n  const ref = useRef();\n  useEffect(() => {\n    if (initialFocus && ref.current) ref.current.focus();\n  }, [initialFocus, ref.current]);\n\n  const handleClick = event => onClick && onClick({\n    value,\n    name\n  }, event);\n\n  const handleBlur = event => onBlur && onBlur({\n    value,\n    name\n  }, event);\n\n  const handleFocus = event => onFocus && onFocus({\n    value,\n    name\n  }, event);\n\n  const iconOnly = icon && !children;\n  const buttonClassName = cx(className, {\n    primary,\n    secondary,\n    destructive,\n    small,\n    large,\n    'icon-only': iconOnly,\n    toggled\n  });\n  return /*#__PURE__*/React.createElement(\"button\", {\n    ref: ref,\n    name: name,\n    \"data-test\": dataTest,\n    disabled: disabled,\n    tabIndex: tabIndex,\n    type: type,\n    onBlur: handleBlur,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    className: \"jsx-\".concat(styles.__hash) + \" \" + (buttonClassName || \"\")\n  }, icon && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"jsx-\".concat(styles.__hash) + \" \" + \"button-icon\"\n  }, icon), children, /*#__PURE__*/React.createElement(_JSXStyle, {\n    id: styles.__hash\n  }, styles));\n};\nButton.defaultProps = {\n  type: 'button',\n  dataTest: 'dhis2-uicore-button'\n};\n/**\n * @typedef {Object} PropTypes\n * @static\n *\n * @prop {Node} [children] The children to render in the button\n * @prop {function} [onClick] The click handler\n * @prop {function} [onBlur]\n * @prop {function} [onFocus]\n *\n * @prop {string} [className]\n * @prop {string} [name]\n * @prop {string} [value]\n * @prop {string} [tabIndex]\n * @prop {boolean} [small] - `small` and `large` are mutually exclusive\n * @prop {boolean} [large]\n * @prop {string} [type=button] Type of button: `submit`, `reset`, or\n * `button`\n *\n * @prop {boolean } [primary] - `primary`, `secondary`, and\n * `destructive` are mutually exclusive boolean props\n * @prop {boolean } [secondary]\n * @prop {boolean } [destructive]\n *\n * @prop {boolean} [disabled] Disable the button\n * @prop {Element} [icon]\n *\n * @prop {string} [dataTest]\n * @prop {boolean} [initialFocus] Grants the button the initial focus\n * state\n */\n\nButton.propTypes = {\n  /** Component to render inside the button */\n  children: PropTypes.node,\n\n  /** A className that will be passed to the `<button>` element */\n  className: PropTypes.string,\n\n  /**\n   * A string that will be applied as a `data-test` attribute on the button element\n   * for identification during testing\n   */\n  dataTest: PropTypes.string,\n\n  /**\n   * Indicates that the button makes potentially dangerous\n   * deletions or data changes.\n   * Mutually exclusive with `primary` and `secondary` props\n   */\n  destructive: sharedPropTypes.buttonVariantPropType,\n\n  /** Applies a greyed-out appearance and makes the button non-interactive  */\n  disabled: PropTypes.bool,\n\n  /** An icon element to display inside the button */\n  icon: PropTypes.element,\n\n  /** Use this variant to capture the initial focus on the page. */\n  initialFocus: PropTypes.bool,\n\n  /** Makes the button large. Mutually exclusive with `small` */\n  large: sharedPropTypes.sizePropType,\n\n  /**\n   * Sets `name` attribute on button element.\n   * Gets passed as part of the first argument to callbacks (see `onClick`).\n   */\n  name: PropTypes.string,\n\n  /**\n   * Applies 'primary' button appearance.\n   * Mutually exclusive with `destructive` and `secondary` props\n   */\n  primary: sharedPropTypes.buttonVariantPropType,\n\n  /**\n   * Applies 'secondary' button appearance.\n   * Mutually exclusive with `primary` and `destructive` props\n   */\n  secondary: sharedPropTypes.buttonVariantPropType,\n\n  /** Makes the button small. Mutually exclusive with `large` prop */\n  small: sharedPropTypes.sizePropType,\n\n  /** Tab index for focusing the button with a keyboard */\n  tabIndex: PropTypes.string,\n\n  /** Changes appearance of button to an on/off state */\n  toggled: PropTypes.bool,\n\n  /** Sets `type` attribute on `<button>` element */\n  type: PropTypes.oneOf(['submit', 'reset', 'button']),\n\n  /**\n   * Value associated with the button.\n   * Gets passed as part of the first argument to callbacks (see `onClick`).\n   */\n  value: PropTypes.string,\n\n  /**\n   * Callback to trigger on de-focus (blur).\n   * Called with same args as `onClick`\n   * */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback to trigger on click.\n   * Called with args `({ value, name }, event)`\n   * */\n  onClick: PropTypes.func,\n\n  /** Callback to trigger on focus. Called with same args as `onClick` */\n  onFocus: PropTypes.func\n};"]},"metadata":{},"sourceType":"module"}