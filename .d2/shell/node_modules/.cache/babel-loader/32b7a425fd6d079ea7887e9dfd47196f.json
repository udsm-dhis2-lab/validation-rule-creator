{"ast":null,"code":"import { findOptionIndex } from '../../common/index.js';\n/**\n * @param {Object} args\n * @param {number} args.maxSelections\n * @param {string[]} args.highlightedOptions\n * @param {Object[]} args.options\n * @param {Object} args.option\n * @param {string} args.lastClicked\n * @param {Function} args.setHighlightedOption\n * @returns {void}\n */\n\nexport const toggleRange = ({\n  highlightedOptions,\n  options,\n  option,\n  setHighlightedOptions,\n  lastClicked,\n  maxSelections\n}) => {\n  if (highlightedOptions.length === 0) {\n    setHighlightedOptions([option.value]);\n  } else {\n    let from, to;\n    const clickedOptionIndex = findOptionIndex(options, option);\n    const lastClickedSourceOptionWithoutRangeModeIndex = lastClicked ? options.findIndex(curOption => curOption.value === lastClicked) : -1;\n\n    if (lastClickedSourceOptionWithoutRangeModeIndex !== -1) {\n      from = lastClickedSourceOptionWithoutRangeModeIndex;\n      to = clickedOptionIndex;\n    } else {\n      /**\n       * A filter-change has removed the most recently highlighted option\n       */\n      const firstHighlightedInList = options.findIndex(option => highlightedOptions.find(highlightedOption => highlightedOption === option.value));\n      from = firstHighlightedInList;\n      to = clickedOptionIndex;\n    } // this is so we can also selected\n    // a range of options above \"from\" option.\n    // -> Just how slice works ;)\n\n\n    const lower = Math.min(from, to);\n    const higher = Math.max(from, to);\n    const newHighlightedSourceOptions = options.slice(lower, higher + 1).filter(option => !option.disabled).slice(maxSelections * -1).map(({\n      value\n    }) => value);\n    setHighlightedOptions(newHighlightedSourceOptions);\n  }\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-widgets/build/es/Transfer/Transfer/useHighlightedOptions/toggleRange.js"],"names":["findOptionIndex","toggleRange","highlightedOptions","options","option","setHighlightedOptions","lastClicked","maxSelections","length","value","from","to","clickedOptionIndex","lastClickedSourceOptionWithoutRangeModeIndex","findIndex","curOption","firstHighlightedInList","find","highlightedOption","lower","Math","min","higher","max","newHighlightedSourceOptions","slice","filter","disabled","map"],"mappings":"AAAA,SAASA,eAAT,QAAgC,uBAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAC1BC,EAAAA,kBAD0B;AAE1BC,EAAAA,OAF0B;AAG1BC,EAAAA,MAH0B;AAI1BC,EAAAA,qBAJ0B;AAK1BC,EAAAA,WAL0B;AAM1BC,EAAAA;AAN0B,CAAD,KAOrB;AACJ,MAAIL,kBAAkB,CAACM,MAAnB,KAA8B,CAAlC,EAAqC;AACnCH,IAAAA,qBAAqB,CAAC,CAACD,MAAM,CAACK,KAAR,CAAD,CAArB;AACD,GAFD,MAEO;AACL,QAAIC,IAAJ,EAAUC,EAAV;AACA,UAAMC,kBAAkB,GAAGZ,eAAe,CAACG,OAAD,EAAUC,MAAV,CAA1C;AACA,UAAMS,4CAA4C,GAAGP,WAAW,GAAGH,OAAO,CAACW,SAAR,CAAkBC,SAAS,IAAIA,SAAS,CAACN,KAAV,KAAoBH,WAAnD,CAAH,GAAqE,CAAC,CAAtI;;AAEA,QAAIO,4CAA4C,KAAK,CAAC,CAAtD,EAAyD;AACvDH,MAAAA,IAAI,GAAGG,4CAAP;AACAF,MAAAA,EAAE,GAAGC,kBAAL;AACD,KAHD,MAGO;AACL;AACN;AACA;AACM,YAAMI,sBAAsB,GAAGb,OAAO,CAACW,SAAR,CAAkBV,MAAM,IAAIF,kBAAkB,CAACe,IAAnB,CAAwBC,iBAAiB,IAAIA,iBAAiB,KAAKd,MAAM,CAACK,KAA1E,CAA5B,CAA/B;AACAC,MAAAA,IAAI,GAAGM,sBAAP;AACAL,MAAAA,EAAE,GAAGC,kBAAL;AACD,KAfI,CAeH;AACF;AACA;;;AAGA,UAAMO,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASX,IAAT,EAAeC,EAAf,CAAd;AACA,UAAMW,MAAM,GAAGF,IAAI,CAACG,GAAL,CAASb,IAAT,EAAeC,EAAf,CAAf;AACA,UAAMa,2BAA2B,GAAGrB,OAAO,CAACsB,KAAR,CAAcN,KAAd,EAAqBG,MAAM,GAAG,CAA9B,EAAiCI,MAAjC,CAAwCtB,MAAM,IAAI,CAACA,MAAM,CAACuB,QAA1D,EAAoEF,KAApE,CAA0ElB,aAAa,GAAG,CAAC,CAA3F,EAA8FqB,GAA9F,CAAkG,CAAC;AACrInB,MAAAA;AADqI,KAAD,KAEhIA,KAF8B,CAApC;AAGAJ,IAAAA,qBAAqB,CAACmB,2BAAD,CAArB;AACD;AACF,CArCM","sourcesContent":["import { findOptionIndex } from '../../common/index.js';\n/**\n * @param {Object} args\n * @param {number} args.maxSelections\n * @param {string[]} args.highlightedOptions\n * @param {Object[]} args.options\n * @param {Object} args.option\n * @param {string} args.lastClicked\n * @param {Function} args.setHighlightedOption\n * @returns {void}\n */\n\nexport const toggleRange = ({\n  highlightedOptions,\n  options,\n  option,\n  setHighlightedOptions,\n  lastClicked,\n  maxSelections\n}) => {\n  if (highlightedOptions.length === 0) {\n    setHighlightedOptions([option.value]);\n  } else {\n    let from, to;\n    const clickedOptionIndex = findOptionIndex(options, option);\n    const lastClickedSourceOptionWithoutRangeModeIndex = lastClicked ? options.findIndex(curOption => curOption.value === lastClicked) : -1;\n\n    if (lastClickedSourceOptionWithoutRangeModeIndex !== -1) {\n      from = lastClickedSourceOptionWithoutRangeModeIndex;\n      to = clickedOptionIndex;\n    } else {\n      /**\n       * A filter-change has removed the most recently highlighted option\n       */\n      const firstHighlightedInList = options.findIndex(option => highlightedOptions.find(highlightedOption => highlightedOption === option.value));\n      from = firstHighlightedInList;\n      to = clickedOptionIndex;\n    } // this is so we can also selected\n    // a range of options above \"from\" option.\n    // -> Just how slice works ;)\n\n\n    const lower = Math.min(from, to);\n    const higher = Math.max(from, to);\n    const newHighlightedSourceOptions = options.slice(lower, higher + 1).filter(option => !option.disabled).slice(maxSelections * -1).map(({\n      value\n    }) => value);\n    setHighlightedOptions(newHighlightedSourceOptions);\n  }\n};"]},"metadata":{},"sourceType":"module"}