{"ast":null,"code":"import i18n from '../locales/index.js';\nimport { isEmpty, isString } from './helpers/index.js';\nconst LOWER_CASE_PATTERN = /^(?=.*[a-z]).+$/;\nconst UPPER_CASE_PATTERN = /^(?=.*[A-Z]).+$/;\nconst DIGIT_PATTERN = /^(?=.*[0-9]).+$/; // Using this regex to match all non-alphanumeric characters to match server-side implementation\n// https://github.com/dhis2/dhis2-core/blob/master/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/SpecialCharacterValidationRule.java#L39\n\nconst SPECIAL_CHARACTER_PATTERN = /[^a-zA-Z0-9]/;\nconst notString = i18n.t('Password should be a string');\nconst tooShort = i18n.t('Password should be at least 8 characters long');\nconst tooLong = i18n.t('Password should be no longer than 34 characters');\nconst noLowerCase = i18n.t('Password should contain at least one lowercase letter');\nconst noUpperCase = i18n.t('Password should contain at least one UPPERCASE letter');\nconst noNumber = i18n.t('Password should contain at least one number');\nconst noSpecialCharacter = i18n.t('Password should have at least one special character');\n/**\n * Tests if a given password is compliant with the password restrictions.\n * This function checks all restrictions below, but returns when the first violation was found:\n * - At least 8 characters\n * - No more than 34 characters\n * - Contains at least 1 lowercase character\n * - Contains at least 1 UPPERCASE character\n * - Contains at least 1 number\n * - Contains at least 1 special character\n */\n\nconst dhis2Password = value => {\n  if (isEmpty(value)) {\n    return undefined;\n  }\n\n  if (!isString(value)) {\n    return notString;\n  }\n\n  if (value.length < 8) {\n    return tooShort;\n  }\n\n  if (value.length > 35) {\n    return tooLong;\n  }\n\n  if (!LOWER_CASE_PATTERN.test(value)) {\n    return noLowerCase;\n  }\n\n  if (!UPPER_CASE_PATTERN.test(value)) {\n    return noUpperCase;\n  }\n\n  if (!DIGIT_PATTERN.test(value)) {\n    return noNumber;\n  }\n\n  if (!SPECIAL_CHARACTER_PATTERN.test(value)) {\n    return noSpecialCharacter;\n  }\n\n  return undefined;\n};\n\nconst errorMessages = {\n  notString,\n  tooShort,\n  tooLong,\n  noLowerCase,\n  noUpperCase,\n  noNumber,\n  noSpecialCharacter\n};\nexport { dhis2Password, errorMessages };","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-forms/build/es/validators/dhis2Password.js"],"names":["i18n","isEmpty","isString","LOWER_CASE_PATTERN","UPPER_CASE_PATTERN","DIGIT_PATTERN","SPECIAL_CHARACTER_PATTERN","notString","t","tooShort","tooLong","noLowerCase","noUpperCase","noNumber","noSpecialCharacter","dhis2Password","value","undefined","length","test","errorMessages"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,qBAAjB;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,oBAAlC;AACA,MAAMC,kBAAkB,GAAG,iBAA3B;AACA,MAAMC,kBAAkB,GAAG,iBAA3B;AACA,MAAMC,aAAa,GAAG,iBAAtB,C,CAAyC;AACzC;;AAEA,MAAMC,yBAAyB,GAAG,cAAlC;AACA,MAAMC,SAAS,GAAGP,IAAI,CAACQ,CAAL,CAAO,6BAAP,CAAlB;AACA,MAAMC,QAAQ,GAAGT,IAAI,CAACQ,CAAL,CAAO,+CAAP,CAAjB;AACA,MAAME,OAAO,GAAGV,IAAI,CAACQ,CAAL,CAAO,iDAAP,CAAhB;AACA,MAAMG,WAAW,GAAGX,IAAI,CAACQ,CAAL,CAAO,uDAAP,CAApB;AACA,MAAMI,WAAW,GAAGZ,IAAI,CAACQ,CAAL,CAAO,uDAAP,CAApB;AACA,MAAMK,QAAQ,GAAGb,IAAI,CAACQ,CAAL,CAAO,6CAAP,CAAjB;AACA,MAAMM,kBAAkB,GAAGd,IAAI,CAACQ,CAAL,CAAO,qDAAP,CAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMO,aAAa,GAAGC,KAAK,IAAI;AAC7B,MAAIf,OAAO,CAACe,KAAD,CAAX,EAAoB;AAClB,WAAOC,SAAP;AACD;;AAED,MAAI,CAACf,QAAQ,CAACc,KAAD,CAAb,EAAsB;AACpB,WAAOT,SAAP;AACD;;AAED,MAAIS,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAsB;AACpB,WAAOT,QAAP;AACD;;AAED,MAAIO,KAAK,CAACE,MAAN,GAAe,EAAnB,EAAuB;AACrB,WAAOR,OAAP;AACD;;AAED,MAAI,CAACP,kBAAkB,CAACgB,IAAnB,CAAwBH,KAAxB,CAAL,EAAqC;AACnC,WAAOL,WAAP;AACD;;AAED,MAAI,CAACP,kBAAkB,CAACe,IAAnB,CAAwBH,KAAxB,CAAL,EAAqC;AACnC,WAAOJ,WAAP;AACD;;AAED,MAAI,CAACP,aAAa,CAACc,IAAd,CAAmBH,KAAnB,CAAL,EAAgC;AAC9B,WAAOH,QAAP;AACD;;AAED,MAAI,CAACP,yBAAyB,CAACa,IAA1B,CAA+BH,KAA/B,CAAL,EAA4C;AAC1C,WAAOF,kBAAP;AACD;;AAED,SAAOG,SAAP;AACD,CAlCD;;AAoCA,MAAMG,aAAa,GAAG;AACpBb,EAAAA,SADoB;AAEpBE,EAAAA,QAFoB;AAGpBC,EAAAA,OAHoB;AAIpBC,EAAAA,WAJoB;AAKpBC,EAAAA,WALoB;AAMpBC,EAAAA,QANoB;AAOpBC,EAAAA;AAPoB,CAAtB;AASA,SAASC,aAAT,EAAwBK,aAAxB","sourcesContent":["import i18n from '../locales/index.js';\nimport { isEmpty, isString } from './helpers/index.js';\nconst LOWER_CASE_PATTERN = /^(?=.*[a-z]).+$/;\nconst UPPER_CASE_PATTERN = /^(?=.*[A-Z]).+$/;\nconst DIGIT_PATTERN = /^(?=.*[0-9]).+$/; // Using this regex to match all non-alphanumeric characters to match server-side implementation\n// https://github.com/dhis2/dhis2-core/blob/master/dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/user/SpecialCharacterValidationRule.java#L39\n\nconst SPECIAL_CHARACTER_PATTERN = /[^a-zA-Z0-9]/;\nconst notString = i18n.t('Password should be a string');\nconst tooShort = i18n.t('Password should be at least 8 characters long');\nconst tooLong = i18n.t('Password should be no longer than 34 characters');\nconst noLowerCase = i18n.t('Password should contain at least one lowercase letter');\nconst noUpperCase = i18n.t('Password should contain at least one UPPERCASE letter');\nconst noNumber = i18n.t('Password should contain at least one number');\nconst noSpecialCharacter = i18n.t('Password should have at least one special character');\n/**\n * Tests if a given password is compliant with the password restrictions.\n * This function checks all restrictions below, but returns when the first violation was found:\n * - At least 8 characters\n * - No more than 34 characters\n * - Contains at least 1 lowercase character\n * - Contains at least 1 UPPERCASE character\n * - Contains at least 1 number\n * - Contains at least 1 special character\n */\n\nconst dhis2Password = value => {\n  if (isEmpty(value)) {\n    return undefined;\n  }\n\n  if (!isString(value)) {\n    return notString;\n  }\n\n  if (value.length < 8) {\n    return tooShort;\n  }\n\n  if (value.length > 35) {\n    return tooLong;\n  }\n\n  if (!LOWER_CASE_PATTERN.test(value)) {\n    return noLowerCase;\n  }\n\n  if (!UPPER_CASE_PATTERN.test(value)) {\n    return noUpperCase;\n  }\n\n  if (!DIGIT_PATTERN.test(value)) {\n    return noNumber;\n  }\n\n  if (!SPECIAL_CHARACTER_PATTERN.test(value)) {\n    return noSpecialCharacter;\n  }\n\n  return undefined;\n};\n\nconst errorMessages = {\n  notString,\n  tooShort,\n  tooLong,\n  noLowerCase,\n  noUpperCase,\n  noNumber,\n  noSpecialCharacter\n};\nexport { dhis2Password, errorMessages };"]},"metadata":{},"sourceType":"module"}