{"ast":null,"code":"import { Provider } from '@dhis2/app-runtime';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { get } from '../utils/api';\nimport { parseServerVersion } from '../utils/parseServerVersion';\nimport { LoadingMask } from './LoadingMask';\nexport const ServerVersionProvider = ({\n  url,\n  apiVersion,\n  children\n}) => {\n  const [{\n    loading,\n    error,\n    systemInfo\n  }, setState] = useState({\n    loading: true\n  });\n  useEffect(() => {\n    setState(state => state.loading ? state : {\n      loading: true\n    });\n    const request = get(\"\".concat(url, \"/api/system/info\"));\n    request.then(systemInfo => {\n      setState({\n        loading: false,\n        systemInfo\n      });\n    }).catch(e => {\n      setState({\n        loading: false,\n        error: e\n      });\n    });\n    return () => {\n      request.abort();\n    };\n  }, [url]);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(LoadingMask, null);\n  }\n\n  if (error) {\n    return children;\n  }\n\n  const serverVersion = parseServerVersion(systemInfo.version);\n  const realApiVersion = serverVersion.minor;\n  return /*#__PURE__*/React.createElement(Provider, {\n    config: {\n      baseUrl: url,\n      apiVersion: apiVersion || realApiVersion,\n      serverVersion,\n      systemInfo\n    }\n  }, children);\n};\nServerVersionProvider.propTypes = {\n  url: PropTypes.string.isRequired,\n  apiVersion: PropTypes.number,\n  children: PropTypes.element\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/app-shell/node_modules/@dhis2/app-adapter/build/es/components/ServerVersionProvider.js"],"names":["Provider","PropTypes","React","useEffect","useState","get","parseServerVersion","LoadingMask","ServerVersionProvider","url","apiVersion","children","loading","error","systemInfo","setState","state","request","concat","then","catch","e","abort","createElement","serverVersion","version","realApiVersion","minor","config","baseUrl","propTypes","string","isRequired","number","element"],"mappings":"AAAA,SAASA,QAAT,QAAyB,oBAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAO,MAAMC,qBAAqB,GAAG,CAAC;AACpCC,EAAAA,GADoC;AAEpCC,EAAAA,UAFoC;AAGpCC,EAAAA;AAHoC,CAAD,KAI/B;AACJ,QAAM,CAAC;AACLC,IAAAA,OADK;AAELC,IAAAA,KAFK;AAGLC,IAAAA;AAHK,GAAD,EAIHC,QAJG,IAISX,QAAQ,CAAC;AACtBQ,IAAAA,OAAO,EAAE;AADa,GAAD,CAJvB;AAOAT,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,QAAQ,CAACC,KAAK,IAAIA,KAAK,CAACJ,OAAN,GAAgBI,KAAhB,GAAwB;AACxCJ,MAAAA,OAAO,EAAE;AAD+B,KAAlC,CAAR;AAGA,UAAMK,OAAO,GAAGZ,GAAG,CAAC,GAAGa,MAAH,CAAUT,GAAV,EAAe,kBAAf,CAAD,CAAnB;AACAQ,IAAAA,OAAO,CAACE,IAAR,CAAaL,UAAU,IAAI;AACzBC,MAAAA,QAAQ,CAAC;AACPH,QAAAA,OAAO,EAAE,KADF;AAEPE,QAAAA;AAFO,OAAD,CAAR;AAID,KALD,EAKGM,KALH,CAKSC,CAAC,IAAI;AACZN,MAAAA,QAAQ,CAAC;AACPH,QAAAA,OAAO,EAAE,KADF;AAEPC,QAAAA,KAAK,EAAEQ;AAFA,OAAD,CAAR;AAID,KAVD;AAWA,WAAO,MAAM;AACXJ,MAAAA,OAAO,CAACK,KAAR;AACD,KAFD;AAGD,GAnBQ,EAmBN,CAACb,GAAD,CAnBM,CAAT;;AAqBA,MAAIG,OAAJ,EAAa;AACX,WAAO,aAAaV,KAAK,CAACqB,aAAN,CAAoBhB,WAApB,EAAiC,IAAjC,CAApB;AACD;;AAED,MAAIM,KAAJ,EAAW;AACT,WAAOF,QAAP;AACD;;AAED,QAAMa,aAAa,GAAGlB,kBAAkB,CAACQ,UAAU,CAACW,OAAZ,CAAxC;AACA,QAAMC,cAAc,GAAGF,aAAa,CAACG,KAArC;AACA,SAAO,aAAazB,KAAK,CAACqB,aAAN,CAAoBvB,QAApB,EAA8B;AAChD4B,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAEpB,GADH;AAENC,MAAAA,UAAU,EAAEA,UAAU,IAAIgB,cAFpB;AAGNF,MAAAA,aAHM;AAINV,MAAAA;AAJM;AADwC,GAA9B,EAOjBH,QAPiB,CAApB;AAQD,CAnDM;AAoDPH,qBAAqB,CAACsB,SAAtB,GAAkC;AAChCrB,EAAAA,GAAG,EAAER,SAAS,CAAC8B,MAAV,CAAiBC,UADU;AAEhCtB,EAAAA,UAAU,EAAET,SAAS,CAACgC,MAFU;AAGhCtB,EAAAA,QAAQ,EAAEV,SAAS,CAACiC;AAHY,CAAlC","sourcesContent":["import { Provider } from '@dhis2/app-runtime';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { get } from '../utils/api';\nimport { parseServerVersion } from '../utils/parseServerVersion';\nimport { LoadingMask } from './LoadingMask';\nexport const ServerVersionProvider = ({\n  url,\n  apiVersion,\n  children\n}) => {\n  const [{\n    loading,\n    error,\n    systemInfo\n  }, setState] = useState({\n    loading: true\n  });\n  useEffect(() => {\n    setState(state => state.loading ? state : {\n      loading: true\n    });\n    const request = get(\"\".concat(url, \"/api/system/info\"));\n    request.then(systemInfo => {\n      setState({\n        loading: false,\n        systemInfo\n      });\n    }).catch(e => {\n      setState({\n        loading: false,\n        error: e\n      });\n    });\n    return () => {\n      request.abort();\n    };\n  }, [url]);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(LoadingMask, null);\n  }\n\n  if (error) {\n    return children;\n  }\n\n  const serverVersion = parseServerVersion(systemInfo.version);\n  const realApiVersion = serverVersion.minor;\n  return /*#__PURE__*/React.createElement(Provider, {\n    config: {\n      baseUrl: url,\n      apiVersion: apiVersion || realApiVersion,\n      serverVersion,\n      systemInfo\n    }\n  }, children);\n};\nServerVersionProvider.propTypes = {\n  url: PropTypes.string.isRequired,\n  apiVersion: PropTypes.number,\n  children: PropTypes.element\n};"]},"metadata":{},"sourceType":"module"}