{"ast":null,"code":"import { fromEntries } from '../fromEntries';\nconst withChildrenFields = 'children[path,displayName,id],displayName,path,id';\nconst withoutChildrenFields = 'displayName,path,id';\nexport const createOrgUnitQuery = id => ({\n  resource: \"organisationUnits/\".concat(id),\n  params: ({\n    withChildren,\n    isUserDataViewFallback\n  }) => ({\n    isUserDataViewFallback,\n    fields: withChildren ? withChildrenFields : withoutChildrenFields,\n    paging: false\n  })\n});\nexport const createQuery = ids => ids.reduce((query, id) => ({ ...query,\n  [id]: createOrgUnitQuery(id)\n}), {});\n/**\n * @param {Object[]} nodes\n * @returns {}\n */\n\nexport const addMissingDisplayNameProps = nodes => {\n  const nodeEntries = Object.entries(nodes);\n  const nodesWithDisplayName = nodeEntries.map(([id, node]) => {\n    const displayName = node.displayName || '';\n    return [id, { ...node,\n      displayName\n    }];\n  });\n  return fromEntries(nodesWithDisplayName);\n};\nexport const sortNodeChildrenAlphabetically = node => {\n  if (!node.children) return node;\n  const sortedChildren = [...node.children];\n  sortedChildren.sort((left, right) => {\n    if (left.displayName === right.displayName) return 0;\n    return left.displayName > right.displayName ? 1 : -1;\n  });\n  return { ...node,\n    children: sortedChildren\n  };\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-widgets/build/es/OrganisationUnitTree/useOrgData/helpers.js"],"names":["fromEntries","withChildrenFields","withoutChildrenFields","createOrgUnitQuery","id","resource","concat","params","withChildren","isUserDataViewFallback","fields","paging","createQuery","ids","reduce","query","addMissingDisplayNameProps","nodes","nodeEntries","Object","entries","nodesWithDisplayName","map","node","displayName","sortNodeChildrenAlphabetically","children","sortedChildren","sort","left","right"],"mappings":"AAAA,SAASA,WAAT,QAA4B,gBAA5B;AACA,MAAMC,kBAAkB,GAAG,mDAA3B;AACA,MAAMC,qBAAqB,GAAG,qBAA9B;AACA,OAAO,MAAMC,kBAAkB,GAAGC,EAAE,KAAK;AACvCC,EAAAA,QAAQ,EAAE,qBAAqBC,MAArB,CAA4BF,EAA5B,CAD6B;AAEvCG,EAAAA,MAAM,EAAE,CAAC;AACPC,IAAAA,YADO;AAEPC,IAAAA;AAFO,GAAD,MAGD;AACLA,IAAAA,sBADK;AAELC,IAAAA,MAAM,EAAEF,YAAY,GAAGP,kBAAH,GAAwBC,qBAFvC;AAGLS,IAAAA,MAAM,EAAE;AAHH,GAHC;AAF+B,CAAL,CAA7B;AAWP,OAAO,MAAMC,WAAW,GAAGC,GAAG,IAAIA,GAAG,CAACC,MAAJ,CAAW,CAACC,KAAD,EAAQX,EAAR,MAAgB,EAAE,GAAGW,KAAL;AAC3D,GAACX,EAAD,GAAMD,kBAAkB,CAACC,EAAD;AADmC,CAAhB,CAAX,EAE9B,EAF8B,CAA3B;AAGP;AACA;AACA;AACA;;AAEA,OAAO,MAAMY,0BAA0B,GAAGC,KAAK,IAAI;AACjD,QAAMC,WAAW,GAAGC,MAAM,CAACC,OAAP,CAAeH,KAAf,CAApB;AACA,QAAMI,oBAAoB,GAAGH,WAAW,CAACI,GAAZ,CAAgB,CAAC,CAAClB,EAAD,EAAKmB,IAAL,CAAD,KAAgB;AAC3D,UAAMC,WAAW,GAAGD,IAAI,CAACC,WAAL,IAAoB,EAAxC;AACA,WAAO,CAACpB,EAAD,EAAK,EAAE,GAAGmB,IAAL;AACVC,MAAAA;AADU,KAAL,CAAP;AAGD,GAL4B,CAA7B;AAMA,SAAOxB,WAAW,CAACqB,oBAAD,CAAlB;AACD,CATM;AAUP,OAAO,MAAMI,8BAA8B,GAAGF,IAAI,IAAI;AACpD,MAAI,CAACA,IAAI,CAACG,QAAV,EAAoB,OAAOH,IAAP;AACpB,QAAMI,cAAc,GAAG,CAAC,GAAGJ,IAAI,CAACG,QAAT,CAAvB;AACAC,EAAAA,cAAc,CAACC,IAAf,CAAoB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACnC,QAAID,IAAI,CAACL,WAAL,KAAqBM,KAAK,CAACN,WAA/B,EAA4C,OAAO,CAAP;AAC5C,WAAOK,IAAI,CAACL,WAAL,GAAmBM,KAAK,CAACN,WAAzB,GAAuC,CAAvC,GAA2C,CAAC,CAAnD;AACD,GAHD;AAIA,SAAO,EAAE,GAAGD,IAAL;AACLG,IAAAA,QAAQ,EAAEC;AADL,GAAP;AAGD,CAVM","sourcesContent":["import { fromEntries } from '../fromEntries';\nconst withChildrenFields = 'children[path,displayName,id],displayName,path,id';\nconst withoutChildrenFields = 'displayName,path,id';\nexport const createOrgUnitQuery = id => ({\n  resource: \"organisationUnits/\".concat(id),\n  params: ({\n    withChildren,\n    isUserDataViewFallback\n  }) => ({\n    isUserDataViewFallback,\n    fields: withChildren ? withChildrenFields : withoutChildrenFields,\n    paging: false\n  })\n});\nexport const createQuery = ids => ids.reduce((query, id) => ({ ...query,\n  [id]: createOrgUnitQuery(id)\n}), {});\n/**\n * @param {Object[]} nodes\n * @returns {}\n */\n\nexport const addMissingDisplayNameProps = nodes => {\n  const nodeEntries = Object.entries(nodes);\n  const nodesWithDisplayName = nodeEntries.map(([id, node]) => {\n    const displayName = node.displayName || '';\n    return [id, { ...node,\n      displayName\n    }];\n  });\n  return fromEntries(nodesWithDisplayName);\n};\nexport const sortNodeChildrenAlphabetically = node => {\n  if (!node.children) return node;\n  const sortedChildren = [...node.children];\n  sortedChildren.sort((left, right) => {\n    if (left.displayName === right.displayName) return 0;\n    return left.displayName > right.displayName ? 1 : -1;\n  });\n  return { ...node,\n    children: sortedChildren\n  };\n};"]},"metadata":{},"sourceType":"module"}