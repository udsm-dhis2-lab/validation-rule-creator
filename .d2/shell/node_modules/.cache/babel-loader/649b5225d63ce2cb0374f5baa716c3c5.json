{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport * as theme from '@dhis2/ui-constants';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst toPrefixedThemeSection = themeSectionKey => Object.entries(theme[themeSectionKey]).reduce((prefixed, [key, value]) => {\n  prefixed[\"\".concat(themeSectionKey, \"-\").concat(key)] = value;\n  return prefixed;\n}, {});\n\nconst toCustomPropertyString = themeSection => Object.entries(themeSection).map(([key, value]) => \"--\".concat(key, \": \").concat(value, \";\")).join('\\n');\n/**\n * @module\n * @description Injects our theme variables as CSS custom properties\n * @param {CssVariables.PropTypes} props\n * @returns {React.Component}\n * @example import { CssVariables } from @dhis2/ui-core\n * @see Live demo: {@link /demo/?path=/story/cssvariables--default|Storybook}\n */\n\n\nconst CssVariables = ({\n  colors,\n  theme,\n  layers,\n  spacers,\n  elevations\n}) => {\n  const allowedProps = {\n    colors,\n    theme,\n    layers,\n    spacers,\n    elevations\n  };\n  const variables = Object.keys(allowedProps) // Filter all props that are false\n  .filter(prop => allowedProps[prop]) // Map props to corresponding theme section and prefixes keys with section name\n  .map(toPrefixedThemeSection) // Map each section to a single string of css custom property declarations\n  .map(toCustomPropertyString) // Join all the sections to a single string\n  .join('\\n');\n  return /*#__PURE__*/React.createElement(_JSXStyle, {\n    id: \"3443925957\",\n    dynamic: [variables]\n  }, [\"html{\".concat(variables, \";}\")]);\n};\n\nCssVariables.defaultProps = {\n  colors: false,\n  theme: false,\n  layers: false,\n  spacers: false,\n  elevations: false\n};\n/**\n * @typedef {Object} PropTypes\n * @static\n * @prop {boolean} [colors]\n * @prop {boolean} [theme]\n * @prop {boolean} [layers]\n * @prop {boolean} [spacers]\n * @prop {boolean} [elevations]\n */\n\nCssVariables.propTypes = {\n  colors: PropTypes.bool,\n  elevations: PropTypes.bool,\n  layers: PropTypes.bool,\n  spacers: PropTypes.bool,\n  theme: PropTypes.bool\n};\nexport { CssVariables };","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-core/build/es/CssVariables/CssVariables.js"],"names":["_JSXStyle","theme","PropTypes","React","toPrefixedThemeSection","themeSectionKey","Object","entries","reduce","prefixed","key","value","concat","toCustomPropertyString","themeSection","map","join","CssVariables","colors","layers","spacers","elevations","allowedProps","variables","keys","filter","prop","createElement","id","dynamic","defaultProps","propTypes","bool"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,qBAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,sBAAsB,GAAGC,eAAe,IAAIC,MAAM,CAACC,OAAP,CAAeN,KAAK,CAACI,eAAD,CAApB,EAAuCG,MAAvC,CAA8C,CAACC,QAAD,EAAW,CAACC,GAAD,EAAMC,KAAN,CAAX,KAA4B;AAC1HF,EAAAA,QAAQ,CAAC,GAAGG,MAAH,CAAUP,eAAV,EAA2B,GAA3B,EAAgCO,MAAhC,CAAuCF,GAAvC,CAAD,CAAR,GAAwDC,KAAxD;AACA,SAAOF,QAAP;AACD,CAHiD,EAG/C,EAH+C,CAAlD;;AAKA,MAAMI,sBAAsB,GAAGC,YAAY,IAAIR,MAAM,CAACC,OAAP,CAAeO,YAAf,EAA6BC,GAA7B,CAAiC,CAAC,CAACL,GAAD,EAAMC,KAAN,CAAD,KAAkB,KAAKC,MAAL,CAAYF,GAAZ,EAAiB,IAAjB,EAAuBE,MAAvB,CAA8BD,KAA9B,EAAqC,GAArC,CAAnD,EAA8FK,IAA9F,CAAmG,IAAnG,CAA/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAMC,YAAY,GAAG,CAAC;AACpBC,EAAAA,MADoB;AAEpBjB,EAAAA,KAFoB;AAGpBkB,EAAAA,MAHoB;AAIpBC,EAAAA,OAJoB;AAKpBC,EAAAA;AALoB,CAAD,KAMf;AACJ,QAAMC,YAAY,GAAG;AACnBJ,IAAAA,MADmB;AAEnBjB,IAAAA,KAFmB;AAGnBkB,IAAAA,MAHmB;AAInBC,IAAAA,OAJmB;AAKnBC,IAAAA;AALmB,GAArB;AAOA,QAAME,SAAS,GAAGjB,MAAM,CAACkB,IAAP,CAAYF,YAAZ,EAA0B;AAA1B,GACjBG,MADiB,CACVC,IAAI,IAAIJ,YAAY,CAACI,IAAD,CADV,EACkB;AADlB,GAEjBX,GAFiB,CAEbX,sBAFa,EAEW;AAFX,GAGjBW,GAHiB,CAGbF,sBAHa,EAGW;AAHX,GAIjBG,IAJiB,CAIZ,IAJY,CAAlB;AAKA,SAAO,aAAab,KAAK,CAACwB,aAAN,CAAoB3B,SAApB,EAA+B;AACjD4B,IAAAA,EAAE,EAAE,YAD6C;AAEjDC,IAAAA,OAAO,EAAE,CAACN,SAAD;AAFwC,GAA/B,EAGjB,CAAC,QAAQX,MAAR,CAAeW,SAAf,EAA0B,IAA1B,CAAD,CAHiB,CAApB;AAID,CAvBD;;AAyBAN,YAAY,CAACa,YAAb,GAA4B;AAC1BZ,EAAAA,MAAM,EAAE,KADkB;AAE1BjB,EAAAA,KAAK,EAAE,KAFmB;AAG1BkB,EAAAA,MAAM,EAAE,KAHkB;AAI1BC,EAAAA,OAAO,EAAE,KAJiB;AAK1BC,EAAAA,UAAU,EAAE;AALc,CAA5B;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAJ,YAAY,CAACc,SAAb,GAAyB;AACvBb,EAAAA,MAAM,EAAEhB,SAAS,CAAC8B,IADK;AAEvBX,EAAAA,UAAU,EAAEnB,SAAS,CAAC8B,IAFC;AAGvBb,EAAAA,MAAM,EAAEjB,SAAS,CAAC8B,IAHK;AAIvBZ,EAAAA,OAAO,EAAElB,SAAS,CAAC8B,IAJI;AAKvB/B,EAAAA,KAAK,EAAEC,SAAS,CAAC8B;AALM,CAAzB;AAOA,SAASf,YAAT","sourcesContent":["import _JSXStyle from \"styled-jsx/style\";\nimport * as theme from '@dhis2/ui-constants';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst toPrefixedThemeSection = themeSectionKey => Object.entries(theme[themeSectionKey]).reduce((prefixed, [key, value]) => {\n  prefixed[\"\".concat(themeSectionKey, \"-\").concat(key)] = value;\n  return prefixed;\n}, {});\n\nconst toCustomPropertyString = themeSection => Object.entries(themeSection).map(([key, value]) => \"--\".concat(key, \": \").concat(value, \";\")).join('\\n');\n/**\n * @module\n * @description Injects our theme variables as CSS custom properties\n * @param {CssVariables.PropTypes} props\n * @returns {React.Component}\n * @example import { CssVariables } from @dhis2/ui-core\n * @see Live demo: {@link /demo/?path=/story/cssvariables--default|Storybook}\n */\n\n\nconst CssVariables = ({\n  colors,\n  theme,\n  layers,\n  spacers,\n  elevations\n}) => {\n  const allowedProps = {\n    colors,\n    theme,\n    layers,\n    spacers,\n    elevations\n  };\n  const variables = Object.keys(allowedProps) // Filter all props that are false\n  .filter(prop => allowedProps[prop]) // Map props to corresponding theme section and prefixes keys with section name\n  .map(toPrefixedThemeSection) // Map each section to a single string of css custom property declarations\n  .map(toCustomPropertyString) // Join all the sections to a single string\n  .join('\\n');\n  return /*#__PURE__*/React.createElement(_JSXStyle, {\n    id: \"3443925957\",\n    dynamic: [variables]\n  }, [\"html{\".concat(variables, \";}\")]);\n};\n\nCssVariables.defaultProps = {\n  colors: false,\n  theme: false,\n  layers: false,\n  spacers: false,\n  elevations: false\n};\n/**\n * @typedef {Object} PropTypes\n * @static\n * @prop {boolean} [colors]\n * @prop {boolean} [theme]\n * @prop {boolean} [layers]\n * @prop {boolean} [spacers]\n * @prop {boolean} [elevations]\n */\n\nCssVariables.propTypes = {\n  colors: PropTypes.bool,\n  elevations: PropTypes.bool,\n  layers: PropTypes.bool,\n  spacers: PropTypes.bool,\n  theme: PropTypes.bool\n};\nexport { CssVariables };"]},"metadata":{},"sourceType":"module"}