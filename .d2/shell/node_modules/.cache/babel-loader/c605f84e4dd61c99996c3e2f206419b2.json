{"ast":null,"code":"/**\n * @param {string[]} includedPaths\n * @param {string} path\n * @returns {bool}\n */\nconst isPathIncluded = (includedPaths, path) => {\n  const isIncluded = includedPaths.some(includedPath => {\n    if (path === includedPath) return true;\n    return includedPath.indexOf(\"\".concat(path, \"/\")) === 0;\n  });\n  return isIncluded;\n};\n/**\n * Returns all the childrenIds that should be rendered.\n * An id will be included if it's parent's path + the id is inside\n * the \"filter\" or the parent's path + id is a substring\n * of the paths in \"filter\" (then it's a parent path of\n * the units that should be included itself)\n *\n * @param {Object} node\n * @param {Object[]} node.children\n * @param {string[]} includedPaths\n * @returns {string[]}\n */\n\n\nexport const computeChildNodes = (node, filter) => {\n  if (!filter.length) {\n    return node.children;\n  }\n\n  return node.children.filter(child => {\n    return isPathIncluded(filter, \"\".concat(node.path, \"/\").concat(child.id));\n  });\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-widgets/build/es/OrganisationUnitTree/computeChildNodes.js"],"names":["isPathIncluded","includedPaths","path","isIncluded","some","includedPath","indexOf","concat","computeChildNodes","node","filter","length","children","child","id"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAc,GAAG,CAACC,aAAD,EAAgBC,IAAhB,KAAyB;AAC9C,QAAMC,UAAU,GAAGF,aAAa,CAACG,IAAd,CAAmBC,YAAY,IAAI;AACpD,QAAIH,IAAI,KAAKG,YAAb,EAA2B,OAAO,IAAP;AAC3B,WAAOA,YAAY,CAACC,OAAb,CAAqB,GAAGC,MAAH,CAAUL,IAAV,EAAgB,GAAhB,CAArB,MAA+C,CAAtD;AACD,GAHkB,CAAnB;AAIA,SAAOC,UAAP;AACD,CAND;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,MAAMK,iBAAiB,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACjD,MAAI,CAACA,MAAM,CAACC,MAAZ,EAAoB;AAClB,WAAOF,IAAI,CAACG,QAAZ;AACD;;AAED,SAAOH,IAAI,CAACG,QAAL,CAAcF,MAAd,CAAqBG,KAAK,IAAI;AACnC,WAAOb,cAAc,CAACU,MAAD,EAAS,GAAGH,MAAH,CAAUE,IAAI,CAACP,IAAf,EAAqB,GAArB,EAA0BK,MAA1B,CAAiCM,KAAK,CAACC,EAAvC,CAAT,CAArB;AACD,GAFM,CAAP;AAGD,CARM","sourcesContent":["/**\n * @param {string[]} includedPaths\n * @param {string} path\n * @returns {bool}\n */\nconst isPathIncluded = (includedPaths, path) => {\n  const isIncluded = includedPaths.some(includedPath => {\n    if (path === includedPath) return true;\n    return includedPath.indexOf(\"\".concat(path, \"/\")) === 0;\n  });\n  return isIncluded;\n};\n/**\n * Returns all the childrenIds that should be rendered.\n * An id will be included if it's parent's path + the id is inside\n * the \"filter\" or the parent's path + id is a substring\n * of the paths in \"filter\" (then it's a parent path of\n * the units that should be included itself)\n *\n * @param {Object} node\n * @param {Object[]} node.children\n * @param {string[]} includedPaths\n * @returns {string[]}\n */\n\n\nexport const computeChildNodes = (node, filter) => {\n  if (!filter.length) {\n    return node.children;\n  }\n\n  return node.children.filter(child => {\n    return isPathIncluded(filter, \"\".concat(node.path, \"/\").concat(child.id));\n  });\n};"]},"metadata":{},"sourceType":"module"}