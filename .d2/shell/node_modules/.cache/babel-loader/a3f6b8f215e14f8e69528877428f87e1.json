{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { MultiSelectOption } from '@dhis2/ui-core';\nimport { MultiSelectField } from '@dhis2/ui-widgets';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { createSelectChangeHandler, createFocusHandler, createBlurHandler, hasError, isLoading, isValid, getValidationText } from '../shared/helpers.js';\nimport { inputPropType, metaPropType } from '../shared/propTypes.js';\nexport const MultiSelectFieldFF = ({\n  error,\n  input,\n  loading,\n  meta,\n  onBlur,\n  onFocus,\n  options,\n  showLoadingStatus,\n  showValidStatus,\n  valid,\n  validationText,\n  ...rest\n}) => {\n  return /*#__PURE__*/React.createElement(MultiSelectField, _extends({}, rest, {\n    name: input.name,\n    error: hasError(meta, error),\n    valid: isValid(meta, valid, showValidStatus),\n    loading: isLoading(meta, loading, showLoadingStatus),\n    validationText: getValidationText(meta, validationText, error),\n    onFocus: createFocusHandler(input, onFocus),\n    onChange: createSelectChangeHandler(input),\n    onBlur: createBlurHandler(input, onBlur),\n    selected: input.value || []\n    /* input.value is an empty string initially, so we're providing an empty array if falsey */\n\n  }), options.map(option => /*#__PURE__*/React.createElement(MultiSelectOption, _extends({\n    key: option.value\n  }, option))));\n};\nMultiSelectFieldFF.propTypes = {\n  /** `input` props provided by Final Form `Field` */\n  input: inputPropType.isRequired,\n\n  /** `meta` props provided by Final Form `Field` */\n  meta: metaPropType.isRequired,\n  error: PropTypes.bool,\n  loading: PropTypes.bool,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    value: PropTypes.string\n  })),\n  showLoadingStatus: PropTypes.bool,\n  showValidStatus: PropTypes.bool,\n  valid: PropTypes.bool,\n  validationText: PropTypes.string,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-forms/build/es/MultiSelectFieldFF/MultiSelectFieldFF.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","MultiSelectOption","MultiSelectField","PropTypes","React","createSelectChangeHandler","createFocusHandler","createBlurHandler","hasError","isLoading","isValid","getValidationText","inputPropType","metaPropType","MultiSelectFieldFF","error","input","loading","meta","onBlur","onFocus","options","showLoadingStatus","showValidStatus","valid","validationText","rest","createElement","name","onChange","selected","value","map","option","propTypes","isRequired","bool","arrayOf","shape","label","string","func"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { MultiSelectOption } from '@dhis2/ui-core';\nimport { MultiSelectField } from '@dhis2/ui-widgets';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { createSelectChangeHandler, createFocusHandler, createBlurHandler, hasError, isLoading, isValid, getValidationText } from '../shared/helpers.js';\nimport { inputPropType, metaPropType } from '../shared/propTypes.js';\nexport const MultiSelectFieldFF = ({\n  error,\n  input,\n  loading,\n  meta,\n  onBlur,\n  onFocus,\n  options,\n  showLoadingStatus,\n  showValidStatus,\n  valid,\n  validationText,\n  ...rest\n}) => {\n  return /*#__PURE__*/React.createElement(MultiSelectField, _extends({}, rest, {\n    name: input.name,\n    error: hasError(meta, error),\n    valid: isValid(meta, valid, showValidStatus),\n    loading: isLoading(meta, loading, showLoadingStatus),\n    validationText: getValidationText(meta, validationText, error),\n    onFocus: createFocusHandler(input, onFocus),\n    onChange: createSelectChangeHandler(input),\n    onBlur: createBlurHandler(input, onBlur),\n    selected: input.value || []\n    /* input.value is an empty string initially, so we're providing an empty array if falsey */\n\n  }), options.map(option => /*#__PURE__*/React.createElement(MultiSelectOption, _extends({\n    key: option.value\n  }, option))));\n};\nMultiSelectFieldFF.propTypes = {\n  /** `input` props provided by Final Form `Field` */\n  input: inputPropType.isRequired,\n\n  /** `meta` props provided by Final Form `Field` */\n  meta: metaPropType.isRequired,\n  error: PropTypes.bool,\n  loading: PropTypes.bool,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    value: PropTypes.string\n  })),\n  showLoadingStatus: PropTypes.bool,\n  showValidStatus: PropTypes.bool,\n  valid: PropTypes.bool,\n  validationText: PropTypes.string,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func\n};"]},"metadata":{},"sourceType":"module"}