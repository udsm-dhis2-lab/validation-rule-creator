{"ast":null,"code":"import propTypes from '@dhis2/prop-types';\nimport React from 'react';\nimport { Empty } from '../Select/Empty.js';\nimport { filterIgnored, checkIfValidOption } from '../Select/option-helpers.js';\n\nconst onIgnoredClick = (_, e) => {\n  e.stopPropagation();\n  e.preventDefault();\n};\n\nconst Menu = ({\n  options,\n  onChange,\n  selected,\n  empty,\n  handleFocusInput,\n  handleClose,\n  dataTest\n}) => {\n  const renderedOptions = filterIgnored(options);\n\n  if (React.Children.count(renderedOptions) === 0) {\n    // If it's a string, supply it to our <Empty> component so it looks better\n    if (typeof empty === 'string') {\n      return /*#__PURE__*/React.createElement(Empty, {\n        message: empty,\n        dataTest: \"\".concat(dataTest, \"-empty\")\n      });\n    } // Otherwise just render the supplied markup\n\n\n    return empty;\n  }\n\n  const children = React.Children.map(options, child => {\n    const isValidOption = checkIfValidOption(child); // Return early if the child isn't an option, to prevent attaching handlers etc.\n\n    if (!isValidOption) {\n      return child;\n    }\n\n    const {\n      value,\n      disabled: isDisabled\n    } = child.props; // Active means the option is currently selected\n\n    const isActive = value === selected;\n\n    const onClick = (_, e) => {\n      const data = {\n        selected: value\n      };\n      e.stopPropagation();\n      onChange(data, e);\n      handleClose();\n      handleFocusInput();\n    }; // Clicks on active options or disabled options should be ignored for the single select\n\n\n    const isIgnored = isActive || isDisabled;\n    return /*#__PURE__*/React.cloneElement(child, { ...child.props,\n      onClick: isIgnored ? onIgnoredClick : onClick,\n      active: isActive\n    });\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\nMenu.defaultProps = {\n  empty: ''\n};\nMenu.propTypes = {\n  dataTest: propTypes.string.isRequired,\n  empty: propTypes.node,\n  handleClose: propTypes.func,\n  handleFocusInput: propTypes.func,\n  options: propTypes.node,\n  selected: propTypes.string,\n  onChange: propTypes.func\n};\nexport { Menu };","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-core/build/es/SingleSelect/Menu.js"],"names":["propTypes","React","Empty","filterIgnored","checkIfValidOption","onIgnoredClick","_","e","stopPropagation","preventDefault","Menu","options","onChange","selected","empty","handleFocusInput","handleClose","dataTest","renderedOptions","Children","count","createElement","message","concat","children","map","child","isValidOption","value","disabled","isDisabled","props","isActive","onClick","data","isIgnored","cloneElement","active","Fragment","defaultProps","string","isRequired","node","func"],"mappings":"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","sourcesContent":["import propTypes from '@dhis2/prop-types';\nimport React from 'react';\nimport { Empty } from '../Select/Empty.js';\nimport { filterIgnored, checkIfValidOption } from '../Select/option-helpers.js';\n\nconst onIgnoredClick = (_, e) => {\n  e.stopPropagation();\n  e.preventDefault();\n};\n\nconst Menu = ({\n  options,\n  onChange,\n  selected,\n  empty,\n  handleFocusInput,\n  handleClose,\n  dataTest\n}) => {\n  const renderedOptions = filterIgnored(options);\n\n  if (React.Children.count(renderedOptions) === 0) {\n    // If it's a string, supply it to our <Empty> component so it looks better\n    if (typeof empty === 'string') {\n      return /*#__PURE__*/React.createElement(Empty, {\n        message: empty,\n        dataTest: \"\".concat(dataTest, \"-empty\")\n      });\n    } // Otherwise just render the supplied markup\n\n\n    return empty;\n  }\n\n  const children = React.Children.map(options, child => {\n    const isValidOption = checkIfValidOption(child); // Return early if the child isn't an option, to prevent attaching handlers etc.\n\n    if (!isValidOption) {\n      return child;\n    }\n\n    const {\n      value,\n      disabled: isDisabled\n    } = child.props; // Active means the option is currently selected\n\n    const isActive = value === selected;\n\n    const onClick = (_, e) => {\n      const data = {\n        selected: value\n      };\n      e.stopPropagation();\n      onChange(data, e);\n      handleClose();\n      handleFocusInput();\n    }; // Clicks on active options or disabled options should be ignored for the single select\n\n\n    const isIgnored = isActive || isDisabled;\n    return /*#__PURE__*/React.cloneElement(child, { ...child.props,\n      onClick: isIgnored ? onIgnoredClick : onClick,\n      active: isActive\n    });\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\nMenu.defaultProps = {\n  empty: ''\n};\nMenu.propTypes = {\n  dataTest: propTypes.string.isRequired,\n  empty: propTypes.node,\n  handleClose: propTypes.func,\n  handleFocusInput: propTypes.func,\n  options: propTypes.node,\n  selected: propTypes.string,\n  onChange: propTypes.func\n};\nexport { Menu };"]},"metadata":{},"sourceType":"module"}