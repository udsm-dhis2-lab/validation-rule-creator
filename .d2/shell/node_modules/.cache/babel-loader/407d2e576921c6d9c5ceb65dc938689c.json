{"ast":null,"code":"import ResizeObserver from 'resize-observer-polyfill';\n\nconst attachResizeObservers = ({\n  state: {\n    elements\n  },\n  options,\n  instance: {\n    update\n  }\n}) => {\n  const observers = Object.keys(options).reduce((acc, elementKey) => {\n    if (options[elementKey]) {\n      const observer = new ResizeObserver(update);\n      observer.observe(elements[elementKey]);\n      acc.push(observer);\n    }\n\n    return acc;\n  }, []);\n  return () => {\n    observers.forEach(observer => {\n      observer.disconnect();\n    });\n  };\n};\n\nexport const getBaseModifiers = ({\n  observePopperResize,\n  observeReferenceResize\n}) => [{\n  name: 'preventOverflow',\n  options: {\n    altAxis: true,\n    rootBoundary: 'document',\n    boundary: document.body\n  }\n}, {\n  name: 'flip',\n  options: {\n    rootBoundary: 'document',\n    boundary: document.body\n  }\n}, {\n  name: 'resizeObserver',\n  enabled: true,\n  phase: 'write',\n  fn: () => {},\n  effect: attachResizeObservers,\n  options: {\n    popper: observePopperResize,\n    reference: observeReferenceResize\n  }\n}];\nexport const deduplicateModifiers = (modifiers, resizeObservers) => {\n  // Deduplicate modifiers from props and baseModifiers,\n  // when duplicates are encountered (by name), use the\n  // modifier from props so each Popper can be fully custom\n  return getBaseModifiers(resizeObservers).filter(({\n    name\n  }) => !modifiers.some(m => m.name === name)).concat(modifiers);\n};\nexport const resizeObserver = {\n  name: 'resizeObserver',\n  enabled: true,\n  phase: 'write',\n  fn: () => {},\n  effect: ({\n    state: {\n      elements\n    },\n    options,\n    instance: {\n      update\n    }\n  }) => {\n    const observers = Object.keys(options).reduce((acc, elementKey) => {\n      if (options[elementKey]) {\n        const observer = new ResizeObserver(update);\n        observer.observe(elements[elementKey]);\n        acc.push(observer);\n      }\n\n      return acc;\n    }, []);\n    return () => {\n      observers.forEach(observer => {\n        observer.disconnect();\n      });\n    };\n  }\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-core/build/es/Popper/modifiers.js"],"names":["ResizeObserver","attachResizeObservers","state","elements","options","instance","update","observers","Object","keys","reduce","acc","elementKey","observer","observe","push","forEach","disconnect","getBaseModifiers","observePopperResize","observeReferenceResize","name","altAxis","rootBoundary","boundary","document","body","enabled","phase","fn","effect","popper","reference","deduplicateModifiers","modifiers","resizeObservers","filter","some","m","concat","resizeObserver"],"mappings":"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","sourcesContent":["import ResizeObserver from 'resize-observer-polyfill';\n\nconst attachResizeObservers = ({\n  state: {\n    elements\n  },\n  options,\n  instance: {\n    update\n  }\n}) => {\n  const observers = Object.keys(options).reduce((acc, elementKey) => {\n    if (options[elementKey]) {\n      const observer = new ResizeObserver(update);\n      observer.observe(elements[elementKey]);\n      acc.push(observer);\n    }\n\n    return acc;\n  }, []);\n  return () => {\n    observers.forEach(observer => {\n      observer.disconnect();\n    });\n  };\n};\n\nexport const getBaseModifiers = ({\n  observePopperResize,\n  observeReferenceResize\n}) => [{\n  name: 'preventOverflow',\n  options: {\n    altAxis: true,\n    rootBoundary: 'document',\n    boundary: document.body\n  }\n}, {\n  name: 'flip',\n  options: {\n    rootBoundary: 'document',\n    boundary: document.body\n  }\n}, {\n  name: 'resizeObserver',\n  enabled: true,\n  phase: 'write',\n  fn: () => {},\n  effect: attachResizeObservers,\n  options: {\n    popper: observePopperResize,\n    reference: observeReferenceResize\n  }\n}];\nexport const deduplicateModifiers = (modifiers, resizeObservers) => {\n  // Deduplicate modifiers from props and baseModifiers,\n  // when duplicates are encountered (by name), use the\n  // modifier from props so each Popper can be fully custom\n  return getBaseModifiers(resizeObservers).filter(({\n    name\n  }) => !modifiers.some(m => m.name === name)).concat(modifiers);\n};\nexport const resizeObserver = {\n  name: 'resizeObserver',\n  enabled: true,\n  phase: 'write',\n  fn: () => {},\n  effect: ({\n    state: {\n      elements\n    },\n    options,\n    instance: {\n      update\n    }\n  }) => {\n    const observers = Object.keys(options).reduce((acc, elementKey) => {\n      if (options[elementKey]) {\n        const observer = new ResizeObserver(update);\n        observer.observe(elements[elementKey]);\n        acc.push(observer);\n      }\n\n      return acc;\n    }, []);\n    return () => {\n      observers.forEach(observer => {\n        observer.disconnect();\n      });\n    };\n  }\n};"]},"metadata":{},"sourceType":"module"}