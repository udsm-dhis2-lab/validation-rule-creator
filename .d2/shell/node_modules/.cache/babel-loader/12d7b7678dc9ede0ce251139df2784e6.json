{"ast":null,"code":"import i18n from '../locales/index.js';\nimport { isEmpty, isNumeric, toNumber, isInRange, requireArgument } from './helpers/index.js';\n\nconst createNumberRange = (lowerBound, upperBound, customMessage) => {\n  requireArgument(lowerBound, 'number');\n  requireArgument(upperBound, 'number');\n  const errorMessage = customMessage || i18n.t('Number cannot be less than {{lowerBound}} or more than {{upperBound}}', {\n    lowerBound,\n    upperBound\n  });\n  return value => isEmpty(value) || isNumeric(value) && isInRange(lowerBound, upperBound, toNumber(value)) ? undefined : errorMessage;\n};\n\nexport { createNumberRange };","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-forms/build/es/validators/createNumberRange.js"],"names":["i18n","isEmpty","isNumeric","toNumber","isInRange","requireArgument","createNumberRange","lowerBound","upperBound","customMessage","errorMessage","t","value","undefined"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,qBAAjB;AACA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,eAAlD,QAAyE,oBAAzE;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,UAAD,EAAaC,UAAb,EAAyBC,aAAzB,KAA2C;AACnEJ,EAAAA,eAAe,CAACE,UAAD,EAAa,QAAb,CAAf;AACAF,EAAAA,eAAe,CAACG,UAAD,EAAa,QAAb,CAAf;AACA,QAAME,YAAY,GAAGD,aAAa,IAAIT,IAAI,CAACW,CAAL,CAAO,uEAAP,EAAgF;AACpHJ,IAAAA,UADoH;AAEpHC,IAAAA;AAFoH,GAAhF,CAAtC;AAIA,SAAOI,KAAK,IAAIX,OAAO,CAACW,KAAD,CAAP,IAAkBV,SAAS,CAACU,KAAD,CAAT,IAAoBR,SAAS,CAACG,UAAD,EAAaC,UAAb,EAAyBL,QAAQ,CAACS,KAAD,CAAjC,CAA/C,GAA2FC,SAA3F,GAAuGH,YAAvH;AACD,CARD;;AAUA,SAASJ,iBAAT","sourcesContent":["import i18n from '../locales/index.js';\nimport { isEmpty, isNumeric, toNumber, isInRange, requireArgument } from './helpers/index.js';\n\nconst createNumberRange = (lowerBound, upperBound, customMessage) => {\n  requireArgument(lowerBound, 'number');\n  requireArgument(upperBound, 'number');\n  const errorMessage = customMessage || i18n.t('Number cannot be less than {{lowerBound}} or more than {{upperBound}}', {\n    lowerBound,\n    upperBound\n  });\n  return value => isEmpty(value) || isNumeric(value) && isInRange(lowerBound, upperBound, toNumber(value)) ? undefined : errorMessage;\n};\n\nexport { createNumberRange };"]},"metadata":{},"sourceType":"module"}