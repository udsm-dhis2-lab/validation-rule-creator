{"ast":null,"code":"import propTypes from 'prop-types';\n\nconst arrayWithLengthFactory = ({\n  min = 0,\n  max = Infinity,\n  propType,\n  isRequired\n}) => (props, propSelector, // normally a propName, but when wrapped in arrayOf an index\ncomponentName, location, propFullName // normally null but a string like \"propName[index]\" when wrapped in arrayOf\n) => {\n  const arr = props[propSelector];\n  const propName = propFullName || propSelector;\n  const baseMsg = `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`,`;\n  const insideArrayOf = !!propFullName;\n\n  if (isRequired && typeof arr === 'undefined') {\n    return new Error(`${baseMsg} this prop is required but no value was found.`);\n  }\n\n  if (arr && !Array.isArray(arr)) {\n    return new Error(`${baseMsg} prop value is not an array.`);\n  }\n\n  if (arr && arr.length > max) {\n    return new Error(`${baseMsg} array has a length of ${arr.length}, but the maximum is ${max}`);\n  }\n\n  if (arr && arr.length < min) {\n    return new Error(`${baseMsg} array has a length of ${arr.length}, but the minimum is ${min}`);\n  }\n\n  if (arr && propType) {\n    const checkPropName = insideArrayOf ? location : propName;\n    const checkPropType = insideArrayOf ? // array should be array containing only the given type\n    propTypes.arrayOf(propTypes.arrayOf(propType)) : // array should contain only the given type\n    propTypes.arrayOf(propType);\n    const checkPropTypes = {\n      [checkPropName]: checkPropType\n    };\n    const checkProps = insideArrayOf ? {\n      [location]: props\n    } : props; // When not inside an array, the error message only reads correctly\n    // when using \"prop\"\n\n    const checkProp = insideArrayOf ? propName : 'prop';\n    propTypes.checkPropTypes(checkPropTypes, checkProps, checkProp, componentName);\n  }\n\n  return null;\n};\n/**\n * Ensure the prop value is an array with a length between a minimum and maximum.\n * If a third `propType` argument is passed each item in the array needs to be of that prop-type\n * @param {number} [min=0] - The minimal array length\n * @param {number} [max=Infinity] - The maximal array length\n * @param {function} [propType] - The prop-type that each array item needs to conform to\n * @return {Error|null} Returns null if all conditions are met, or an error\n * @example\n * import React from 'react'\n * import { arrayWithLength } from '@dhis2/prop-types'\n *\n * const LotsOfLists = props => <div {...props}>Does nothing</div>\n *\n * LotsOfLists.propTypes = {\n *     arrayWithMaxThreeNumbers: arrayWithLength(0, 3, propTypes.number),\n *     arrayWithAtLeastSixStrings: arrayWithLength(6, undefined, propTypes.string),\n *     arrayWithAtLeastTenItems: arrayWithLength(10),\n *     mandatoryArrayBetweenOneAndTen: arrayWithLength(1,10).isRequired,\n * }\n */\n\n\nexport function arrayWithLength(min, max, propType) {\n  const fn = arrayWithLengthFactory({\n    min,\n    max,\n    propType,\n    isRequired: false\n  });\n  fn.isRequired = arrayWithLengthFactory({\n    min,\n    max,\n    propType,\n    isRequired: true\n  });\n  return fn;\n}","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/prop-types/build/es/propTypes/arrayWithLength.js"],"names":["propTypes","arrayWithLengthFactory","min","max","Infinity","propType","isRequired","props","propSelector","componentName","location","propFullName","arr","propName","baseMsg","insideArrayOf","Error","Array","isArray","length","checkPropName","checkPropType","arrayOf","checkPropTypes","checkProps","checkProp","arrayWithLength","fn"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,sBAAsB,GAAG,CAAC;AAC9BC,EAAAA,GAAG,GAAG,CADwB;AAE9BC,EAAAA,GAAG,GAAGC,QAFwB;AAG9BC,EAAAA,QAH8B;AAI9BC,EAAAA;AAJ8B,CAAD,KAKzB,CAACC,KAAD,EAAQC,YAAR,EAAsB;AAC5BC,aADM,EACSC,QADT,EACmBC,YADnB,CACgC;AADhC,KAED;AACH,QAAMC,GAAG,GAAGL,KAAK,CAACC,YAAD,CAAjB;AACA,QAAMK,QAAQ,GAAGF,YAAY,IAAIH,YAAjC;AACA,QAAMM,OAAO,GAAI,kBAAiBD,QAAS,oBAAmBJ,aAAc,KAA5E;AACA,QAAMM,aAAa,GAAG,CAAC,CAACJ,YAAxB;;AAEA,MAAIL,UAAU,IAAI,OAAOM,GAAP,KAAe,WAAjC,EAA8C;AAC5C,WAAO,IAAII,KAAJ,CAAW,GAAEF,OAAQ,gDAArB,CAAP;AACD;;AAED,MAAIF,GAAG,IAAI,CAACK,KAAK,CAACC,OAAN,CAAcN,GAAd,CAAZ,EAAgC;AAC9B,WAAO,IAAII,KAAJ,CAAW,GAAEF,OAAQ,8BAArB,CAAP;AACD;;AAED,MAAIF,GAAG,IAAIA,GAAG,CAACO,MAAJ,GAAahB,GAAxB,EAA6B;AAC3B,WAAO,IAAIa,KAAJ,CAAW,GAAEF,OAAQ,0BAAyBF,GAAG,CAACO,MAAO,wBAAuBhB,GAAI,EAApF,CAAP;AACD;;AAED,MAAIS,GAAG,IAAIA,GAAG,CAACO,MAAJ,GAAajB,GAAxB,EAA6B;AAC3B,WAAO,IAAIc,KAAJ,CAAW,GAAEF,OAAQ,0BAAyBF,GAAG,CAACO,MAAO,wBAAuBjB,GAAI,EAApF,CAAP;AACD;;AAED,MAAIU,GAAG,IAAIP,QAAX,EAAqB;AACnB,UAAMe,aAAa,GAAGL,aAAa,GAAGL,QAAH,GAAcG,QAAjD;AACA,UAAMQ,aAAa,GAAGN,aAAa,GAAG;AACtCf,IAAAA,SAAS,CAACsB,OAAV,CAAkBtB,SAAS,CAACsB,OAAV,CAAkBjB,QAAlB,CAAlB,CADmC,GACc;AACjDL,IAAAA,SAAS,CAACsB,OAAV,CAAkBjB,QAAlB,CAFA;AAGA,UAAMkB,cAAc,GAAG;AACrB,OAACH,aAAD,GAAiBC;AADI,KAAvB;AAGA,UAAMG,UAAU,GAAGT,aAAa,GAAG;AACjC,OAACL,QAAD,GAAYH;AADqB,KAAH,GAE5BA,KAFJ,CARmB,CAUR;AACX;;AAEA,UAAMkB,SAAS,GAAGV,aAAa,GAAGF,QAAH,GAAc,MAA7C;AACAb,IAAAA,SAAS,CAACuB,cAAV,CAAyBA,cAAzB,EAAyCC,UAAzC,EAAqDC,SAArD,EAAgEhB,aAAhE;AACD;;AAED,SAAO,IAAP;AACD,CA/CD;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASiB,eAAT,CAAyBxB,GAAzB,EAA8BC,GAA9B,EAAmCE,QAAnC,EAA6C;AAClD,QAAMsB,EAAE,GAAG1B,sBAAsB,CAAC;AAChCC,IAAAA,GADgC;AAEhCC,IAAAA,GAFgC;AAGhCE,IAAAA,QAHgC;AAIhCC,IAAAA,UAAU,EAAE;AAJoB,GAAD,CAAjC;AAMAqB,EAAAA,EAAE,CAACrB,UAAH,GAAgBL,sBAAsB,CAAC;AACrCC,IAAAA,GADqC;AAErCC,IAAAA,GAFqC;AAGrCE,IAAAA,QAHqC;AAIrCC,IAAAA,UAAU,EAAE;AAJyB,GAAD,CAAtC;AAMA,SAAOqB,EAAP;AACD","sourcesContent":["import propTypes from 'prop-types';\n\nconst arrayWithLengthFactory = ({\n  min = 0,\n  max = Infinity,\n  propType,\n  isRequired\n}) => (props, propSelector, // normally a propName, but when wrapped in arrayOf an index\ncomponentName, location, propFullName // normally null but a string like \"propName[index]\" when wrapped in arrayOf\n) => {\n  const arr = props[propSelector];\n  const propName = propFullName || propSelector;\n  const baseMsg = `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`,`;\n  const insideArrayOf = !!propFullName;\n\n  if (isRequired && typeof arr === 'undefined') {\n    return new Error(`${baseMsg} this prop is required but no value was found.`);\n  }\n\n  if (arr && !Array.isArray(arr)) {\n    return new Error(`${baseMsg} prop value is not an array.`);\n  }\n\n  if (arr && arr.length > max) {\n    return new Error(`${baseMsg} array has a length of ${arr.length}, but the maximum is ${max}`);\n  }\n\n  if (arr && arr.length < min) {\n    return new Error(`${baseMsg} array has a length of ${arr.length}, but the minimum is ${min}`);\n  }\n\n  if (arr && propType) {\n    const checkPropName = insideArrayOf ? location : propName;\n    const checkPropType = insideArrayOf ? // array should be array containing only the given type\n    propTypes.arrayOf(propTypes.arrayOf(propType)) : // array should contain only the given type\n    propTypes.arrayOf(propType);\n    const checkPropTypes = {\n      [checkPropName]: checkPropType\n    };\n    const checkProps = insideArrayOf ? {\n      [location]: props\n    } : props; // When not inside an array, the error message only reads correctly\n    // when using \"prop\"\n\n    const checkProp = insideArrayOf ? propName : 'prop';\n    propTypes.checkPropTypes(checkPropTypes, checkProps, checkProp, componentName);\n  }\n\n  return null;\n};\n/**\n * Ensure the prop value is an array with a length between a minimum and maximum.\n * If a third `propType` argument is passed each item in the array needs to be of that prop-type\n * @param {number} [min=0] - The minimal array length\n * @param {number} [max=Infinity] - The maximal array length\n * @param {function} [propType] - The prop-type that each array item needs to conform to\n * @return {Error|null} Returns null if all conditions are met, or an error\n * @example\n * import React from 'react'\n * import { arrayWithLength } from '@dhis2/prop-types'\n *\n * const LotsOfLists = props => <div {...props}>Does nothing</div>\n *\n * LotsOfLists.propTypes = {\n *     arrayWithMaxThreeNumbers: arrayWithLength(0, 3, propTypes.number),\n *     arrayWithAtLeastSixStrings: arrayWithLength(6, undefined, propTypes.string),\n *     arrayWithAtLeastTenItems: arrayWithLength(10),\n *     mandatoryArrayBetweenOneAndTen: arrayWithLength(1,10).isRequired,\n * }\n */\n\n\nexport function arrayWithLength(min, max, propType) {\n  const fn = arrayWithLengthFactory({\n    min,\n    max,\n    propType,\n    isRequired: false\n  });\n  fn.isRequired = arrayWithLengthFactory({\n    min,\n    max,\n    propType,\n    isRequired: true\n  });\n  return fn;\n}"]},"metadata":{},"sourceType":"module"}