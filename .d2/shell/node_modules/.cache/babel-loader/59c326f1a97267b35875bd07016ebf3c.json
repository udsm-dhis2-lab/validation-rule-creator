{"ast":null,"code":"import propTypes from '@dhis2/prop-types';\nimport React from 'react';\nimport { Empty } from '../Select/Empty.js';\nimport { filterIgnored, checkIfValidOption, removeOption, findOption } from '../Select/option-helpers.js';\n\nconst onDisabledClick = (_, e) => {\n  e.stopPropagation();\n  e.preventDefault();\n};\n\nconst createHandler = ({\n  isActive,\n  onChange,\n  selected,\n  value\n}) => (_, e) => {\n  e.stopPropagation(); // If the option is currently selected remove it from the array of selected options\n\n  if (isActive) {\n    const filtered = removeOption(value, selected);\n    const data = {\n      selected: filtered\n    };\n    return onChange(data, e);\n  } // Otherwise, add it to selected\n\n\n  const data = {\n    selected: selected.concat([value])\n  };\n  return onChange(data, e);\n};\n\nconst Menu = ({\n  options,\n  onChange,\n  selected,\n  empty,\n  dataTest\n}) => {\n  const renderedOptions = filterIgnored(options);\n\n  if (React.Children.count(renderedOptions) === 0) {\n    // If it's a string, supply it to our <Empty> component so it looks better\n    if (typeof empty === 'string') {\n      return /*#__PURE__*/React.createElement(Empty, {\n        message: empty,\n        dataTest: \"\".concat(dataTest, \"-empty\")\n      });\n    } // Otherwise just render the supplied markup\n\n\n    return empty;\n  }\n\n  const children = React.Children.map(options, child => {\n    const isValidOption = checkIfValidOption(child); // Return early if the child isn't an option, to prevent attaching handlers etc.\n\n    if (!isValidOption) {\n      return child;\n    }\n\n    const {\n      value,\n      label,\n      disabled: isDisabled\n    } = child.props; // Active means the option is currently selected\n\n    const isActive = !!findOption(value, selected); // Create the appropriate click handler for the option\n\n    const onClick = isDisabled ? onDisabledClick : createHandler({\n      isActive,\n      onChange,\n      selected,\n      value,\n      label\n    });\n    return /*#__PURE__*/React.cloneElement(child, { ...child.props,\n      onClick,\n      active: isActive\n    });\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\nMenu.defaultProps = {\n  empty: ''\n};\nMenu.propTypes = {\n  dataTest: propTypes.string.isRequired,\n  empty: propTypes.node,\n  options: propTypes.node,\n  selected: propTypes.arrayOf(propTypes.string),\n  onChange: propTypes.func\n};\nexport { Menu };","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-core/build/es/MultiSelect/Menu.js"],"names":["propTypes","React","Empty","filterIgnored","checkIfValidOption","removeOption","findOption","onDisabledClick","_","e","stopPropagation","preventDefault","createHandler","isActive","onChange","selected","value","filtered","data","concat","Menu","options","empty","dataTest","renderedOptions","Children","count","createElement","message","children","map","child","isValidOption","label","disabled","isDisabled","props","onClick","cloneElement","active","Fragment","defaultProps","string","isRequired","node","arrayOf","func"],"mappings":"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","sourcesContent":["import propTypes from '@dhis2/prop-types';\nimport React from 'react';\nimport { Empty } from '../Select/Empty.js';\nimport { filterIgnored, checkIfValidOption, removeOption, findOption } from '../Select/option-helpers.js';\n\nconst onDisabledClick = (_, e) => {\n  e.stopPropagation();\n  e.preventDefault();\n};\n\nconst createHandler = ({\n  isActive,\n  onChange,\n  selected,\n  value\n}) => (_, e) => {\n  e.stopPropagation(); // If the option is currently selected remove it from the array of selected options\n\n  if (isActive) {\n    const filtered = removeOption(value, selected);\n    const data = {\n      selected: filtered\n    };\n    return onChange(data, e);\n  } // Otherwise, add it to selected\n\n\n  const data = {\n    selected: selected.concat([value])\n  };\n  return onChange(data, e);\n};\n\nconst Menu = ({\n  options,\n  onChange,\n  selected,\n  empty,\n  dataTest\n}) => {\n  const renderedOptions = filterIgnored(options);\n\n  if (React.Children.count(renderedOptions) === 0) {\n    // If it's a string, supply it to our <Empty> component so it looks better\n    if (typeof empty === 'string') {\n      return /*#__PURE__*/React.createElement(Empty, {\n        message: empty,\n        dataTest: \"\".concat(dataTest, \"-empty\")\n      });\n    } // Otherwise just render the supplied markup\n\n\n    return empty;\n  }\n\n  const children = React.Children.map(options, child => {\n    const isValidOption = checkIfValidOption(child); // Return early if the child isn't an option, to prevent attaching handlers etc.\n\n    if (!isValidOption) {\n      return child;\n    }\n\n    const {\n      value,\n      label,\n      disabled: isDisabled\n    } = child.props; // Active means the option is currently selected\n\n    const isActive = !!findOption(value, selected); // Create the appropriate click handler for the option\n\n    const onClick = isDisabled ? onDisabledClick : createHandler({\n      isActive,\n      onChange,\n      selected,\n      value,\n      label\n    });\n    return /*#__PURE__*/React.cloneElement(child, { ...child.props,\n      onClick,\n      active: isActive\n    });\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\nMenu.defaultProps = {\n  empty: ''\n};\nMenu.propTypes = {\n  dataTest: propTypes.string.isRequired,\n  empty: propTypes.node,\n  options: propTypes.node,\n  selected: propTypes.arrayOf(propTypes.string),\n  onChange: propTypes.func\n};\nexport { Menu };"]},"metadata":{},"sourceType":"module"}