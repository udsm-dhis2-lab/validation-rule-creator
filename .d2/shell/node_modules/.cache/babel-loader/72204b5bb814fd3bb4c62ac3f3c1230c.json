{"ast":null,"code":"/**\n * @param {string} path\n * @returns {string[]}\n */\nexport const extractAllPathsFromPath = path => {\n  // remove leading slash and split by path delimiter/slashes\n  const segments = path.replace(/^\\//, '').split('/');\n  const withSubPaths = segments.map((segment, index) => {\n    // take all segments from 0 to index and join them with the delimiter\n    return \"/\".concat(segments.slice(0, index + 1).join('/'));\n  });\n  return withSubPaths;\n};\n/**\n * @param {string[]} initiallyExpanded\n * @returns {string[]}\n */\n\nexport const getInitiallyExpandedPaths = initiallyExpanded => initiallyExpanded.reduce((all, curPath) => {\n  const allPathsInCurPath = extractAllPathsFromPath(curPath);\n  return [...all, ...allPathsInCurPath];\n}, []);\n/**\n * @param {Object} args\n * @param {string[]} args.expanded\n * @param {Function} args.setExpanded\n * @param {Function} [args.onExpand]\n * @param {Function} [args.onCollapse]\n * @returns {{ handleExpand: Function, handleCollapse: Function }}\n */\n\nexport const createExpandHandlers = ({\n  expanded,\n  setExpanded,\n  onExpand,\n  onCollapse\n}) => {\n  const handleExpand = ({\n    path,\n    ...rest\n  }) => {\n    if (!expanded.includes(path)) {\n      setExpanded([...expanded, path]);\n\n      if (onExpand) {\n        onExpand({\n          path,\n          ...rest\n        });\n      }\n    }\n  };\n\n  const handleCollapse = ({\n    path,\n    ...rest\n  }) => {\n    const pathIndex = expanded.indexOf(path);\n\n    if (pathIndex !== -1) {\n      const updatedExpanded = pathIndex === 0 ? expanded.slice(1) : [...expanded.slice(0, pathIndex), ...expanded.slice(pathIndex + 1)];\n      setExpanded(updatedExpanded);\n\n      if (onCollapse) {\n        onCollapse({\n          path,\n          ...rest\n        });\n      }\n    }\n  };\n\n  return {\n    handleExpand,\n    handleCollapse\n  };\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-widgets/build/es/OrganisationUnitTree/useExpanded/helpers.js"],"names":["extractAllPathsFromPath","path","segments","replace","split","withSubPaths","map","segment","index","concat","slice","join","getInitiallyExpandedPaths","initiallyExpanded","reduce","all","curPath","allPathsInCurPath","createExpandHandlers","expanded","setExpanded","onExpand","onCollapse","handleExpand","rest","includes","handleCollapse","pathIndex","indexOf","updatedExpanded"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,uBAAuB,GAAGC,IAAI,IAAI;AAC7C;AACA,QAAMC,QAAQ,GAAGD,IAAI,CAACE,OAAL,CAAa,KAAb,EAAoB,EAApB,EAAwBC,KAAxB,CAA8B,GAA9B,CAAjB;AACA,QAAMC,YAAY,GAAGH,QAAQ,CAACI,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACpD;AACA,WAAO,IAAIC,MAAJ,CAAWP,QAAQ,CAACQ,KAAT,CAAe,CAAf,EAAkBF,KAAK,GAAG,CAA1B,EAA6BG,IAA7B,CAAkC,GAAlC,CAAX,CAAP;AACD,GAHoB,CAArB;AAIA,SAAON,YAAP;AACD,CARM;AASP;AACA;AACA;AACA;;AAEA,OAAO,MAAMO,yBAAyB,GAAGC,iBAAiB,IAAIA,iBAAiB,CAACC,MAAlB,CAAyB,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACvG,QAAMC,iBAAiB,GAAGjB,uBAAuB,CAACgB,OAAD,CAAjD;AACA,SAAO,CAAC,GAAGD,GAAJ,EAAS,GAAGE,iBAAZ,CAAP;AACD,CAH6D,EAG3D,EAH2D,CAAvD;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAAC;AACnCC,EAAAA,QADmC;AAEnCC,EAAAA,WAFmC;AAGnCC,EAAAA,QAHmC;AAInCC,EAAAA;AAJmC,CAAD,KAK9B;AACJ,QAAMC,YAAY,GAAG,CAAC;AACpBtB,IAAAA,IADoB;AAEpB,OAAGuB;AAFiB,GAAD,KAGf;AACJ,QAAI,CAACL,QAAQ,CAACM,QAAT,CAAkBxB,IAAlB,CAAL,EAA8B;AAC5BmB,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAclB,IAAd,CAAD,CAAX;;AAEA,UAAIoB,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAAC;AACPpB,UAAAA,IADO;AAEP,aAAGuB;AAFI,SAAD,CAAR;AAID;AACF;AACF,GAdD;;AAgBA,QAAME,cAAc,GAAG,CAAC;AACtBzB,IAAAA,IADsB;AAEtB,OAAGuB;AAFmB,GAAD,KAGjB;AACJ,UAAMG,SAAS,GAAGR,QAAQ,CAACS,OAAT,CAAiB3B,IAAjB,CAAlB;;AAEA,QAAI0B,SAAS,KAAK,CAAC,CAAnB,EAAsB;AACpB,YAAME,eAAe,GAAGF,SAAS,KAAK,CAAd,GAAkBR,QAAQ,CAACT,KAAT,CAAe,CAAf,CAAlB,GAAsC,CAAC,GAAGS,QAAQ,CAACT,KAAT,CAAe,CAAf,EAAkBiB,SAAlB,CAAJ,EAAkC,GAAGR,QAAQ,CAACT,KAAT,CAAeiB,SAAS,GAAG,CAA3B,CAArC,CAA9D;AACAP,MAAAA,WAAW,CAACS,eAAD,CAAX;;AAEA,UAAIP,UAAJ,EAAgB;AACdA,QAAAA,UAAU,CAAC;AACTrB,UAAAA,IADS;AAET,aAAGuB;AAFM,SAAD,CAAV;AAID;AACF;AACF,GAjBD;;AAmBA,SAAO;AACLD,IAAAA,YADK;AAELG,IAAAA;AAFK,GAAP;AAID,CA7CM","sourcesContent":["/**\n * @param {string} path\n * @returns {string[]}\n */\nexport const extractAllPathsFromPath = path => {\n  // remove leading slash and split by path delimiter/slashes\n  const segments = path.replace(/^\\//, '').split('/');\n  const withSubPaths = segments.map((segment, index) => {\n    // take all segments from 0 to index and join them with the delimiter\n    return \"/\".concat(segments.slice(0, index + 1).join('/'));\n  });\n  return withSubPaths;\n};\n/**\n * @param {string[]} initiallyExpanded\n * @returns {string[]}\n */\n\nexport const getInitiallyExpandedPaths = initiallyExpanded => initiallyExpanded.reduce((all, curPath) => {\n  const allPathsInCurPath = extractAllPathsFromPath(curPath);\n  return [...all, ...allPathsInCurPath];\n}, []);\n/**\n * @param {Object} args\n * @param {string[]} args.expanded\n * @param {Function} args.setExpanded\n * @param {Function} [args.onExpand]\n * @param {Function} [args.onCollapse]\n * @returns {{ handleExpand: Function, handleCollapse: Function }}\n */\n\nexport const createExpandHandlers = ({\n  expanded,\n  setExpanded,\n  onExpand,\n  onCollapse\n}) => {\n  const handleExpand = ({\n    path,\n    ...rest\n  }) => {\n    if (!expanded.includes(path)) {\n      setExpanded([...expanded, path]);\n\n      if (onExpand) {\n        onExpand({\n          path,\n          ...rest\n        });\n      }\n    }\n  };\n\n  const handleCollapse = ({\n    path,\n    ...rest\n  }) => {\n    const pathIndex = expanded.indexOf(path);\n\n    if (pathIndex !== -1) {\n      const updatedExpanded = pathIndex === 0 ? expanded.slice(1) : [...expanded.slice(0, pathIndex), ...expanded.slice(pathIndex + 1)];\n      setExpanded(updatedExpanded);\n\n      if (onCollapse) {\n        onCollapse({\n          path,\n          ...rest\n        });\n      }\n    }\n  };\n\n  return {\n    handleExpand,\n    handleCollapse\n  };\n};"]},"metadata":{},"sourceType":"module"}