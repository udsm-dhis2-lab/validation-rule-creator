{"ast":null,"code":"/**\n * @param {Object} args\n * @param {Object[]} args.sourceOptions\n * @param {string[]} args.selected\n * @param {Function} args.onChange\n * @param {Function} arg.setHighlightedSourceOptions\n * @returns {void}\n */\nexport const addAllSelectableSourceOptions = ({\n  sourceOptions,\n  onChange,\n  selected,\n  setHighlightedSourceOptions\n}) => {\n  const enabledSourceOptions = sourceOptions.filter(({\n    disabled\n  }) => !disabled);\n  const newSelected = enabledSourceOptions.reduce((accumulatedSelected, enabledSourceOption) => [...accumulatedSelected, enabledSourceOption.value], selected);\n  setHighlightedSourceOptions([]); // If we ever allow maxSelection to be any value\n  // other than 1 and Infinity, we need to think\n  // about how this should behave:\n  //\n  // Either we hide this button when it's not \"Infinity\",\n  // or we have to decide whether we want to take the first\n  // nth options or the last\n\n  onChange({\n    selected: newSelected\n  });\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-widgets/build/es/Transfer/Transfer/addAllSelectableSourceOptions.js"],"names":["addAllSelectableSourceOptions","sourceOptions","onChange","selected","setHighlightedSourceOptions","enabledSourceOptions","filter","disabled","newSelected","reduce","accumulatedSelected","enabledSourceOption","value"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,6BAA6B,GAAG,CAAC;AAC5CC,EAAAA,aAD4C;AAE5CC,EAAAA,QAF4C;AAG5CC,EAAAA,QAH4C;AAI5CC,EAAAA;AAJ4C,CAAD,KAKvC;AACJ,QAAMC,oBAAoB,GAAGJ,aAAa,CAACK,MAAd,CAAqB,CAAC;AACjDC,IAAAA;AADiD,GAAD,KAE5C,CAACA,QAFsB,CAA7B;AAGA,QAAMC,WAAW,GAAGH,oBAAoB,CAACI,MAArB,CAA4B,CAACC,mBAAD,EAAsBC,mBAAtB,KAA8C,CAAC,GAAGD,mBAAJ,EAAyBC,mBAAmB,CAACC,KAA7C,CAA1E,EAA+HT,QAA/H,CAApB;AACAC,EAAAA,2BAA2B,CAAC,EAAD,CAA3B,CALI,CAK6B;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEAF,EAAAA,QAAQ,CAAC;AACPC,IAAAA,QAAQ,EAAEK;AADH,GAAD,CAAR;AAGD,CArBM","sourcesContent":["/**\n * @param {Object} args\n * @param {Object[]} args.sourceOptions\n * @param {string[]} args.selected\n * @param {Function} args.onChange\n * @param {Function} arg.setHighlightedSourceOptions\n * @returns {void}\n */\nexport const addAllSelectableSourceOptions = ({\n  sourceOptions,\n  onChange,\n  selected,\n  setHighlightedSourceOptions\n}) => {\n  const enabledSourceOptions = sourceOptions.filter(({\n    disabled\n  }) => !disabled);\n  const newSelected = enabledSourceOptions.reduce((accumulatedSelected, enabledSourceOption) => [...accumulatedSelected, enabledSourceOption.value], selected);\n  setHighlightedSourceOptions([]); // If we ever allow maxSelection to be any value\n  // other than 1 and Infinity, we need to think\n  // about how this should behave:\n  //\n  // Either we hide this button when it's not \"Infinity\",\n  // or we have to decide whether we want to take the first\n  // nth options or the last\n\n  onChange({\n    selected: newSelected\n  });\n};"]},"metadata":{},"sourceType":"module"}