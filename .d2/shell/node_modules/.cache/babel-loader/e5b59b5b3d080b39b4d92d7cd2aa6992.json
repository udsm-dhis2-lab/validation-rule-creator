{"ast":null,"code":"import { sharedPropTypes } from '@dhis2/ui-constants';\nimport { Field, TextArea, Box } from '@dhis2/ui-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n/**\n * @module\n * @param {TextAreaField.PropTypes} props\n * @returns {React.Component}\n *\n * @example import { TextAreaField } from '@dhis2/ui-widgets'\n *\n * @see Specification: {@link https://github.com/dhis2/design-system/blob/update-input/atoms/inputfield.md#textarea|Design system}\n * @see Live demo: {@link /demo/?path=/story/textareafield--default|Storybook}\n */\n\nconst TextAreaField = ({\n  className,\n  onChange,\n  onFocus,\n  onBlur,\n  initialFocus,\n  dense,\n  required,\n  label,\n  disabled,\n  placeholder,\n  name,\n  valid,\n  error,\n  warning,\n  loading,\n  value,\n  tabIndex,\n  helpText,\n  validationText,\n  autoGrow,\n  readOnly,\n  resize,\n  rows,\n  inputWidth,\n  dataTest\n}) => /*#__PURE__*/React.createElement(Field, {\n  className: className,\n  dataTest: dataTest,\n  disabled: disabled,\n  required: required,\n  name: name,\n  helpText: helpText,\n  validationText: validationText,\n  error: error,\n  warning: warning,\n  valid: valid,\n  label: label\n}, /*#__PURE__*/React.createElement(Box, {\n  width: inputWidth,\n  minWidth: \"220px\"\n}, /*#__PURE__*/React.createElement(TextArea, {\n  onFocus: onFocus,\n  onBlur: onBlur,\n  onChange: onChange,\n  name: name,\n  value: value || '',\n  placeholder: placeholder,\n  disabled: disabled,\n  valid: valid,\n  warning: warning,\n  error: error,\n  loading: loading,\n  dense: dense,\n  tabIndex: tabIndex,\n  initialFocus: initialFocus,\n  autoGrow: autoGrow,\n  readOnly: readOnly,\n  resize: resize,\n  rows: rows\n})));\n\nTextAreaField.defaultProps = {\n  rows: 4,\n  width: '100%',\n  resize: 'vertical',\n  dataTest: 'dhis2-uiwidgets-textareafield'\n};\n/**\n * @typedef {Object} PropTypes\n * @static\n *\n * @prop {string} name\n * @prop {function} [onChange]\n * @prop {function} [onBlur]\n * @prop {function} [onFocus]\n * @prop {string} [label]\n * @prop {string} [className]\n * @prop {string} [placeholder]\n * @prop {string} [value]\n * @prop {string} [tabIndex]\n *\n * @prop {boolean} [required]\n * @prop {boolean} [disabled]\n * @prop {boolean} [dense] - Compact mode\n * @prop {boolean} [initialFocus]\n *\n * @prop {boolean} [valid] - `valid`, `warning`, `error`, and `loading`\n * are mutually exclusive\n * @prop {boolean} [warning]\n * @prop {boolean} [error]\n * @prop {boolean} [loading]\n *\n * @prop {string} [validationText]\n * @prop {string} [helpText]\n *\n * @prop {boolean} [autoGrow]\n * @prop {boolean} [readOnly]\n * @prop {string} [resize=vertical] - resize attribute on the textarea,\n * one of `none`, `both`, `horizontal`, `vertical`\n * @prop {number} [rows=4]\n * @prop {string} [inputWidth]\n * @prop {string} [dataTest]\n */\n\nTextAreaField.propTypes = {\n  /** Grow the text area in response to overflow instead of adding a scroll bar */\n  autoGrow: PropTypes.bool,\n  className: PropTypes.string,\n  dataTest: PropTypes.string,\n\n  /** Compact mode */\n  dense: PropTypes.bool,\n\n  /** Disables the textarea and makes in non-interactive */\n  disabled: PropTypes.bool,\n\n  /** Applies 'error' styles for validation feedback. Mutually exclusive with `valid` and `warning` props */\n  error: sharedPropTypes.statusPropType,\n\n  /** Adds useful help text below the textarea */\n  helpText: PropTypes.string,\n\n  /** Grabs initial focus on the page */\n  initialFocus: PropTypes.bool,\n\n  /** Sets the width of the textarea. Minimum 220px. Any valid CSS measurement can be used */\n  inputWidth: PropTypes.string,\n\n  /** Labels the textarea */\n  label: PropTypes.string,\n\n  /** Adds a loading spinner */\n  loading: PropTypes.bool,\n\n  /** Name associated with the text area. Passed in object argument to event handlers. */\n  name: PropTypes.string,\n\n  /** Placeholder text for an empty textarea */\n  placeholder: PropTypes.string,\n\n  /** Makes the textarea read-only */\n  readOnly: PropTypes.bool,\n\n  /** Adds an asterisk to the label to indicate this field is required */\n  required: PropTypes.bool,\n\n  /** [Resize property](https://developer.mozilla.org/en-US/docs/Web/CSS/resize) for the textarea element */\n  resize: PropTypes.oneOf(['none', 'both', 'horizontal', 'vertical']),\n\n  /** Initial height of the textarea, in lines of text */\n  rows: PropTypes.number,\n  tabIndex: PropTypes.string,\n\n  /** Applies 'valid' styles for validation feedback. Mutually exclusive with `warning` and `error` props */\n  valid: sharedPropTypes.statusPropType,\n\n  /** Validation text below the textarea to provide validation feedback. Changes appearance depending on validation status */\n  validationText: PropTypes.string,\n\n  /** Value in the textarea. Can be used to control component (recommended). Passed in object argument to event handlers. */\n  value: PropTypes.string,\n\n  /** Applies 'warning' styles for validation feedback. Mutually exclusive with `valid` and `error` props */\n  warning: sharedPropTypes.statusPropType,\n\n  /** Called with signature ({ name: string, value: string }, event) */\n  onBlur: PropTypes.func,\n\n  /** Called with signature ({ name: string, value: string }, event) */\n  onChange: PropTypes.func,\n\n  /** Called with signature ({ name: string, value: string }, event) */\n  onFocus: PropTypes.func\n};\nexport { TextAreaField };","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-widgets/build/es/TextAreaField/TextAreaField.js"],"names":["sharedPropTypes","Field","TextArea","Box","PropTypes","React","TextAreaField","className","onChange","onFocus","onBlur","initialFocus","dense","required","label","disabled","placeholder","name","valid","error","warning","loading","value","tabIndex","helpText","validationText","autoGrow","readOnly","resize","rows","inputWidth","dataTest","createElement","width","minWidth","defaultProps","propTypes","bool","string","statusPropType","oneOf","number","func"],"mappings":"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","sourcesContent":["import { sharedPropTypes } from '@dhis2/ui-constants';\nimport { Field, TextArea, Box } from '@dhis2/ui-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n/**\n * @module\n * @param {TextAreaField.PropTypes} props\n * @returns {React.Component}\n *\n * @example import { TextAreaField } from '@dhis2/ui-widgets'\n *\n * @see Specification: {@link https://github.com/dhis2/design-system/blob/update-input/atoms/inputfield.md#textarea|Design system}\n * @see Live demo: {@link /demo/?path=/story/textareafield--default|Storybook}\n */\n\nconst TextAreaField = ({\n  className,\n  onChange,\n  onFocus,\n  onBlur,\n  initialFocus,\n  dense,\n  required,\n  label,\n  disabled,\n  placeholder,\n  name,\n  valid,\n  error,\n  warning,\n  loading,\n  value,\n  tabIndex,\n  helpText,\n  validationText,\n  autoGrow,\n  readOnly,\n  resize,\n  rows,\n  inputWidth,\n  dataTest\n}) => /*#__PURE__*/React.createElement(Field, {\n  className: className,\n  dataTest: dataTest,\n  disabled: disabled,\n  required: required,\n  name: name,\n  helpText: helpText,\n  validationText: validationText,\n  error: error,\n  warning: warning,\n  valid: valid,\n  label: label\n}, /*#__PURE__*/React.createElement(Box, {\n  width: inputWidth,\n  minWidth: \"220px\"\n}, /*#__PURE__*/React.createElement(TextArea, {\n  onFocus: onFocus,\n  onBlur: onBlur,\n  onChange: onChange,\n  name: name,\n  value: value || '',\n  placeholder: placeholder,\n  disabled: disabled,\n  valid: valid,\n  warning: warning,\n  error: error,\n  loading: loading,\n  dense: dense,\n  tabIndex: tabIndex,\n  initialFocus: initialFocus,\n  autoGrow: autoGrow,\n  readOnly: readOnly,\n  resize: resize,\n  rows: rows\n})));\n\nTextAreaField.defaultProps = {\n  rows: 4,\n  width: '100%',\n  resize: 'vertical',\n  dataTest: 'dhis2-uiwidgets-textareafield'\n};\n/**\n * @typedef {Object} PropTypes\n * @static\n *\n * @prop {string} name\n * @prop {function} [onChange]\n * @prop {function} [onBlur]\n * @prop {function} [onFocus]\n * @prop {string} [label]\n * @prop {string} [className]\n * @prop {string} [placeholder]\n * @prop {string} [value]\n * @prop {string} [tabIndex]\n *\n * @prop {boolean} [required]\n * @prop {boolean} [disabled]\n * @prop {boolean} [dense] - Compact mode\n * @prop {boolean} [initialFocus]\n *\n * @prop {boolean} [valid] - `valid`, `warning`, `error`, and `loading`\n * are mutually exclusive\n * @prop {boolean} [warning]\n * @prop {boolean} [error]\n * @prop {boolean} [loading]\n *\n * @prop {string} [validationText]\n * @prop {string} [helpText]\n *\n * @prop {boolean} [autoGrow]\n * @prop {boolean} [readOnly]\n * @prop {string} [resize=vertical] - resize attribute on the textarea,\n * one of `none`, `both`, `horizontal`, `vertical`\n * @prop {number} [rows=4]\n * @prop {string} [inputWidth]\n * @prop {string} [dataTest]\n */\n\nTextAreaField.propTypes = {\n  /** Grow the text area in response to overflow instead of adding a scroll bar */\n  autoGrow: PropTypes.bool,\n  className: PropTypes.string,\n  dataTest: PropTypes.string,\n\n  /** Compact mode */\n  dense: PropTypes.bool,\n\n  /** Disables the textarea and makes in non-interactive */\n  disabled: PropTypes.bool,\n\n  /** Applies 'error' styles for validation feedback. Mutually exclusive with `valid` and `warning` props */\n  error: sharedPropTypes.statusPropType,\n\n  /** Adds useful help text below the textarea */\n  helpText: PropTypes.string,\n\n  /** Grabs initial focus on the page */\n  initialFocus: PropTypes.bool,\n\n  /** Sets the width of the textarea. Minimum 220px. Any valid CSS measurement can be used */\n  inputWidth: PropTypes.string,\n\n  /** Labels the textarea */\n  label: PropTypes.string,\n\n  /** Adds a loading spinner */\n  loading: PropTypes.bool,\n\n  /** Name associated with the text area. Passed in object argument to event handlers. */\n  name: PropTypes.string,\n\n  /** Placeholder text for an empty textarea */\n  placeholder: PropTypes.string,\n\n  /** Makes the textarea read-only */\n  readOnly: PropTypes.bool,\n\n  /** Adds an asterisk to the label to indicate this field is required */\n  required: PropTypes.bool,\n\n  /** [Resize property](https://developer.mozilla.org/en-US/docs/Web/CSS/resize) for the textarea element */\n  resize: PropTypes.oneOf(['none', 'both', 'horizontal', 'vertical']),\n\n  /** Initial height of the textarea, in lines of text */\n  rows: PropTypes.number,\n  tabIndex: PropTypes.string,\n\n  /** Applies 'valid' styles for validation feedback. Mutually exclusive with `warning` and `error` props */\n  valid: sharedPropTypes.statusPropType,\n\n  /** Validation text below the textarea to provide validation feedback. Changes appearance depending on validation status */\n  validationText: PropTypes.string,\n\n  /** Value in the textarea. Can be used to control component (recommended). Passed in object argument to event handlers. */\n  value: PropTypes.string,\n\n  /** Applies 'warning' styles for validation feedback. Mutually exclusive with `valid` and `error` props */\n  warning: sharedPropTypes.statusPropType,\n\n  /** Called with signature ({ name: string, value: string }, event) */\n  onBlur: PropTypes.func,\n\n  /** Called with signature ({ name: string, value: string }, event) */\n  onChange: PropTypes.func,\n\n  /** Called with signature ({ name: string, value: string }, event) */\n  onFocus: PropTypes.func\n};\nexport { TextAreaField };"]},"metadata":{},"sourceType":"module"}