{"ast":null,"code":"/*\n * Requests that expect a \"text/plain\" Content-Type have been collected by scanning\n * the developer documentation:\n * https://docs.dhis2.org/master/en/developer/html/dhis2_developer_manual_full.html\n *\n * Note that currently it is not allowed to include an id property on a \"create\"\n * mutation object. This means that currently the `id` will always be included in\n * the resource property (string). If we decide to allow the `id` property for\n * \"create\" mutation-objects, we will have to include additional checks below.\n */\n// POST to `messageConversations/${id}` (reply to a messagConversation)\nexport const isReplyToMessageConversation = (type, {\n  resource\n}) => {\n  const pattern = /^messageConversations\\/[a-zA-Z0-9]{11}$/;\n  return type === 'create' && pattern.test(resource);\n}; // POST to 'messageConversations/feedback' (create a feedback message)\n\nexport const isCreateFeedbackMessage = (type, {\n  resource\n}) => type === 'create' && resource === 'messageConversations/feedback'; // POST or PUT to `interpretations/${objectType}/${id}` (add or update an interpretation)\n\nexport const isCreateOrUpdateInterpretation = (type, {\n  resource,\n  id\n}) => {\n  if (type !== 'create' && type !== 'replace') {\n    return false;\n  }\n\n  let resourcePattern;\n\n  if (type === 'replace' && id) {\n    resourcePattern = /^interpretations\\/(?:reportTable|chart|visualization|map|eventReport|eventChart|dataSetReport)$/;\n    const idPattern = /^[a-zA-Z0-9]{11}$/;\n    return resourcePattern.test(resource) && idPattern.test(id);\n  }\n\n  resourcePattern = /^interpretations\\/(?:reportTable|chart|visualization|map|eventReport|eventChart|dataSetReport)\\/[a-zA-Z0-9]{11}$/;\n  return resourcePattern.test(resource);\n}; // POST to `interpretations/${id}/comments` (comment on an interpretation)\n\nexport const isCommentOnInterpretation = (type, {\n  resource\n}) => {\n  const pattern = /^interpretations\\/[a-zA-Z0-9]{11}\\/comments$/;\n  return type === 'create' && pattern.test(resource);\n}; // PUT to `interpretations/${interpretationId}/comments/${commentId}`\n// (update an interpretation comment)\n\nexport const isInterpretationCommentUpdate = (type, {\n  resource,\n  id\n}) => {\n  if (type !== 'replace') {\n    return false;\n  }\n\n  if (id) {\n    const idPatternLong = /^[a-zA-Z0-9]{11}\\/comments\\/[a-zA-Z0-9]{11}$/;\n    const idPatternShort = /^[a-zA-Z0-9]{11}$/;\n    const resourcePattern = /^interpretations\\/[a-zA-Z0-9]{11}\\/comments$/;\n    return resource === 'interpretations' && idPatternLong.test(id) || resourcePattern.test(resource) && idPatternShort.test(id);\n  }\n\n  const pattern = /^interpretations\\/[a-zA-Z0-9]{11}\\/comments\\/[a-zA-Z0-9]{11}$/;\n  return pattern.test(resource);\n}; // POST to `systemSettings/${settingKey}` or `userSettings/${settingKey}`\n// (add or update a single system or user setting)\n\nexport const isAddOrUpdateSystemOrUserSetting = (type, {\n  resource\n}) => {\n  // At least 4 chars because the all start with 'key' (i.e. keyStyle)\n  const pattern = /^(?:systemSettings|userSettings)\\/[a-zA-Z]{4,}$/;\n  return type === 'create' && pattern.test(resource);\n}; // POST to `configuration/${configurationProperty}`\n// (add or update a single configuration property)\n\nexport const addOrUpdateConfigurationProperty = (type, {\n  resource\n}) => {\n  // NOTE: The corsWhitelist property does expect \"application/json\"\n  const pattern = /^(configuration)\\/([a-zA-Z]{1,50})$/;\n  const match = resource.match(pattern);\n  return type === 'create' && !!match && match[2] !== 'corsWhitelist';\n}; // POST to 'synchronization/metadataPull' (install a metadata package)\n\nexport const isMetadataPackageInstallation = (type, {\n  resource\n}) => type === 'create' && resource === 'synchronization/metadataPull';","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/app-service-data/build/es/links/RestAPILink/queryToRequestOptions/textPlainMatchers.js"],"names":["isReplyToMessageConversation","type","resource","pattern","test","isCreateFeedbackMessage","isCreateOrUpdateInterpretation","id","resourcePattern","idPattern","isCommentOnInterpretation","isInterpretationCommentUpdate","idPatternLong","idPatternShort","isAddOrUpdateSystemOrUserSetting","addOrUpdateConfigurationProperty","match","isMetadataPackageInstallation"],"mappings":"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","sourcesContent":["/*\n * Requests that expect a \"text/plain\" Content-Type have been collected by scanning\n * the developer documentation:\n * https://docs.dhis2.org/master/en/developer/html/dhis2_developer_manual_full.html\n *\n * Note that currently it is not allowed to include an id property on a \"create\"\n * mutation object. This means that currently the `id` will always be included in\n * the resource property (string). If we decide to allow the `id` property for\n * \"create\" mutation-objects, we will have to include additional checks below.\n */\n// POST to `messageConversations/${id}` (reply to a messagConversation)\nexport const isReplyToMessageConversation = (type, {\n  resource\n}) => {\n  const pattern = /^messageConversations\\/[a-zA-Z0-9]{11}$/;\n  return type === 'create' && pattern.test(resource);\n}; // POST to 'messageConversations/feedback' (create a feedback message)\n\nexport const isCreateFeedbackMessage = (type, {\n  resource\n}) => type === 'create' && resource === 'messageConversations/feedback'; // POST or PUT to `interpretations/${objectType}/${id}` (add or update an interpretation)\n\nexport const isCreateOrUpdateInterpretation = (type, {\n  resource,\n  id\n}) => {\n  if (type !== 'create' && type !== 'replace') {\n    return false;\n  }\n\n  let resourcePattern;\n\n  if (type === 'replace' && id) {\n    resourcePattern = /^interpretations\\/(?:reportTable|chart|visualization|map|eventReport|eventChart|dataSetReport)$/;\n    const idPattern = /^[a-zA-Z0-9]{11}$/;\n    return resourcePattern.test(resource) && idPattern.test(id);\n  }\n\n  resourcePattern = /^interpretations\\/(?:reportTable|chart|visualization|map|eventReport|eventChart|dataSetReport)\\/[a-zA-Z0-9]{11}$/;\n  return resourcePattern.test(resource);\n}; // POST to `interpretations/${id}/comments` (comment on an interpretation)\n\nexport const isCommentOnInterpretation = (type, {\n  resource\n}) => {\n  const pattern = /^interpretations\\/[a-zA-Z0-9]{11}\\/comments$/;\n  return type === 'create' && pattern.test(resource);\n}; // PUT to `interpretations/${interpretationId}/comments/${commentId}`\n// (update an interpretation comment)\n\nexport const isInterpretationCommentUpdate = (type, {\n  resource,\n  id\n}) => {\n  if (type !== 'replace') {\n    return false;\n  }\n\n  if (id) {\n    const idPatternLong = /^[a-zA-Z0-9]{11}\\/comments\\/[a-zA-Z0-9]{11}$/;\n    const idPatternShort = /^[a-zA-Z0-9]{11}$/;\n    const resourcePattern = /^interpretations\\/[a-zA-Z0-9]{11}\\/comments$/;\n    return resource === 'interpretations' && idPatternLong.test(id) || resourcePattern.test(resource) && idPatternShort.test(id);\n  }\n\n  const pattern = /^interpretations\\/[a-zA-Z0-9]{11}\\/comments\\/[a-zA-Z0-9]{11}$/;\n  return pattern.test(resource);\n}; // POST to `systemSettings/${settingKey}` or `userSettings/${settingKey}`\n// (add or update a single system or user setting)\n\nexport const isAddOrUpdateSystemOrUserSetting = (type, {\n  resource\n}) => {\n  // At least 4 chars because the all start with 'key' (i.e. keyStyle)\n  const pattern = /^(?:systemSettings|userSettings)\\/[a-zA-Z]{4,}$/;\n  return type === 'create' && pattern.test(resource);\n}; // POST to `configuration/${configurationProperty}`\n// (add or update a single configuration property)\n\nexport const addOrUpdateConfigurationProperty = (type, {\n  resource\n}) => {\n  // NOTE: The corsWhitelist property does expect \"application/json\"\n  const pattern = /^(configuration)\\/([a-zA-Z]{1,50})$/;\n  const match = resource.match(pattern);\n  return type === 'create' && !!match && match[2] !== 'corsWhitelist';\n}; // POST to 'synchronization/metadataPull' (install a metadata package)\n\nexport const isMetadataPackageInstallation = (type, {\n  resource\n}) => type === 'create' && resource === 'synchronization/metadataPull';"]},"metadata":{},"sourceType":"module"}