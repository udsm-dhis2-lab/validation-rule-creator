{"ast":null,"code":"import propTypes from 'prop-types';\n\nconst mutuallyExclusiveFactory = (exlusivePropNames, propType, isRequired) => (props, propName, componentName) => {\n  const baseMsg = `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`,`;\n  const isDefined = typeof props[propName] !== 'undefined'; // Usage errors\n\n  if (exlusivePropNames.length === 0) {\n    return new Error(`mutuallyExclusive was called without any arguments for property \\`${propName}\\` on component \\`${componentName}\\`. Please add the required arguments.`);\n  } // Validation errors\n\n\n  if (isRequired && !isDefined) {\n    return new Error(`${baseMsg} this prop is required but no value was found.`);\n  } // This is how to programatically invoke a propTypes check\n  // https://github.com/facebook/prop-types#proptypescheckproptypes\n\n\n  propTypes.checkPropTypes({\n    [propName]: propType\n  }, props, 'prop', componentName);\n\n  if (props[propName]) {\n    const thruthySiblingPropName = exlusivePropNames.find(name => props[name] && name !== propName);\n\n    if (thruthySiblingPropName) {\n      return new Error(`${baseMsg} Property '${propName}' is mutually exclusive with '${thruthySiblingPropName}', but both have a thruthy value.`);\n    }\n  }\n\n  return null;\n};\n/**\n * Ensure that only one property within a specified list is thruthy\n * This function will also check if the current property value is of the specified type\n * @param {array<string>} exlusivePropNames - The prop names to be checked\n * @param {function} propType - The prop-type that the current prop-value needs to conform to\n * @return {Error|null} Returns null if all conditions are met, or an error\n * @example\n * import React from 'react'\n * import cx from 'classnames'\n * import propTypes from 'prop-types'\n * import { mutuallyExclusive } from '@dhis2/prop-types'\n *\n * const Alert = ({ danger, warning, success, children }) => (\n *     <div className={cx({danger, warning, success})}>\n *         {children}\n *     </div>\n * )\n *\n * const statusPropType = mutuallyExclusive(['danger', 'warning', 'success'], propTypes.bool)\n *\n * Alert.propTypes = {\n *     children: propTypes.node,\n *     danger: statusPropType,\n *     warning: statusPropType,\n *     success: statusPropType,\n * }\n */\n\n\nexport function mutuallyExclusive(exlusivePropNames, propType) {\n  const fn = mutuallyExclusiveFactory(exlusivePropNames, propType, false);\n  fn.isRequired = mutuallyExclusiveFactory(exlusivePropNames, propType, true);\n  return fn;\n}","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/prop-types/build/es/propTypes/mutuallyExclusive.js"],"names":["propTypes","mutuallyExclusiveFactory","exlusivePropNames","propType","isRequired","props","propName","componentName","baseMsg","isDefined","length","Error","checkPropTypes","thruthySiblingPropName","find","name","mutuallyExclusive","fn"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,wBAAwB,GAAG,CAACC,iBAAD,EAAoBC,QAApB,EAA8BC,UAA9B,KAA6C,CAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,KAAoC;AAChH,QAAMC,OAAO,GAAI,kBAAiBF,QAAS,oBAAmBC,aAAc,KAA5E;AACA,QAAME,SAAS,GAAG,OAAOJ,KAAK,CAACC,QAAD,CAAZ,KAA2B,WAA7C,CAFgH,CAEtD;;AAE1D,MAAIJ,iBAAiB,CAACQ,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,WAAO,IAAIC,KAAJ,CAAW,qEAAoEL,QAAS,qBAAoBC,aAAc,wCAA1H,CAAP;AACD,GAN+G,CAM9G;;;AAGF,MAAIH,UAAU,IAAI,CAACK,SAAnB,EAA8B;AAC5B,WAAO,IAAIE,KAAJ,CAAW,GAAEH,OAAQ,gDAArB,CAAP;AACD,GAX+G,CAW9G;AACF;;;AAGAR,EAAAA,SAAS,CAACY,cAAV,CAAyB;AACvB,KAACN,QAAD,GAAYH;AADW,GAAzB,EAEGE,KAFH,EAEU,MAFV,EAEkBE,aAFlB;;AAIA,MAAIF,KAAK,CAACC,QAAD,CAAT,EAAqB;AACnB,UAAMO,sBAAsB,GAAGX,iBAAiB,CAACY,IAAlB,CAAuBC,IAAI,IAAIV,KAAK,CAACU,IAAD,CAAL,IAAeA,IAAI,KAAKT,QAAvD,CAA/B;;AAEA,QAAIO,sBAAJ,EAA4B;AAC1B,aAAO,IAAIF,KAAJ,CAAW,GAAEH,OAAQ,cAAaF,QAAS,iCAAgCO,sBAAuB,mCAAlG,CAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD,CA5BD;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASG,iBAAT,CAA2Bd,iBAA3B,EAA8CC,QAA9C,EAAwD;AAC7D,QAAMc,EAAE,GAAGhB,wBAAwB,CAACC,iBAAD,EAAoBC,QAApB,EAA8B,KAA9B,CAAnC;AACAc,EAAAA,EAAE,CAACb,UAAH,GAAgBH,wBAAwB,CAACC,iBAAD,EAAoBC,QAApB,EAA8B,IAA9B,CAAxC;AACA,SAAOc,EAAP;AACD","sourcesContent":["import propTypes from 'prop-types';\n\nconst mutuallyExclusiveFactory = (exlusivePropNames, propType, isRequired) => (props, propName, componentName) => {\n  const baseMsg = `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`,`;\n  const isDefined = typeof props[propName] !== 'undefined'; // Usage errors\n\n  if (exlusivePropNames.length === 0) {\n    return new Error(`mutuallyExclusive was called without any arguments for property \\`${propName}\\` on component \\`${componentName}\\`. Please add the required arguments.`);\n  } // Validation errors\n\n\n  if (isRequired && !isDefined) {\n    return new Error(`${baseMsg} this prop is required but no value was found.`);\n  } // This is how to programatically invoke a propTypes check\n  // https://github.com/facebook/prop-types#proptypescheckproptypes\n\n\n  propTypes.checkPropTypes({\n    [propName]: propType\n  }, props, 'prop', componentName);\n\n  if (props[propName]) {\n    const thruthySiblingPropName = exlusivePropNames.find(name => props[name] && name !== propName);\n\n    if (thruthySiblingPropName) {\n      return new Error(`${baseMsg} Property '${propName}' is mutually exclusive with '${thruthySiblingPropName}', but both have a thruthy value.`);\n    }\n  }\n\n  return null;\n};\n/**\n * Ensure that only one property within a specified list is thruthy\n * This function will also check if the current property value is of the specified type\n * @param {array<string>} exlusivePropNames - The prop names to be checked\n * @param {function} propType - The prop-type that the current prop-value needs to conform to\n * @return {Error|null} Returns null if all conditions are met, or an error\n * @example\n * import React from 'react'\n * import cx from 'classnames'\n * import propTypes from 'prop-types'\n * import { mutuallyExclusive } from '@dhis2/prop-types'\n *\n * const Alert = ({ danger, warning, success, children }) => (\n *     <div className={cx({danger, warning, success})}>\n *         {children}\n *     </div>\n * )\n *\n * const statusPropType = mutuallyExclusive(['danger', 'warning', 'success'], propTypes.bool)\n *\n * Alert.propTypes = {\n *     children: propTypes.node,\n *     danger: statusPropType,\n *     warning: statusPropType,\n *     success: statusPropType,\n * }\n */\n\n\nexport function mutuallyExclusive(exlusivePropNames, propType) {\n  const fn = mutuallyExclusiveFactory(exlusivePropNames, propType, false);\n  fn.isRequired = mutuallyExclusiveFactory(exlusivePropNames, propType, true);\n  return fn;\n}"]},"metadata":{},"sourceType":"module"}