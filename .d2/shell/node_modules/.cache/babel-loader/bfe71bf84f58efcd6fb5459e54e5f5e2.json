{"ast":null,"code":"import { mutuallyExclusive, requiredIf } from '@dhis2/prop-types';\nimport PropTypes from 'prop-types';\nimport React, { forwardRef } from 'react';\nimport { TableDataCell, TableHeaderCell } from './TableElements/index.js';\n/**\n * @module\n * @param {DataTableCell.PropTypes} props\n * @returns {React.Component}\n * @example import { DataTableCell } from '@dhis2/ui'\n * @see Live demo: {@link /demo/?path=/story/datatable--default|Storybook}\n */\n\nexport const DataTableCell = /*#__PURE__*/forwardRef(({\n  active,\n  align,\n  bordered,\n  children,\n  className,\n  colSpan,\n  dataTest,\n  error,\n  fixed,\n  large,\n  left,\n  muted,\n  rowSpan,\n  role,\n  scope,\n  staticStyle,\n  tag,\n  valid,\n  width,\n  onClick\n}, ref) => {\n  const TableCell = !tag && fixed || tag && tag === 'th' ? TableHeaderCell : TableDataCell;\n  return /*#__PURE__*/React.createElement(TableCell, {\n    active: active,\n    align: align,\n    bordered: bordered,\n    className: className,\n    colSpan: colSpan,\n    dataTest: dataTest,\n    error: error,\n    fixed: fixed,\n    large: large,\n    left: left,\n    muted: muted,\n    rowSpan: rowSpan,\n    ref: ref,\n    role: role,\n    staticStyle: staticStyle,\n    scope: scope,\n    valid: valid,\n    width: width,\n    onClick: onClick\n  }, children);\n});\nDataTableCell.displayName = 'DataTableCell';\nDataTableCell.defaultProps = {\n  align: 'left',\n  dataTest: 'dhis2-uicore-datatablecell',\n  left: 'auto',\n  width: 'auto'\n};\nconst stylePropType = mutuallyExclusive(['valid', 'error', 'muted'], PropTypes.bool);\nconst requiredIfFixedPropType = requiredIf(props => props.fixed, PropTypes.string);\n/**\n * @typedef {Object} PropTypes\n * @static\n * @prop {boolean} [active] To toggle background color, for example for editing\n * @prop {left|center|right} [align=left]\n * @prop {boolean} [bordered]\n * @prop {node} [children]\n * @prop {string} [className]\n * @prop {string} [colSpan]\n * @prop {string} [dataTest=dhis2-uicore-tabledatacell]\n * @prop {boolean} [error] Mutually exclusive with muted and valid\n * @prop {boolean} [fixed] When true a TableHeaderCell with sticky positioning will be rendered\n * @prop {boolean} [large]\n * @prop {string} [left=auto] Required when fixed\n * @prop {boolean} [muted] Mutually exclusive with error and valid\n * @prop {string} [role]\n * @prop {string} [rowSpan]\n * @prop {string} [scope]\n * @prop {string} [staticStyle] Surpress hover and active event styles\n * @prop {td|th} [tag] Render a TableDataCell or TableHeaderCell respectively\n * @prop {boolean} [valid] Mutually exclusive with error and muted\n * @prop {string} [width=auto] Required when fixed\n * @prop {function} [onClick]\n */\n\nDataTableCell.propTypes = {\n  /** To toggle background color, for example for editing */\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['left', 'center', 'right']),\n  bordered: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  colSpan: PropTypes.string,\n  dataTest: PropTypes.string,\n\n  /** Mutually exclusive with muted and valid */\n  error: stylePropType,\n\n  /** When true a TableHeaderCell with sticky positioning will be rendered */\n  fixed: PropTypes.bool,\n  large: PropTypes.bool,\n\n  /** Required when fixed */\n  left: requiredIfFixedPropType,\n\n  /** Mutually exclusive with error and valid */\n  muted: stylePropType,\n  role: PropTypes.string,\n  rowSpan: PropTypes.string,\n  scope: PropTypes.string,\n\n  /** Surpress hover and active event styles */\n  staticStyle: PropTypes.bool,\n\n  /** Render a TableDataCell or TableHeaderCell respectively */\n  tag: PropTypes.oneOf(['td', 'th']),\n\n  /** Mutually exclusive with error and muted */\n  valid: stylePropType,\n\n  /** Required when fixed */\n  width: requiredIfFixedPropType,\n  onClick: PropTypes.func\n};","map":{"version":3,"sources":["/Users/rajabu/.config/yarn/global/node_modules/@dhis2/ui/node_modules/@dhis2/ui-widgets/build/es/DataTable/DataTableCell.js"],"names":["mutuallyExclusive","requiredIf","PropTypes","React","forwardRef","TableDataCell","TableHeaderCell","DataTableCell","active","align","bordered","children","className","colSpan","dataTest","error","fixed","large","left","muted","rowSpan","role","scope","staticStyle","tag","valid","width","onClick","ref","TableCell","createElement","displayName","defaultProps","stylePropType","bool","requiredIfFixedPropType","props","string","propTypes","oneOf","node","func"],"mappings":"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","sourcesContent":["import { mutuallyExclusive, requiredIf } from '@dhis2/prop-types';\nimport PropTypes from 'prop-types';\nimport React, { forwardRef } from 'react';\nimport { TableDataCell, TableHeaderCell } from './TableElements/index.js';\n/**\n * @module\n * @param {DataTableCell.PropTypes} props\n * @returns {React.Component}\n * @example import { DataTableCell } from '@dhis2/ui'\n * @see Live demo: {@link /demo/?path=/story/datatable--default|Storybook}\n */\n\nexport const DataTableCell = /*#__PURE__*/forwardRef(({\n  active,\n  align,\n  bordered,\n  children,\n  className,\n  colSpan,\n  dataTest,\n  error,\n  fixed,\n  large,\n  left,\n  muted,\n  rowSpan,\n  role,\n  scope,\n  staticStyle,\n  tag,\n  valid,\n  width,\n  onClick\n}, ref) => {\n  const TableCell = !tag && fixed || tag && tag === 'th' ? TableHeaderCell : TableDataCell;\n  return /*#__PURE__*/React.createElement(TableCell, {\n    active: active,\n    align: align,\n    bordered: bordered,\n    className: className,\n    colSpan: colSpan,\n    dataTest: dataTest,\n    error: error,\n    fixed: fixed,\n    large: large,\n    left: left,\n    muted: muted,\n    rowSpan: rowSpan,\n    ref: ref,\n    role: role,\n    staticStyle: staticStyle,\n    scope: scope,\n    valid: valid,\n    width: width,\n    onClick: onClick\n  }, children);\n});\nDataTableCell.displayName = 'DataTableCell';\nDataTableCell.defaultProps = {\n  align: 'left',\n  dataTest: 'dhis2-uicore-datatablecell',\n  left: 'auto',\n  width: 'auto'\n};\nconst stylePropType = mutuallyExclusive(['valid', 'error', 'muted'], PropTypes.bool);\nconst requiredIfFixedPropType = requiredIf(props => props.fixed, PropTypes.string);\n/**\n * @typedef {Object} PropTypes\n * @static\n * @prop {boolean} [active] To toggle background color, for example for editing\n * @prop {left|center|right} [align=left]\n * @prop {boolean} [bordered]\n * @prop {node} [children]\n * @prop {string} [className]\n * @prop {string} [colSpan]\n * @prop {string} [dataTest=dhis2-uicore-tabledatacell]\n * @prop {boolean} [error] Mutually exclusive with muted and valid\n * @prop {boolean} [fixed] When true a TableHeaderCell with sticky positioning will be rendered\n * @prop {boolean} [large]\n * @prop {string} [left=auto] Required when fixed\n * @prop {boolean} [muted] Mutually exclusive with error and valid\n * @prop {string} [role]\n * @prop {string} [rowSpan]\n * @prop {string} [scope]\n * @prop {string} [staticStyle] Surpress hover and active event styles\n * @prop {td|th} [tag] Render a TableDataCell or TableHeaderCell respectively\n * @prop {boolean} [valid] Mutually exclusive with error and muted\n * @prop {string} [width=auto] Required when fixed\n * @prop {function} [onClick]\n */\n\nDataTableCell.propTypes = {\n  /** To toggle background color, for example for editing */\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['left', 'center', 'right']),\n  bordered: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  colSpan: PropTypes.string,\n  dataTest: PropTypes.string,\n\n  /** Mutually exclusive with muted and valid */\n  error: stylePropType,\n\n  /** When true a TableHeaderCell with sticky positioning will be rendered */\n  fixed: PropTypes.bool,\n  large: PropTypes.bool,\n\n  /** Required when fixed */\n  left: requiredIfFixedPropType,\n\n  /** Mutually exclusive with error and valid */\n  muted: stylePropType,\n  role: PropTypes.string,\n  rowSpan: PropTypes.string,\n  scope: PropTypes.string,\n\n  /** Surpress hover and active event styles */\n  staticStyle: PropTypes.bool,\n\n  /** Render a TableDataCell or TableHeaderCell respectively */\n  tag: PropTypes.oneOf(['td', 'th']),\n\n  /** Mutually exclusive with error and muted */\n  valid: stylePropType,\n\n  /** Required when fixed */\n  width: requiredIfFixedPropType,\n  onClick: PropTypes.func\n};"]},"metadata":{},"sourceType":"module"}