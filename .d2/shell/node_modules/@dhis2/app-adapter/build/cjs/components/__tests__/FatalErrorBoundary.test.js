"use strict";

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _FatalErrorBoundary = require("../FatalErrorBoundary");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Something = () => {
  // Placeholder
  return null;
};

describe('FatalErrorBoundary', () => {
  it('Should render the normal tree when no error occurs', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_FatalErrorBoundary.FatalErrorBoundary, {
      classes: {}
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("span", {
      id: "testme"
    }, "Hello there!"))));
    expect(wrapper.find('span#testme').length).toBe(1);
  });
  it('Should render the error mask when an error is thrown', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_FatalErrorBoundary.FatalErrorBoundary, {
      classes: {}
    }, /*#__PURE__*/_react.default.createElement(Something, null)));
    expect(wrapper.find(Something).length).toBe(1);
    const testErrorText = 'This is a test of the emergency alert system.  This is only a test.';
    wrapper.find(Something).simulateError(new Error(testErrorText));
    expect(wrapper.contains('Something went wrong')).toBe(true);
  });
  it('Should match the snapshot tree when error is manually invoked', () => {
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_FatalErrorBoundary.FatalErrorBoundary, {
      classes: {}
    }, /*#__PURE__*/_react.default.createElement(Something, null)));
    const error = {
      stack: 'This is the stack'
    };
    const errorInfo = {
      componentStack: 'This is the component stack'
    };
    wrapper.setState({
      error,
      errorInfo
    });
    expect(wrapper.contains('Something went wrong')).toBe(true);
    expect(wrapper).toMatchSnapshot();
  });
});