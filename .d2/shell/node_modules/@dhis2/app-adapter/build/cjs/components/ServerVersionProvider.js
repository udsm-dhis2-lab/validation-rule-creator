"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ServerVersionProvider = void 0;

var _appRuntime = require("@dhis2/app-runtime");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _api = require("../utils/api");

var _parseServerVersion = require("../utils/parseServerVersion");

var _LoadingMask = require("./LoadingMask");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ServerVersionProvider = ({
  url,
  apiVersion,
  children
}) => {
  const [{
    loading,
    error,
    systemInfo
  }, setState] = (0, _react.useState)({
    loading: true
  });
  (0, _react.useEffect)(() => {
    setState(state => state.loading ? state : {
      loading: true
    });
    const request = (0, _api.get)("".concat(url, "/api/system/info"));
    request.then(systemInfo => {
      setState({
        loading: false,
        systemInfo
      });
    }).catch(e => {
      setState({
        loading: false,
        error: e
      });
    });
    return () => {
      request.abort();
    };
  }, [url]);

  if (loading) {
    return /*#__PURE__*/_react.default.createElement(_LoadingMask.LoadingMask, null);
  }

  if (error) {
    return children;
  }

  const serverVersion = (0, _parseServerVersion.parseServerVersion)(systemInfo.version);
  const realApiVersion = serverVersion.minor;
  return /*#__PURE__*/_react.default.createElement(_appRuntime.Provider, {
    config: {
      baseUrl: url,
      apiVersion: apiVersion || realApiVersion,
      serverVersion,
      systemInfo
    }
  }, children);
};

exports.ServerVersionProvider = ServerVersionProvider;
ServerVersionProvider.propTypes = {
  url: _propTypes.default.string.isRequired,
  apiVersion: _propTypes.default.number,
  children: _propTypes.default.element
};