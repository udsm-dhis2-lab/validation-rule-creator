"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLocale = void 0;

var _d2I18n = _interopRequireDefault(require("@dhis2/d2-i18n"));

var _moment = _interopRequireDefault(require("moment"));

var _react = require("react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

_d2I18n.default.setDefaultNamespace('default');

const simplifyLocale = locale => {
  const idx = locale.indexOf('-');

  if (idx === -1) {
    return locale;
  }

  return locale.substr(0, idx);
};

const setGlobalLocale = locale => {
  if (locale !== 'en' && locale !== 'en-us') {
    Promise.resolve("moment/locale/".concat(locale)).then(s => _interopRequireWildcard(require(s))).catch(() => {
      /* ignore */
    });
  }

  _moment.default.locale(locale);

  const simplifiedLocale = simplifyLocale(locale);

  _d2I18n.default.changeLanguage(simplifiedLocale);
};

const useLocale = locale => {
  const [result, setResult] = (0, _react.useState)(undefined);
  (0, _react.useEffect)(() => {
    if (!locale) {
      return;
    }

    setGlobalLocale(locale);
    setResult(locale);
  }, [locale]);
  return result;
};

exports.useLocale = useLocale;