import _JSXStyle from "styled-jsx/style";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import i18n from '@dhis2/d2-i18n';
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import styles from './styles/FatalErrorBoundary.style';
const translatedErrorHeading = i18n.t('An error occurred in the DHIS2 application.');

const replaceNewlinesWithBreaks = text => text.split('\n').reduce((out, line, i) => [...out, line, /*#__PURE__*/React.createElement("br", {
  key: i
})], []);

export class FatalErrorBoundary extends Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "toggleTechInfoDrawer", () => {
      this.setState({
        drawerOpen: !this.state.drawerOpen
      });
    });

    this.state = {
      error: null,
      errorInfo: null,
      drawerOpen: false
    };
  }

  componentDidCatch(error, errorInfo) {
    this.setState({
      error,
      errorInfo
    });
  }

  render() {
    const {
      children
    } = this.props;

    if (this.state.error) {
      return /*#__PURE__*/React.createElement("div", {
        className: "jsx-".concat(styles.__hash) + " " + "mask"
      }, /*#__PURE__*/React.createElement(_JSXStyle, {
        id: styles.__hash
      }, styles), /*#__PURE__*/React.createElement("div", {
        className: "jsx-".concat(styles.__hash) + " " + "container"
      }, /*#__PURE__*/React.createElement("div", {
        className: "jsx-".concat(styles.__hash) + " " + "message"
      }, i18n.t('Something went wrong')), /*#__PURE__*/React.createElement("div", {
        onClick: () => window.location.reload(),
        className: "jsx-".concat(styles.__hash) + " " + "link"
      }, i18n.t('Refresh to try again')), /*#__PURE__*/React.createElement("div", {
        onClick: this.toggleTechInfoDrawer,
        className: "jsx-".concat(styles.__hash) + " " + "drawerToggle"
      }, this.state.drawerOpen ? i18n.t('Hide technical details') : i18n.t('Show technical details')), /*#__PURE__*/React.createElement("div", {
        className: "jsx-".concat(styles.__hash) + " " + ((this.state.drawerOpen ? 'drawerVisible' : 'drawerHidden') || "")
      }, /*#__PURE__*/React.createElement("div", {
        className: "jsx-".concat(styles.__hash) + " " + "errorIntro"
      }, translatedErrorHeading, /*#__PURE__*/React.createElement("br", {
        className: "jsx-".concat(styles.__hash)
      }), i18n.t('The following information may be requested by technical support.')), /*#__PURE__*/React.createElement("div", {
        className: "jsx-".concat(styles.__hash) + " " + "errorDetails"
      }, [replaceNewlinesWithBreaks(this.state.error.stack + '\n---' + this.state.errorInfo.componentStack)]))));
    }

    return children;
  }

}
FatalErrorBoundary.propTypes = {
  children: PropTypes.node.isRequired
};